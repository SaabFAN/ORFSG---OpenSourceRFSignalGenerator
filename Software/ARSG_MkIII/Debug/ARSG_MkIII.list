
ARSG_MkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb20  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd78  0800bd78  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd80  0800bd80  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800bd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  20000140  0800bec8  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0800bec8  000210fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020032  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000414d  00000000  00000000  000401a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a38  00000000  00000000  000442f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  00045d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000715a  00000000  00000000  00047598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017367  00000000  00000000  0004e6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8dfc  00000000  00000000  00065a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000729c  00000000  00000000  0013e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000140 	.word	0x20000140
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bc90 	.word	0x0800bc90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000144 	.word	0x20000144
 80001c4:	0800bc90 	.word	0x0800bc90

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b972 	b.w	8000e00 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4688      	mov	r8, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14b      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4615      	mov	r5, r2
 8000b46:	d967      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0720 	rsb	r7, r2, #32
 8000b52:	fa01 f302 	lsl.w	r3, r1, r2
 8000b56:	fa20 f707 	lsr.w	r7, r0, r7
 8000b5a:	4095      	lsls	r5, r2
 8000b5c:	ea47 0803 	orr.w	r8, r7, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b6c:	fa1f fc85 	uxth.w	ip, r5
 8000b70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b78:	fb07 f10c 	mul.w	r1, r7, ip
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18eb      	adds	r3, r5, r3
 8000b82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b86:	f080 811b 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8118 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000b90:	3f02      	subs	r7, #2
 8000b92:	442b      	add	r3, r5
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	442c      	add	r4, r5
 8000bc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc4:	eba4 040c 	sub.w	r4, r4, ip
 8000bc8:	2700      	movs	r7, #0
 8000bca:	b11e      	cbz	r6, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0xbe>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80eb 	beq.w	8000dba <__udivmoddi4+0x286>
 8000be4:	2700      	movs	r7, #0
 8000be6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bea:	4638      	mov	r0, r7
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f783 	clz	r7, r3
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	d147      	bne.n	8000c8a <__udivmoddi4+0x156>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xd0>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2c4>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d0e0      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c12:	e9c6 4800 	strd	r4, r8, [r6]
 8000c16:	e7dd      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c18:	b902      	cbnz	r2, 8000c1c <__udivmoddi4+0xe8>
 8000c1a:	deff      	udf	#255	; 0xff
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f040 808f 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c26:	1b49      	subs	r1, r1, r5
 8000c28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2c:	fa1f f885 	uxth.w	r8, r5
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c36:	0c23      	lsrs	r3, r4, #16
 8000c38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb08 f10c 	mul.w	r1, r8, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x14c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x14a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80b6 	bhi.w	8000dea <__udivmoddi4+0x2b6>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e79f      	b.n	8000bca <__udivmoddi4+0x96>
 8000c8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8e:	40bb      	lsls	r3, r7
 8000c90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c98:	fa01 f407 	lsl.w	r4, r1, r7
 8000c9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca8:	4325      	orrs	r5, r4
 8000caa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cae:	0c2c      	lsrs	r4, r5, #16
 8000cb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb4:	fa1f fa8e 	uxth.w	sl, lr
 8000cb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd4:	f080 8087 	bcs.w	8000de6 <__udivmoddi4+0x2b2>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f240 8084 	bls.w	8000de6 <__udivmoddi4+0x2b2>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4473      	add	r3, lr
 8000ce4:	1b1b      	subs	r3, r3, r4
 8000ce6:	b2ad      	uxth	r5, r5
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf8:	45a2      	cmp	sl, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d04:	d26b      	bcs.n	8000dde <__udivmoddi4+0x2aa>
 8000d06:	45a2      	cmp	sl, r4
 8000d08:	d969      	bls.n	8000dde <__udivmoddi4+0x2aa>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4474      	add	r4, lr
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	fba0 8902 	umull	r8, r9, r0, r2
 8000d16:	eba4 040a 	sub.w	r4, r4, sl
 8000d1a:	454c      	cmp	r4, r9
 8000d1c:	46c2      	mov	sl, r8
 8000d1e:	464b      	mov	r3, r9
 8000d20:	d354      	bcc.n	8000dcc <__udivmoddi4+0x298>
 8000d22:	d051      	beq.n	8000dc8 <__udivmoddi4+0x294>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d069      	beq.n	8000dfc <__udivmoddi4+0x2c8>
 8000d28:	ebb1 050a 	subs.w	r5, r1, sl
 8000d2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	40fc      	lsrs	r4, r7
 8000d38:	ea4c 0505 	orr.w	r5, ip, r5
 8000d3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d40:	2700      	movs	r7, #0
 8000d42:	e747      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f703 	lsr.w	r7, r0, r3
 8000d4c:	4095      	lsls	r5, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	fa21 f303 	lsr.w	r3, r1, r3
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	4338      	orrs	r0, r7
 8000d5c:	0c01      	lsrs	r1, r0, #16
 8000d5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d62:	fa1f f885 	uxth.w	r8, r5
 8000d66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb07 f308 	mul.w	r3, r7, r8
 8000d72:	428b      	cmp	r3, r1
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x256>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d80:	d22f      	bcs.n	8000de2 <__udivmoddi4+0x2ae>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d92d      	bls.n	8000de2 <__udivmoddi4+0x2ae>
 8000d86:	3f02      	subs	r7, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	b281      	uxth	r1, r0
 8000d8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9a:	fb00 f308 	mul.w	r3, r0, r8
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x27e>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da8:	d217      	bcs.n	8000dda <__udivmoddi4+0x2a6>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d915      	bls.n	8000dda <__udivmoddi4+0x2a6>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db8:	e73b      	b.n	8000c32 <__udivmoddi4+0xfe>
 8000dba:	4637      	mov	r7, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e709      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	e6e7      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc8:	4541      	cmp	r1, r8
 8000dca:	d2ab      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dcc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	e7a4      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000dda:	4660      	mov	r0, ip
 8000ddc:	e7e9      	b.n	8000db2 <__udivmoddi4+0x27e>
 8000dde:	4618      	mov	r0, r3
 8000de0:	e795      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de2:	4667      	mov	r7, ip
 8000de4:	e7d1      	b.n	8000d8a <__udivmoddi4+0x256>
 8000de6:	4681      	mov	r9, r0
 8000de8:	e77c      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dea:	3802      	subs	r0, #2
 8000dec:	442c      	add	r4, r5
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0x14c>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	e72f      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df8:	4638      	mov	r0, r7
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xda>
 8000dfc:	4637      	mov	r7, r6
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0xa0>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <ADF4355_Setup>:
void ADF4355_ConvertFreq(double frequency);
void ADF4355_WriteData();
void ADF4355_WriteRegister(int adfreg);
void ADF4355_WriteDataLite(uint8_t mode);

uint8_t ADF4355_Setup(uint8_t startup, long refCLK, uint8_t mode, int MOD2) { // Setup the ADF4355 with standard values (Output: ON, Freqency: 100 MHz (for debug-purposes)). Requires Reference-Frequency, Mode, MOD2-Value
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	4613      	mov	r3, r2
 8000e18:	73bb      	strb	r3, [r7, #14]
	switch (setup_complete) {
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <ADF4355_Setup+0x7c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d002      	beq.n	8000e28 <ADF4355_Setup+0x20>
	case 0x01:
		break;
	default:
		startup = 0x01;	// Setup has not been completed, set Startup to true to make sure the chip is being set up correctly.
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e000      	b.n	8000e2a <ADF4355_Setup+0x22>
		break;
 8000e28:	bf00      	nop
	}
	switch (startup) {
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 81cb 	beq.w	80011c8 <ADF4355_Setup+0x3c0>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d000      	beq.n	8000e38 <ADF4355_Setup+0x30>
	case 0x00: // Chip has already been set up. No need for all the config-data to be set up again.
		// TODO: Configure the operating-Mode
		break;
	default:

		break;
 8000e36:	e1c8      	b.n	80011ca <ADF4355_Setup+0x3c2>
		if (refCLK < 10000000) {
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <ADF4355_Setup+0x80>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	dc02      	bgt.n	8000e46 <ADF4355_Setup+0x3e>
			adf_config.ERROR = 0xF0; // Save the REFERENCE-ERROR and
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e42:	22f0      	movs	r2, #240	; 0xf0
 8000e44:	745a      	strb	r2, [r3, #17]
		adf_config.REFCLK = refCLK;
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff fb10 	bl	800046c <__aeabi_i2d>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e52:	e9c2 3400 	strd	r3, r4, [r2]
		adf_config.AMPLITUDE = 0;	// Set Amplitude to lowest possible value
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
		adf_config.MODE = mode;	// Store the supplied Mode in the Mode-Variable
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	7493      	strb	r3, [r2, #18]
		adf_config.R0_PRESCAL = 0;	// Set Prescaler to 4/5 Mode
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
		adf_config.R0_AUTOCAL = 1;	// Enable the Autocalibration
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
		adf_config.R0_Nmin = 23;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e70:	2217      	movs	r2, #23
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
		if (MOD2 <= 2) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	dc0a      	bgt.n	8000e90 <ADF4355_Setup+0x88>
			adf_config.R2_MOD2_LSB = 2;	// Default-Value for MOD2
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <ADF4355_Setup+0x84>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e80:	e009      	b.n	8000e96 <ADF4355_Setup+0x8e>
 8000e82:	bf00      	nop
 8000e84:	2000015c 	.word	0x2000015c
 8000e88:	0098967f 	.word	0x0098967f
 8000e8c:	20000270 	.word	0x20000270
			adf_config.R2_MOD2_LSB = MOD2;
 8000e90:	4ac7      	ldr	r2, [pc, #796]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
		adf_config.R4_MUXOUT = 4;	// Set the MUXOUT to Digital Lock-Detect
 8000e96:	4bc6      	ldr	r3, [pc, #792]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000e98:	2204      	movs	r2, #4
 8000e9a:	655a      	str	r2, [r3, #84]	; 0x54
		adf_config.R4_REFDOUBLE = 1;
 8000e9c:	4bc4      	ldr	r3, [pc, #784]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	659a      	str	r2, [r3, #88]	; 0x58
		adf_config.R4_REFDIV2 = 0;
 8000ea2:	4bc3      	ldr	r3, [pc, #780]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	65da      	str	r2, [r3, #92]	; 0x5c
		adf_config.R4_RCOUNTER = 1;
 8000ea8:	4bc1      	ldr	r3, [pc, #772]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	661a      	str	r2, [r3, #96]	; 0x60
		adf_config.R4_DOUBLEBUF = 1;
 8000eae:	4bc0      	ldr	r3, [pc, #768]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	665a      	str	r2, [r3, #100]	; 0x64
		adf_config.R4_CHGPUMP = 0x03;	// Set Charge-Pump to 3.3mA
 8000eb4:	4bbe      	ldr	r3, [pc, #760]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	669a      	str	r2, [r3, #104]	; 0x68
		adf_config.R4_REFMODE = 1;	// Differential Reference Select
 8000eba:	4bbd      	ldr	r3, [pc, #756]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	66da      	str	r2, [r3, #108]	; 0x6c
		adf_config.R4_MUXLOG = 1;
 8000ec0:	4bbb      	ldr	r3, [pc, #748]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	671a      	str	r2, [r3, #112]	; 0x70
		adf_config.R4_PDPOLA = 1;
 8000ec6:	4bba      	ldr	r3, [pc, #744]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	675a      	str	r2, [r3, #116]	; 0x74
		adf_config.R4_PWRDN = 0;
 8000ecc:	4bb8      	ldr	r3, [pc, #736]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	679a      	str	r2, [r3, #120]	; 0x78
		adf_config.R4_CP3STATE = 0;
 8000ed2:	4bb7      	ldr	r3, [pc, #732]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	67da      	str	r2, [r3, #124]	; 0x7c
		adf_config.R4_COUNTRES = 0;
 8000ed8:	4bb5      	ldr	r3, [pc, #724]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		adf_config.PFD = ((adf_config.REFCLK * (adf_config.R4_REFDOUBLE + 1))
 8000ee0:	4bb3      	ldr	r3, [pc, #716]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ee2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ee6:	4bb2      	ldr	r3, [pc, #712]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	3301      	adds	r3, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fabd 	bl	800046c <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	4629      	mov	r1, r5
 8000efa:	f7ff fb21 	bl	8000540 <__aeabi_dmul>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4625      	mov	r5, r4
 8000f04:	461c      	mov	r4, r3
				/ (adf_config.R4_REFDIV2 + 1)) / adf_config.R4_RCOUNTER;
 8000f06:	4baa      	ldr	r3, [pc, #680]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff faad 	bl	800046c <__aeabi_i2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4620      	mov	r0, r4
 8000f18:	4629      	mov	r1, r5
 8000f1a:	f7ff fc3b 	bl	8000794 <__aeabi_ddiv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	4625      	mov	r5, r4
 8000f24:	461c      	mov	r4, r3
 8000f26:	4ba2      	ldr	r3, [pc, #648]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa9e 	bl	800046c <__aeabi_i2d>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff fc2c 	bl	8000794 <__aeabi_ddiv>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	460c      	mov	r4, r1
		adf_config.PFD = ((adf_config.REFCLK * (adf_config.R4_REFDOUBLE + 1))
 8000f40:	4a9b      	ldr	r2, [pc, #620]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f42:	e9c2 3402 	strd	r3, r4, [r2, #8]
		adf_config.REG5 = 0x00800025; // // REGISTER 5 IS RESERVED AND NEEDS TO BE SET TO 0x00800025
 8000f46:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f48:	4a9a      	ldr	r2, [pc, #616]	; (80011b4 <ADF4355_Setup+0x3ac>)
 8000f4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		adf_config.R6_BLEED_POLARITY = 0;
 8000f4e:	4b98      	ldr	r3, [pc, #608]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		adf_config.R6_GATED_BLEED = 1;
 8000f56:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		adf_config.R6_NEGATIVE_BLEED = 64;
 8000f5e:	4b94      	ldr	r3, [pc, #592]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		adf_config.R6_RFOUTB_SELECT = 0;
 8000f66:	4b92      	ldr	r3, [pc, #584]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		adf_config.R6_FEEDBACK_SELECT = 1;
 8000f6e:	4b90      	ldr	r3, [pc, #576]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		adf_config.R6_RF_DIV_SEL = 6;
 8000f76:	4b8e      	ldr	r3, [pc, #568]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f78:	2206      	movs	r2, #6
 8000f7a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		adf_config.R6_BLEED_CURRENT = 1;	// Default-Value for N = 23
 8000f7e:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		adf_config.R6_MUTE_TILL_LOCK = 0;
 8000f86:	4b8a      	ldr	r3, [pc, #552]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		adf_config.R6_AUXRF_ENABLE = 1;
 8000f8e:	4b88      	ldr	r3, [pc, #544]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		adf_config.R6_AUXRF_PWR = 3;
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		adf_config.R6_RFOUT_ENABLE = 0;	// TODO: Set this to ON when RF-Path is populated
 8000f9e:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		adf_config.R6_RFOUT_PWR = 0;
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		adf_config.R7_LE_SYNC_EDGE = 0;
 8000fae:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		adf_config.R7_LE_SYNC = 1;
 8000fb6:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		adf_config.R7_LDC = 2; 	// 2048 Cycles until LOCK-DETECT = TRUE
 8000fbe:	4b7c      	ldr	r3, [pc, #496]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		adf_config.R7_LOL_MODE = 0;	// Disable LOL-Mode since Differential Reference is used
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		adf_config.R7_LDP = 3;
 8000fce:	4b78      	ldr	r3, [pc, #480]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		adf_config.R7_LDM = 0;	// Set to 1 if using a Integer-N
 8000fd6:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		adf_config.REG8 = 0x15596568; //REGISTER 8 IS RESERVED AND NEEDS TO BE SET TO 0x102D0428 (ADF4355) or 0x15596568 (ADF4356)
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <ADF4355_Setup+0x3b0>)
 8000fe2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		adf_config.R9_VCO_BAND_DIV = (adf_config.PFD / 1600000);
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8000fe8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fec:	a362      	add	r3, pc, #392	; (adr r3, 8001178 <ADF4355_Setup+0x370>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fbcf 	bl	8000794 <__aeabi_ddiv>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f7ff fd61 	bl	8000ac4 <__aeabi_d2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001008:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		adf_config.R9_TIMEOUT = 34;
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <ADF4355_Setup+0x3a8>)
 800100e:	2222      	movs	r2, #34	; 0x22
 8001010:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		adf_config.R9_AUTOLVL_CAL_TIMEOUT = (int) (((0.0001 * adf_config.PFD)
 8001014:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001016:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800101a:	a359      	add	r3, pc, #356	; (adr r3, 8001180 <ADF4355_Setup+0x378>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fa8e 	bl	8000540 <__aeabi_dmul>
 8001024:	4603      	mov	r3, r0
 8001026:	460c      	mov	r4, r1
 8001028:	4625      	mov	r5, r4
 800102a:	461c      	mov	r4, r3
				/ adf_config.R9_TIMEOUT) + 1);
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <ADF4355_Setup+0x3a8>)
 800102e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa1a 	bl	800046c <__aeabi_i2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4620      	mov	r0, r4
 800103e:	4629      	mov	r1, r5
 8001040:	f7ff fba8 	bl	8000794 <__aeabi_ddiv>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4618      	mov	r0, r3
 800104a:	4621      	mov	r1, r4
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <ADF4355_Setup+0x3b4>)
 8001052:	f7ff f8bf 	bl	80001d4 <__adddf3>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
		adf_config.R9_AUTOLVL_CAL_TIMEOUT = (int) (((0.0001 * adf_config.PFD)
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	f7ff fd09 	bl	8000a74 <__aeabi_d2iz>
 8001062:	4602      	mov	r2, r0
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001066:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		adf_config.R9_SYNTH_LOCK_TIMEOUT = (int) (((0.00005 * adf_config.PFD)
 800106a:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <ADF4355_Setup+0x3a8>)
 800106c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001070:	a345      	add	r3, pc, #276	; (adr r3, 8001188 <ADF4355_Setup+0x380>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fa63 	bl	8000540 <__aeabi_dmul>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4625      	mov	r5, r4
 8001080:	461c      	mov	r4, r3
				/ adf_config.R9_TIMEOUT) + 1);
 8001082:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001084:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9ef 	bl	800046c <__aeabi_i2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4620      	mov	r0, r4
 8001094:	4629      	mov	r1, r5
 8001096:	f7ff fb7d 	bl	8000794 <__aeabi_ddiv>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4618      	mov	r0, r3
 80010a0:	4621      	mov	r1, r4
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b45      	ldr	r3, [pc, #276]	; (80011bc <ADF4355_Setup+0x3b4>)
 80010a8:	f7ff f894 	bl	80001d4 <__adddf3>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
		adf_config.R9_SYNTH_LOCK_TIMEOUT = (int) (((0.00005 * adf_config.PFD)
 80010b0:	4618      	mov	r0, r3
 80010b2:	4621      	mov	r1, r4
 80010b4:	f7ff fcde 	bl	8000a74 <__aeabi_d2iz>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <ADF4355_Setup+0x3a8>)
 80010bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				(int) (((adf_config.PFD / 90000) - 2) / 4);
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <ADF4355_Setup+0x3a8>)
 80010c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010c6:	a332      	add	r3, pc, #200	; (adr r3, 8001190 <ADF4355_Setup+0x388>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fb62 	bl	8000794 <__aeabi_ddiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4618      	mov	r0, r3
 80010d6:	4621      	mov	r1, r4
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	f7ff f876 	bl	80001d0 <__aeabi_dsub>
 80010e4:	4603      	mov	r3, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	4618      	mov	r0, r3
 80010ea:	4621      	mov	r1, r4
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <ADF4355_Setup+0x3b8>)
 80010f2:	f7ff fb4f 	bl	8000794 <__aeabi_ddiv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fcb9 	bl	8000a74 <__aeabi_d2iz>
 8001102:	4602      	mov	r2, r0
		adf_config.R10_ADC_CLK_DIV =
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001106:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		adf_config.R10_ADC_CONV = 1;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <ADF4355_Setup+0x3a8>)
 800110c:	2201      	movs	r2, #1
 800110e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		adf_config.R10_ADC_ENABLE = 1;
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001114:	2201      	movs	r2, #1
 8001116:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		adf_config.REG11 = 0x0061200B; // REGISTER 11 IS RESERVED AND NEEDS TO BE SET TO 0x0061300B in case of a ADF4355 and 0x61200B in case of a ADF4356
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <ADF4355_Setup+0x3a8>)
 800111c:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <ADF4355_Setup+0x3bc>)
 800111e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		adf_config.R12_PHASE_RESYNC_CLK_DIV = (int) (0.01 * adf_config.PFD);
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001124:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001128:	a31b      	add	r3, pc, #108	; (adr r3, 8001198 <ADF4355_Setup+0x390>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa07 	bl	8000540 <__aeabi_dmul>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	4618      	mov	r0, r3
 8001138:	4621      	mov	r1, r4
 800113a:	f7ff fc9b 	bl	8000a74 <__aeabi_d2iz>
 800113e:	4602      	mov	r2, r0
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001142:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		adf_config.R13_FRAC2_MSB = 0;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001148:	2200      	movs	r2, #0
 800114a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
		adf_config.R13_MOD2_MSB = 0;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <ADF4355_Setup+0x3a8>)
 8001150:	2200      	movs	r2, #0
 8001152:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
		ADF4355_ConvertFreq(150000000);
 8001156:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80011a0 <ADF4355_Setup+0x398>
 800115a:	f000 f855 	bl	8001208 <ADF4355_ConvertFreq>
		ADF4355_WriteData();
 800115e:	f000 fecf 	bl	8001f00 <ADF4355_WriteData>
		ADF4355_ConvertFreq(120000000);
 8001162:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80011a8 <ADF4355_Setup+0x3a0>
 8001166:	f000 f84f 	bl	8001208 <ADF4355_ConvertFreq>
		ADF4355_WriteData(FREQ_UPDATE);
 800116a:	20f0      	movs	r0, #240	; 0xf0
 800116c:	f000 fec8 	bl	8001f00 <ADF4355_WriteData>
		break;
 8001170:	e02b      	b.n	80011ca <ADF4355_Setup+0x3c2>
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	00000000 	.word	0x00000000
 800117c:	41386a00 	.word	0x41386a00
 8001180:	eb1c432d 	.word	0xeb1c432d
 8001184:	3f1a36e2 	.word	0x3f1a36e2
 8001188:	eb1c432d 	.word	0xeb1c432d
 800118c:	3f0a36e2 	.word	0x3f0a36e2
 8001190:	00000000 	.word	0x00000000
 8001194:	40f5f900 	.word	0x40f5f900
 8001198:	47ae147b 	.word	0x47ae147b
 800119c:	3f847ae1 	.word	0x3f847ae1
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41a1e1a3 	.word	0x41a1e1a3
 80011a8:	00000000 	.word	0x00000000
 80011ac:	419c9c38 	.word	0x419c9c38
 80011b0:	20000270 	.word	0x20000270
 80011b4:	00800025 	.word	0x00800025
 80011b8:	15596568 	.word	0x15596568
 80011bc:	3ff00000 	.word	0x3ff00000
 80011c0:	40100000 	.word	0x40100000
 80011c4:	0061200b 	.word	0x0061200b
		break;
 80011c8:	bf00      	nop
	}
	setup_complete = 0x01;
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <ADF4355_Setup+0x3d4>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
	return adf_config.ERROR;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <ADF4355_Setup+0x3d8>)
 80011d2:	7c5b      	ldrb	r3, [r3, #17]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	2000015c 	.word	0x2000015c
 80011e0:	20000270 	.word	0x20000270

080011e4 <ADF4355_SetFrequency>:

void ADF4355_FPGA_DUMP(int address) {//Dumps the FPGA-Registers and Memory at the specified FPGA Memory-Address

}

void ADF4355_SetFrequency(double frequency) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	ed87 0b00 	vstr	d0, [r7]
	ADF4355_ConvertFreq(frequency);
 80011ee:	ed97 0b00 	vldr	d0, [r7]
 80011f2:	f000 f809 	bl	8001208 <ADF4355_ConvertFreq>
	ADF4355_WriteData();
 80011f6:	f000 fe83 	bl	8001f00 <ADF4355_WriteData>
	// ADF4355_WriteDataLite(FREQ_UPDATE);
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	0000      	movs	r0, r0
 8001204:	0000      	movs	r0, r0
	...

08001208 <ADF4355_ConvertFreq>:

void ADF4355_GetConfig(int *responseBuffer) {

}

void ADF4355_ConvertFreq(double frequency) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0b00 	vstr	d0, [r7]
	// int F4_BandSel = 10.0 * B_BandSelClk / PFDFreq;
	adf_config.FREQUENCY = (double) frequency; // Desired Output-Frequency
 8001212:	4aa3      	ldr	r2, [pc, #652]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001214:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001218:	e9c2 3406 	strd	r3, r4, [r2, #24]

	// Calculate the RF-Divider
	if (adf_config.FREQUENCY >= 6800000000) { // Driver only considers the RFOUTA of ADF4355 / ADF5355. Frequencies higher than 6.8 GHz are not routed through the RF-Deck of the ARSG but can be taken from "J_rfb". Frequency at J_rfb = RFOUT * 2.
 800121c:	4ba0      	ldr	r3, [pc, #640]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800121e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001222:	a391      	add	r3, pc, #580	; (adr r3, 8001468 <ADF4355_ConvertFreq+0x260>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fc10 	bl	8000a4c <__aeabi_dcmpge>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01c      	beq.n	800126c <ADF4355_ConvertFreq+0x64>
		adf_config.FREQUENCY = adf_config.FREQUENCY / 2;
 8001232:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001234:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	f7ff faa8 	bl	8000794 <__aeabi_ddiv>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4a95      	ldr	r2, [pc, #596]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800124a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		adf_config.RFDIV = 0;
 800124e:	4b94      	ldr	r3, [pc, #592]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001250:	2200      	movs	r2, #0
 8001252:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 0;
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001256:	2200      	movs	r2, #0
 8001258:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		adf_config.R6_AUXRF_ENABLE = 1;	// Frequency above 6.8 GHz Selected - Assume that a ADF5355 is in the system and make sure the Doubled Output is ON
 800125c:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800125e:	2201      	movs	r2, #1
 8001260:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		adf_config.R6_AUXRF_PWR = 3;
 8001264:	4b8e      	ldr	r3, [pc, #568]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001266:	2203      	movs	r2, #3
 8001268:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}
	if (adf_config.FREQUENCY < 6800000000) {
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800126e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001272:	a37d      	add	r3, pc, #500	; (adr r3, 8001468 <ADF4355_ConvertFreq+0x260>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fbd4 	bl	8000a24 <__aeabi_dcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <ADF4355_ConvertFreq+0x88>
		adf_config.RFDIV = 0;
 8001282:	4b87      	ldr	r3, [pc, #540]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001284:	2200      	movs	r2, #0
 8001286:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 0;
 8001288:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800128a:	2200      	movs	r2, #0
 800128c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 3400000000) {
 8001290:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001292:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001296:	a376      	add	r3, pc, #472	; (adr r3, 8001470 <ADF4355_ConvertFreq+0x268>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fbc2 	bl	8000a24 <__aeabi_dcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <ADF4355_ConvertFreq+0xac>
		adf_config.RFDIV = 2;
 80012a6:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 1;
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 1700000000) {
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012ba:	a36f      	add	r3, pc, #444	; (adr r3, 8001478 <ADF4355_ConvertFreq+0x270>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fbb0 	bl	8000a24 <__aeabi_dcmplt>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <ADF4355_ConvertFreq+0xd0>
		adf_config.RFDIV = 4;
 80012ca:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 2;
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 850000000) {
 80012d8:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012de:	a368      	add	r3, pc, #416	; (adr r3, 8001480 <ADF4355_ConvertFreq+0x278>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fb9e 	bl	8000a24 <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <ADF4355_ConvertFreq+0xf4>
		adf_config.RFDIV = 8;
 80012ee:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012f0:	2208      	movs	r2, #8
 80012f2:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 3;
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 425000000) {
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80012fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001302:	a361      	add	r3, pc, #388	; (adr r3, 8001488 <ADF4355_ConvertFreq+0x280>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff fb8c 	bl	8000a24 <__aeabi_dcmplt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <ADF4355_ConvertFreq+0x118>
		adf_config.RFDIV = 16;
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001314:	2210      	movs	r2, #16
 8001316:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 4;
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800131a:	2204      	movs	r2, #4
 800131c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 212500000) {
 8001320:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001322:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001326:	a35a      	add	r3, pc, #360	; (adr r3, 8001490 <ADF4355_ConvertFreq+0x288>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff fb7a 	bl	8000a24 <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <ADF4355_ConvertFreq+0x13c>
		adf_config.RFDIV = 32;
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001338:	2220      	movs	r2, #32
 800133a:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 5;
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800133e:	2205      	movs	r2, #5
 8001340:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	if (adf_config.FREQUENCY < 106250000) {
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001346:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800134a:	a353      	add	r3, pc, #332	; (adr r3, 8001498 <ADF4355_ConvertFreq+0x290>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fb68 	bl	8000a24 <__aeabi_dcmplt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <ADF4355_ConvertFreq+0x160>
		adf_config.RFDIV = 64;
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	741a      	strb	r2, [r3, #16]
		adf_config.R6_RF_DIV_SEL = 6;
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001362:	2206      	movs	r2, #6
 8001364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	/////////////////////////////////////////////////////////////////////////////

//	double PFDFreq = adf_config.REFCLK
//			* ((1.0 + adf_config.R4_REFDOUBLE) / (adf_config.R4_RCOUNTER * (1.0 + adf_config.R4_REFDIV2))); //Phase detector frequency

	double N = ((adf_config.FREQUENCY) * adf_config.RFDIV) / adf_config.PFD; // Calculate N
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800136a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001370:	7c1b      	ldrb	r3, [r3, #16]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f87a 	bl	800046c <__aeabi_i2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7ff f8de 	bl	8000540 <__aeabi_dmul>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	4618      	mov	r0, r3
 800138a:	4621      	mov	r1, r4
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800138e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001392:	461a      	mov	r2, r3
 8001394:	4623      	mov	r3, r4
 8001396:	f7ff f9fd 	bl	8000794 <__aeabi_ddiv>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	adf_config.R0_N = N;  // Turn N into integer
 80013a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a6:	f7ff fb65 	bl	8000a74 <__aeabi_d2iz>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30

	double F_Frac1x = (N - adf_config.R0_N) * pow(2, 24); // Calculate Frac1 (N remainder * 2^24)
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f859 	bl	800046c <__aeabi_i2d>
 80013ba:	4603      	mov	r3, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	461a      	mov	r2, r3
 80013c0:	4623      	mov	r3, r4
 80013c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c6:	f7fe ff03 	bl	80001d0 <__aeabi_dsub>
 80013ca:	4603      	mov	r3, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	4618      	mov	r0, r3
 80013d0:	4621      	mov	r1, r4
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <ADF4355_ConvertFreq+0x29c>)
 80013d8:	f7ff f8b2 	bl	8000540 <__aeabi_dmul>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	adf_config.R1_FRAC1 = F_Frac1x;  // turn Frac1 into an integer
 80013e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e8:	f7ff fb44 	bl	8000a74 <__aeabi_d2iz>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38

	double F_Frac2x = ((F_Frac1x - adf_config.R1_FRAC1)) * pow(2, 14); // Claculate Frac2 (F_FracN remainder * 2^14)
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 80013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f838 	bl	800046c <__aeabi_i2d>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	461a      	mov	r2, r3
 8001402:	4623      	mov	r3, r4
 8001404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001408:	f7fe fee2 	bl	80001d0 <__aeabi_dsub>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4618      	mov	r0, r3
 8001412:	4621      	mov	r1, r4
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <ADF4355_ConvertFreq+0x2a0>)
 800141a:	f7ff f891 	bl	8000540 <__aeabi_dmul>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	e9c7 3402 	strd	r3, r4, [r7, #8]

	adf_config.R1_FRAC1 = F_Frac1x;  // turn Frac1 into integer
 8001426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800142a:	f7ff fb23 	bl	8000a74 <__aeabi_d2iz>
 800142e:	4602      	mov	r2, r0
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
	adf_config.R2_FRAC2_LSB = F_Frac2x;  // turn Frac2 into integer
 8001434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001438:	f7ff fb1c 	bl	8000a74 <__aeabi_d2iz>
 800143c:	4602      	mov	r2, r0
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c

	if (adf_config.R1_FRAC1 == 0) {	// Check if the Fractional Values are 0 and if so, configure Negative Bleed and Lock Detect Mode to Integer N-Mode.
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	2b00      	cmp	r3, #0
 8001448:	d130      	bne.n	80014ac <ADF4355_ConvertFreq+0x2a4>
		if (adf_config.R2_FRAC2_LSB == 0) {
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d134      	bne.n	80014bc <ADF4355_ConvertFreq+0x2b4>
			adf_config.R6_NEGATIVE_BLEED = 0;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 8001454:	2200      	movs	r2, #0
 8001456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			adf_config.R7_LDM = 1;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <ADF4355_ConvertFreq+0x298>)
 800145c:	2201      	movs	r2, #1
 800145e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001462:	e02b      	b.n	80014bc <ADF4355_ConvertFreq+0x2b4>
 8001464:	f3af 8000 	nop.w
 8001468:	40000000 	.word	0x40000000
 800146c:	41f954fc 	.word	0x41f954fc
 8001470:	40000000 	.word	0x40000000
 8001474:	41e954fc 	.word	0x41e954fc
 8001478:	40000000 	.word	0x40000000
 800147c:	41d954fc 	.word	0x41d954fc
 8001480:	40000000 	.word	0x40000000
 8001484:	41c954fc 	.word	0x41c954fc
 8001488:	40000000 	.word	0x40000000
 800148c:	41b954fc 	.word	0x41b954fc
 8001490:	40000000 	.word	0x40000000
 8001494:	41a954fc 	.word	0x41a954fc
 8001498:	40000000 	.word	0x40000000
 800149c:	419954fc 	.word	0x419954fc
 80014a0:	20000270 	.word	0x20000270
 80014a4:	41700000 	.word	0x41700000
 80014a8:	40d00000 	.word	0x40d00000
		}
	} else {
		adf_config.R6_NEGATIVE_BLEED = 1;
 80014ac:	4bdc      	ldr	r3, [pc, #880]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		adf_config.R7_LDM = 0;
 80014b4:	4bda      	ldr	r3, [pc, #872]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

	////////////////// Set 32 bit register values R0 to R12 ///////////////////////////

	adf_config.REG0 = (int) (0 + adf_config.R0_N * pow(2, 4)
 80014bc:	4bd8      	ldr	r3, [pc, #864]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffd3 	bl	800046c <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4bd6      	ldr	r3, [pc, #856]	; (8001824 <ADF4355_ConvertFreq+0x61c>)
 80014cc:	f7ff f838 	bl	8000540 <__aeabi_dmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4618      	mov	r0, r3
 80014d6:	4621      	mov	r1, r4
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	f7fe fe78 	bl	80001d4 <__adddf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4625      	mov	r5, r4
 80014ea:	461c      	mov	r4, r3
			+ adf_config.R0_PRESCAL * pow(2, 20)
 80014ec:	4bcc      	ldr	r3, [pc, #816]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ffbb 	bl	800046c <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4bcb      	ldr	r3, [pc, #812]	; (8001828 <ADF4355_ConvertFreq+0x620>)
 80014fc:	f7ff f820 	bl	8000540 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7fe fe64 	bl	80001d4 <__adddf3>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4625      	mov	r5, r4
 8001512:	461c      	mov	r4, r3
			+ adf_config.R0_AUTOCAL * pow(2, 21));	// Calculate R0
 8001514:	4bc2      	ldr	r3, [pc, #776]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffa7 	bl	800046c <__aeabi_i2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4bc2      	ldr	r3, [pc, #776]	; (800182c <ADF4355_ConvertFreq+0x624>)
 8001524:	f7ff f80c 	bl	8000540 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe fe50 	bl	80001d4 <__adddf3>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
	adf_config.REG0 = (int) (0 + adf_config.R0_N * pow(2, 4)
 8001538:	4618      	mov	r0, r3
 800153a:	4621      	mov	r1, r4
 800153c:	f7ff fa9a 	bl	8000a74 <__aeabi_d2iz>
 8001540:	4602      	mov	r2, r0
 8001542:	4bb7      	ldr	r3, [pc, #732]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001544:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	adf_config.REG1 = (int) (1 + adf_config.R1_FRAC1 * pow(2, 4));// Calculate R1
 8001548:	4bb5      	ldr	r3, [pc, #724]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff8d 	bl	800046c <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4bb3      	ldr	r3, [pc, #716]	; (8001824 <ADF4355_ConvertFreq+0x61c>)
 8001558:	f7fe fff2 	bl	8000540 <__aeabi_dmul>
 800155c:	4603      	mov	r3, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4618      	mov	r0, r3
 8001562:	4621      	mov	r1, r4
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4bb1      	ldr	r3, [pc, #708]	; (8001830 <ADF4355_ConvertFreq+0x628>)
 800156a:	f7fe fe33 	bl	80001d4 <__adddf3>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	4618      	mov	r0, r3
 8001574:	4621      	mov	r1, r4
 8001576:	f7ff fa7d 	bl	8000a74 <__aeabi_d2iz>
 800157a:	4602      	mov	r2, r0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800157e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	adf_config.REG2 = (int) (2 + adf_config.R2_MOD2_LSB * pow(2, 4)
 8001582:	4ba7      	ldr	r3, [pc, #668]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff70 	bl	800046c <__aeabi_i2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4ba4      	ldr	r3, [pc, #656]	; (8001824 <ADF4355_ConvertFreq+0x61c>)
 8001592:	f7fe ffd5 	bl	8000540 <__aeabi_dmul>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4618      	mov	r0, r3
 800159c:	4621      	mov	r1, r4
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	f7fe fe15 	bl	80001d4 <__adddf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4625      	mov	r5, r4
 80015b0:	461c      	mov	r4, r3
			+ adf_config.R2_FRAC2_LSB * pow(2, 18)); //
 80015b2:	4b9b      	ldr	r3, [pc, #620]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff58 	bl	800046c <__aeabi_i2d>
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b9c      	ldr	r3, [pc, #624]	; (8001834 <ADF4355_ConvertFreq+0x62c>)
 80015c2:	f7fe ffbd 	bl	8000540 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe01 	bl	80001d4 <__adddf3>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
	adf_config.REG2 = (int) (2 + adf_config.R2_MOD2_LSB * pow(2, 4)
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff fa4b 	bl	8000a74 <__aeabi_d2iz>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80015e2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	adf_config.REG3 = (int) (3 + adf_config.R3_PHASE_VALUE * pow(2, 4)
 80015e6:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80015e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff3e 	bl	800046c <__aeabi_i2d>
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <ADF4355_ConvertFreq+0x61c>)
 80015f6:	f7fe ffa3 	bl	8000540 <__aeabi_dmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <ADF4355_ConvertFreq+0x630>)
 8001608:	f7fe fde4 	bl	80001d4 <__adddf3>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4625      	mov	r5, r4
 8001612:	461c      	mov	r4, r3
			+ adf_config.R3_PHASE_ADJUST * pow(2, 28)
 8001614:	4b82      	ldr	r3, [pc, #520]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff27 	bl	800046c <__aeabi_i2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <ADF4355_ConvertFreq+0x634>)
 8001624:	f7fe ff8c 	bl	8000540 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7fe fdd0 	bl	80001d4 <__adddf3>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4625      	mov	r5, r4
 800163a:	461c      	mov	r4, r3
			+ adf_config.R3_PHASE_RESYNC * pow(2, 29)
 800163c:	4b78      	ldr	r3, [pc, #480]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff13 	bl	800046c <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <ADF4355_ConvertFreq+0x638>)
 800164c:	f7fe ff78 	bl	8000540 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fdbc 	bl	80001d4 <__adddf3>
 800165c:	4603      	mov	r3, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4625      	mov	r5, r4
 8001662:	461c      	mov	r4, r3
			+ adf_config.R3_SD_LOAD_RESET * pow(2, 30)); // TODO: CHECK Phase-Register Calculation
 8001664:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe feff 	bl	800046c <__aeabi_i2d>
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <ADF4355_ConvertFreq+0x63c>)
 8001674:	f7fe ff64 	bl	8000540 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fda8 	bl	80001d4 <__adddf3>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
	adf_config.REG3 = (int) (3 + adf_config.R3_PHASE_VALUE * pow(2, 4)
 8001688:	4618      	mov	r0, r3
 800168a:	4621      	mov	r1, r4
 800168c:	f7ff f9f2 	bl	8000a74 <__aeabi_d2iz>
 8001690:	4602      	mov	r2, r0
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001694:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	adf_config.REG4 = (int) (4 + adf_config.R4_COUNTRES * pow(2, 4)
 8001698:	4b61      	ldr	r3, [pc, #388]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fee4 	bl	800046c <__aeabi_i2d>
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <ADF4355_ConvertFreq+0x61c>)
 80016aa:	f7fe ff49 	bl	8000540 <__aeabi_dmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <ADF4355_ConvertFreq+0x640>)
 80016bc:	f7fe fd8a 	bl	80001d4 <__adddf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4625      	mov	r5, r4
 80016c6:	461c      	mov	r4, r3
			+ adf_config.R4_CP3STATE * pow(2, 5)
 80016c8:	4b55      	ldr	r3, [pc, #340]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80016ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fecd 	bl	800046c <__aeabi_i2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <ADF4355_ConvertFreq+0x644>)
 80016d8:	f7fe ff32 	bl	8000540 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fd76 	bl	80001d4 <__adddf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	4625      	mov	r5, r4
 80016ee:	461c      	mov	r4, r3
			+ adf_config.R4_PWRDN * pow(2, 6) + adf_config.R4_PDPOLA * pow(2, 7)
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80016f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe feb9 	bl	800046c <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <ADF4355_ConvertFreq+0x648>)
 8001700:	f7fe ff1e 	bl	8000540 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe fd62 	bl	80001d4 <__adddf3>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4625      	mov	r5, r4
 8001716:	461c      	mov	r4, r3
 8001718:	4b41      	ldr	r3, [pc, #260]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fea5 	bl	800046c <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <ADF4355_ConvertFreq+0x64c>)
 8001728:	f7fe ff0a 	bl	8000540 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fd4e 	bl	80001d4 <__adddf3>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4625      	mov	r5, r4
 800173e:	461c      	mov	r4, r3
			+ adf_config.R4_MUXLOG * pow(2, 8)
 8001740:	4b37      	ldr	r3, [pc, #220]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe91 	bl	800046c <__aeabi_i2d>
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <ADF4355_ConvertFreq+0x650>)
 8001750:	f7fe fef6 	bl	8000540 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd3a 	bl	80001d4 <__adddf3>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	4625      	mov	r5, r4
 8001766:	461c      	mov	r4, r3
			+ adf_config.R4_REFMODE * pow(2, 9)
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800176a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fe7d 	bl	800046c <__aeabi_i2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800177a:	f7fe fee1 	bl	8000540 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd25 	bl	80001d4 <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4625      	mov	r5, r4
 8001790:	461c      	mov	r4, r3
			+ adf_config.R4_CHGPUMP * pow(2, 10)
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 8001794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe68 	bl	800046c <__aeabi_i2d>
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <ADF4355_ConvertFreq+0x654>)
 80017a2:	f7fe fecd 	bl	8000540 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fd11 	bl	80001d4 <__adddf3>
 80017b2:	4603      	mov	r3, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	4625      	mov	r5, r4
 80017b8:	461c      	mov	r4, r3
			+ adf_config.R4_DOUBLEBUF * pow(2, 14)
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80017bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe54 	bl	800046c <__aeabi_i2d>
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <ADF4355_ConvertFreq+0x658>)
 80017ca:	f7fe feb9 	bl	8000540 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe fcfd 	bl	80001d4 <__adddf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	4625      	mov	r5, r4
 80017e0:	461c      	mov	r4, r3
			+ adf_config.R4_RCOUNTER * pow(2, 15)
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe40 	bl	800046c <__aeabi_i2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <ADF4355_ConvertFreq+0x65c>)
 80017f2:	f7fe fea5 	bl	8000540 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fce9 	bl	80001d4 <__adddf3>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4625      	mov	r5, r4
 8001808:	461c      	mov	r4, r3
			+ adf_config.R4_REFDIV2 * pow(2, 25)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <ADF4355_ConvertFreq+0x618>)
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe2c 	bl	800046c <__aeabi_i2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800181c:	e024      	b.n	8001868 <ADF4355_ConvertFreq+0x660>
 800181e:	bf00      	nop
 8001820:	20000270 	.word	0x20000270
 8001824:	40300000 	.word	0x40300000
 8001828:	41300000 	.word	0x41300000
 800182c:	41400000 	.word	0x41400000
 8001830:	3ff00000 	.word	0x3ff00000
 8001834:	41100000 	.word	0x41100000
 8001838:	40080000 	.word	0x40080000
 800183c:	41b00000 	.word	0x41b00000
 8001840:	41c00000 	.word	0x41c00000
 8001844:	41d00000 	.word	0x41d00000
 8001848:	40100000 	.word	0x40100000
 800184c:	40400000 	.word	0x40400000
 8001850:	40500000 	.word	0x40500000
 8001854:	40600000 	.word	0x40600000
 8001858:	40700000 	.word	0x40700000
 800185c:	40900000 	.word	0x40900000
 8001860:	40d00000 	.word	0x40d00000
 8001864:	40e00000 	.word	0x40e00000
 8001868:	f7fe fe6a 	bl	8000540 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fcae 	bl	80001d4 <__adddf3>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4625      	mov	r5, r4
 800187e:	461c      	mov	r4, r3
			+ adf_config.R4_REFDOUBLE * pow(2, 26)
 8001880:	4be7      	ldr	r3, [pc, #924]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdf1 	bl	800046c <__aeabi_i2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4be5      	ldr	r3, [pc, #916]	; (8001c24 <ADF4355_ConvertFreq+0xa1c>)
 8001890:	f7fe fe56 	bl	8000540 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fc9a 	bl	80001d4 <__adddf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	4625      	mov	r5, r4
 80018a6:	461c      	mov	r4, r3
			+ adf_config.R4_MUXOUT * pow(2, 27));
 80018a8:	4bdd      	ldr	r3, [pc, #884]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fddd 	bl	800046c <__aeabi_i2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4bdc      	ldr	r3, [pc, #880]	; (8001c28 <ADF4355_ConvertFreq+0xa20>)
 80018b8:	f7fe fe42 	bl	8000540 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fc86 	bl	80001d4 <__adddf3>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
	adf_config.REG4 = (int) (4 + adf_config.R4_COUNTRES * pow(2, 4)
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	f7ff f8d0 	bl	8000a74 <__aeabi_d2iz>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4bd2      	ldr	r3, [pc, #840]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 80018d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	adf_config.REG6 = (int) (6 + adf_config.R6_RFOUT_PWR * pow(2, 4)
 80018dc:	4bd0      	ldr	r3, [pc, #832]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 80018de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fdc2 	bl	800046c <__aeabi_i2d>
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4bcf      	ldr	r3, [pc, #828]	; (8001c2c <ADF4355_ConvertFreq+0xa24>)
 80018ee:	f7fe fe27 	bl	8000540 <__aeabi_dmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4bcc      	ldr	r3, [pc, #816]	; (8001c30 <ADF4355_ConvertFreq+0xa28>)
 8001900:	f7fe fc68 	bl	80001d4 <__adddf3>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	4625      	mov	r5, r4
 800190a:	461c      	mov	r4, r3
			+ adf_config.R6_RFOUT_ENABLE * pow(2, 6)
 800190c:	4bc4      	ldr	r3, [pc, #784]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 800190e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fdaa 	bl	800046c <__aeabi_i2d>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4bc5      	ldr	r3, [pc, #788]	; (8001c34 <ADF4355_ConvertFreq+0xa2c>)
 800191e:	f7fe fe0f 	bl	8000540 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fc53 	bl	80001d4 <__adddf3>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4625      	mov	r5, r4
 8001934:	461c      	mov	r4, r3
			+ adf_config.R6_AUXRF_PWR * pow(2, 7)
 8001936:	4bba      	ldr	r3, [pc, #744]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001938:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fd95 	bl	800046c <__aeabi_i2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4bbc      	ldr	r3, [pc, #752]	; (8001c38 <ADF4355_ConvertFreq+0xa30>)
 8001948:	f7fe fdfa 	bl	8000540 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fc3e 	bl	80001d4 <__adddf3>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4625      	mov	r5, r4
 800195e:	461c      	mov	r4, r3
			+ adf_config.R6_AUXRF_ENABLE * pow(2, 9) + 0 * pow(2, 10)
 8001960:	4baf      	ldr	r3, [pc, #700]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd80 	bl	800046c <__aeabi_i2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001974:	f7fe fde4 	bl	8000540 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc28 	bl	80001d4 <__adddf3>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4618      	mov	r0, r3
 800198a:	4621      	mov	r1, r4
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	f7fe fc1e 	bl	80001d4 <__adddf3>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4625      	mov	r5, r4
 800199e:	461c      	mov	r4, r3
			+ adf_config.R6_MUTE_TILL_LOCK * pow(2, 11) + 0 * pow(2, 12)
 80019a0:	4b9f      	ldr	r3, [pc, #636]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 80019a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd60 	bl	800046c <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4ba2      	ldr	r3, [pc, #648]	; (8001c3c <ADF4355_ConvertFreq+0xa34>)
 80019b2:	f7fe fdc5 	bl	8000540 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc09 	bl	80001d4 <__adddf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	f7fe fbff 	bl	80001d4 <__adddf3>
 80019d6:	4603      	mov	r3, r0
 80019d8:	460c      	mov	r4, r1
 80019da:	4625      	mov	r5, r4
 80019dc:	461c      	mov	r4, r3
			+ adf_config.R6_BLEED_CURRENT * pow(2, 13)
 80019de:	4b90      	ldr	r3, [pc, #576]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 80019e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd41 	bl	800046c <__aeabi_i2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <ADF4355_ConvertFreq+0xa38>)
 80019f0:	f7fe fda6 	bl	8000540 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fbea 	bl	80001d4 <__adddf3>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4625      	mov	r5, r4
 8001a06:	461c      	mov	r4, r3
			+ adf_config.R6_RF_DIV_SEL * pow(2, 21)
 8001a08:	4b85      	ldr	r3, [pc, #532]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd2c 	bl	800046c <__aeabi_i2d>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <ADF4355_ConvertFreq+0xa3c>)
 8001a1a:	f7fe fd91 	bl	8000540 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fbd5 	bl	80001d4 <__adddf3>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4625      	mov	r5, r4
 8001a30:	461c      	mov	r4, r3
			+ adf_config.R6_FEEDBACK_SELECT * pow(2, 24) + adf_config.R6_RFOUTB_SELECT * pow(2,25) + 1 * pow(2, 26) +  1 * pow(2, 28)
 8001a32:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd17 	bl	800046c <__aeabi_i2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <ADF4355_ConvertFreq+0xa40>)
 8001a44:	f7fe fd7c 	bl	8000540 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fbc0 	bl	80001d4 <__adddf3>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	4625      	mov	r5, r4
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd02 	bl	800046c <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a70:	f7fe fd66 	bl	8000540 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fbaa 	bl	80001d4 <__adddf3>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4618      	mov	r0, r3
 8001a86:	4621      	mov	r1, r4
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <ADF4355_ConvertFreq+0xa1c>)
 8001a8e:	f7fe fba1 	bl	80001d4 <__adddf3>
 8001a92:	4603      	mov	r3, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	4618      	mov	r0, r3
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <ADF4355_ConvertFreq+0xa44>)
 8001aa0:	f7fe fb98 	bl	80001d4 <__adddf3>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4625      	mov	r5, r4
 8001aaa:	461c      	mov	r4, r3
			+ adf_config.R6_NEGATIVE_BLEED * pow(2, 29)
 8001aac:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcda 	bl	800046c <__aeabi_i2d>
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <ADF4355_ConvertFreq+0xa48>)
 8001abe:	f7fe fd3f 	bl	8000540 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fb83 	bl	80001d4 <__adddf3>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	4625      	mov	r5, r4
 8001ad4:	461c      	mov	r4, r3
			+ adf_config.R6_GATED_BLEED * pow(2, 30) + adf_config.R6_BLEED_POLARITY * pow(2,31));
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fcc5 	bl	800046c <__aeabi_i2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <ADF4355_ConvertFreq+0xa4c>)
 8001ae8:	f7fe fd2a 	bl	8000540 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fb6e 	bl	80001d4 <__adddf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4625      	mov	r5, r4
 8001afe:	461c      	mov	r4, r3
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fcb0 	bl	800046c <__aeabi_i2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <ADF4355_ConvertFreq+0xa50>)
 8001b12:	f7fe fd15 	bl	8000540 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb59 	bl	80001d4 <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
	adf_config.REG6 = (int) (6 + adf_config.R6_RFOUT_PWR * pow(2, 4)
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7fe ffa3 	bl	8000a74 <__aeabi_d2iz>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001b32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// adf_config.REG7 =  0x120000E7;
	adf_config.REG7 = (int) (7 + adf_config.R7_LDM * pow(2, 4)
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001b38:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc95 	bl	800046c <__aeabi_i2d>
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <ADF4355_ConvertFreq+0xa24>)
 8001b48:	f7fe fcfa 	bl	8000540 <__aeabi_dmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4618      	mov	r0, r3
 8001b52:	4621      	mov	r1, r4
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <ADF4355_ConvertFreq+0xa54>)
 8001b5a:	f7fe fb3b 	bl	80001d4 <__adddf3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	4625      	mov	r5, r4
 8001b64:	461c      	mov	r4, r3
			+ adf_config.R7_LDP * pow(2, 5) + adf_config.R7_LOL_MODE * pow(2, 7)
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001b68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc7d 	bl	800046c <__aeabi_i2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <ADF4355_ConvertFreq+0xa58>)
 8001b78:	f7fe fce2 	bl	8000540 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4620      	mov	r0, r4
 8001b82:	4629      	mov	r1, r5
 8001b84:	f7fe fb26 	bl	80001d4 <__adddf3>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4625      	mov	r5, r4
 8001b8e:	461c      	mov	r4, r3
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001b92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc68 	bl	800046c <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <ADF4355_ConvertFreq+0xa30>)
 8001ba2:	f7fe fccd 	bl	8000540 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb11 	bl	80001d4 <__adddf3>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	4625      	mov	r5, r4
 8001bb8:	461c      	mov	r4, r3
			+ adf_config.R7_LDC * pow(2, 8) + adf_config.R7_LE_SYNC * pow(2, 25) + 1 * pow(2,26)
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001bbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc53 	bl	800046c <__aeabi_i2d>
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <ADF4355_ConvertFreq+0xa5c>)
 8001bcc:	f7fe fcb8 	bl	8000540 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fafc 	bl	80001d4 <__adddf3>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	4625      	mov	r5, r4
 8001be2:	461c      	mov	r4, r3
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <ADF4355_ConvertFreq+0xa18>)
 8001be6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc3e 	bl	800046c <__aeabi_i2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001bf8:	f7fe fca2 	bl	8000540 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fae6 	bl	80001d4 <__adddf3>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <ADF4355_ConvertFreq+0xa1c>)
 8001c16:	f7fe fadd 	bl	80001d4 <__adddf3>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e024      	b.n	8001c68 <ADF4355_ConvertFreq+0xa60>
 8001c1e:	bf00      	nop
 8001c20:	20000270 	.word	0x20000270
 8001c24:	41900000 	.word	0x41900000
 8001c28:	41a00000 	.word	0x41a00000
 8001c2c:	40300000 	.word	0x40300000
 8001c30:	40180000 	.word	0x40180000
 8001c34:	40500000 	.word	0x40500000
 8001c38:	40600000 	.word	0x40600000
 8001c3c:	40a00000 	.word	0x40a00000
 8001c40:	40c00000 	.word	0x40c00000
 8001c44:	41400000 	.word	0x41400000
 8001c48:	41700000 	.word	0x41700000
 8001c4c:	41b00000 	.word	0x41b00000
 8001c50:	41c00000 	.word	0x41c00000
 8001c54:	41d00000 	.word	0x41d00000
 8001c58:	41e00000 	.word	0x41e00000
 8001c5c:	401c0000 	.word	0x401c0000
 8001c60:	40400000 	.word	0x40400000
 8001c64:	40700000 	.word	0x40700000
 8001c68:	460c      	mov	r4, r1
 8001c6a:	4625      	mov	r5, r4
 8001c6c:	461c      	mov	r4, r3
			+ adf_config.R7_LE_SYNC_EDGE * pow(2, 27));
 8001c6e:	4b96      	ldr	r3, [pc, #600]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fbf9 	bl	800046c <__aeabi_i2d>
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <ADF4355_ConvertFreq+0xcc4>)
 8001c80:	f7fe fc5e 	bl	8000540 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe faa2 	bl	80001d4 <__adddf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
	adf_config.REG7 = (int) (7 + adf_config.R7_LDM * pow(2, 4)
 8001c94:	4618      	mov	r0, r3
 8001c96:	4621      	mov	r1, r4
 8001c98:	f7fe feec 	bl	8000a74 <__aeabi_d2iz>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001ca0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	// REGISTER 8 IS RESERVED AND NEEDS TO BE SET TO 0x102D0428

	// adf_config.REG9 = 0x2A29FCC9;
	adf_config.REG9 = (int) (9 + adf_config.R9_SYNTH_LOCK_TIMEOUT * pow(2, 4)
 8001ca4:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbde 	bl	800046c <__aeabi_i2d>
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b86      	ldr	r3, [pc, #536]	; (8001ed0 <ADF4355_ConvertFreq+0xcc8>)
 8001cb6:	f7fe fc43 	bl	8000540 <__aeabi_dmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <ADF4355_ConvertFreq+0xccc>)
 8001cc8:	f7fe fa84 	bl	80001d4 <__adddf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	4625      	mov	r5, r4
 8001cd2:	461c      	mov	r4, r3
			+ adf_config.R9_AUTOLVL_CAL_TIMEOUT * pow(2, 9)
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001cd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbc6 	bl	800046c <__aeabi_i2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001ce8:	f7fe fc2a 	bl	8000540 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fa6e 	bl	80001d4 <__adddf3>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	4625      	mov	r5, r4
 8001cfe:	461c      	mov	r4, r3
			+ adf_config.R9_TIMEOUT * pow(2, 14)
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001d02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fbb0 	bl	800046c <__aeabi_i2d>
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <ADF4355_ConvertFreq+0xcd0>)
 8001d12:	f7fe fc15 	bl	8000540 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fa59 	bl	80001d4 <__adddf3>
 8001d22:	4603      	mov	r3, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	4625      	mov	r5, r4
 8001d28:	461c      	mov	r4, r3
			+ adf_config.R9_VCO_BAND_DIV * pow(2, 24));
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001d2c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fb9b 	bl	800046c <__aeabi_i2d>
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b68      	ldr	r3, [pc, #416]	; (8001edc <ADF4355_ConvertFreq+0xcd4>)
 8001d3c:	f7fe fc00 	bl	8000540 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fa44 	bl	80001d4 <__adddf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
	adf_config.REG9 = (int) (9 + adf_config.R9_SYNTH_LOCK_TIMEOUT * pow(2, 4)
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	f7fe fe8e 	bl	8000a74 <__aeabi_d2iz>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001d5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//adf_config.REG10 = 0x00C0043A;
	adf_config.REG10 = (int) (10 + adf_config.R10_ADC_ENABLE * pow(2, 4)
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb80 	bl	800046c <__aeabi_i2d>
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <ADF4355_ConvertFreq+0xcc8>)
 8001d72:	f7fe fbe5 	bl	8000540 <__aeabi_dmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <ADF4355_ConvertFreq+0xcd8>)
 8001d84:	f7fe fa26 	bl	80001d4 <__adddf3>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4625      	mov	r5, r4
 8001d8e:	461c      	mov	r4, r3
			+ adf_config.R10_ADC_CONV * pow(2, 5)
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb68 	bl	800046c <__aeabi_i2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <ADF4355_ConvertFreq+0xcdc>)
 8001da2:	f7fe fbcd 	bl	8000540 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fa11 	bl	80001d4 <__adddf3>
 8001db2:	4603      	mov	r3, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	4625      	mov	r5, r4
 8001db8:	461c      	mov	r4, r3
			+ adf_config.R10_ADC_CLK_DIV * pow(2, 6) + 1 * pow(2, 22)
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001dbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb53 	bl	800046c <__aeabi_i2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <ADF4355_ConvertFreq+0xce0>)
 8001dcc:	f7fe fbb8 	bl	8000540 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f7fe f9fc 	bl	80001d4 <__adddf3>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4618      	mov	r0, r3
 8001de2:	4621      	mov	r1, r4
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b40      	ldr	r3, [pc, #256]	; (8001eec <ADF4355_ConvertFreq+0xce4>)
 8001dea:	f7fe f9f3 	bl	80001d4 <__adddf3>
 8001dee:	4603      	mov	r3, r0
 8001df0:	460c      	mov	r4, r1
 8001df2:	4618      	mov	r0, r3
 8001df4:	4621      	mov	r1, r4
			+ 1 * pow(2, 23));
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <ADF4355_ConvertFreq+0xce8>)
 8001dfc:	f7fe f9ea 	bl	80001d4 <__adddf3>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
	adf_config.REG10 = (int) (10 + adf_config.R10_ADC_ENABLE * pow(2, 4)
 8001e04:	4618      	mov	r0, r3
 8001e06:	4621      	mov	r1, r4
 8001e08:	f7fe fe34 	bl	8000a74 <__aeabi_d2iz>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001e10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	// REGISTER 11 IS RESERVED AND NEEDS TO BE SET TO 0x0061300B in case of a ADF4355 and 0x61200B in case of a ADF4356

	// adf_config.REG12 = 0x0001041C;
	adf_config.REG12 = (int) (12 + 0x5F * pow(2, 4)
			+ adf_config.R12_PHASE_RESYNC_CLK_DIV * pow(2, 12));
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb26 	bl	800046c <__aeabi_i2d>
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <ADF4355_ConvertFreq+0xcec>)
 8001e26:	f7fe fb8b 	bl	8000540 <__aeabi_dmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4621      	mov	r1, r4
 8001e32:	a323      	add	r3, pc, #140	; (adr r3, 8001ec0 <ADF4355_ConvertFreq+0xcb8>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe f9cc 	bl	80001d4 <__adddf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
	adf_config.REG12 = (int) (12 + 0x5F * pow(2, 4)
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f7fe fe16 	bl	8000a74 <__aeabi_d2iz>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001e4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	adf_config.REG13 = (int) (13 + adf_config.R13_MOD2_MSB * pow(2,4) + adf_config.R13_FRAC2_MSB * pow(2,18));
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001e52:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb08 	bl	800046c <__aeabi_i2d>
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <ADF4355_ConvertFreq+0xcc8>)
 8001e62:	f7fe fb6d 	bl	8000540 <__aeabi_dmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	460c      	mov	r4, r1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <ADF4355_ConvertFreq+0xcf0>)
 8001e74:	f7fe f9ae 	bl	80001d4 <__adddf3>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4625      	mov	r5, r4
 8001e7e:	461c      	mov	r4, r3
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001e82:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe faf0 	bl	800046c <__aeabi_i2d>
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <ADF4355_ConvertFreq+0xcf4>)
 8001e92:	f7fe fb55 	bl	8000540 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe f999 	bl	80001d4 <__adddf3>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7fe fde3 	bl	8000a74 <__aeabi_d2iz>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <ADF4355_ConvertFreq+0xcc0>)
 8001eb2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	4097f000 	.word	0x4097f000
 8001ec8:	20000270 	.word	0x20000270
 8001ecc:	41a00000 	.word	0x41a00000
 8001ed0:	40300000 	.word	0x40300000
 8001ed4:	40220000 	.word	0x40220000
 8001ed8:	40d00000 	.word	0x40d00000
 8001edc:	41700000 	.word	0x41700000
 8001ee0:	40240000 	.word	0x40240000
 8001ee4:	40400000 	.word	0x40400000
 8001ee8:	40500000 	.word	0x40500000
 8001eec:	41500000 	.word	0x41500000
 8001ef0:	41600000 	.word	0x41600000
 8001ef4:	40b00000 	.word	0x40b00000
 8001ef8:	402a0000 	.word	0x402a0000
 8001efc:	41100000 	.word	0x41100000

08001f00 <ADF4355_WriteData>:

void ADF4355_WriteData() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADF4355_CS_GPIO_Port, ADF4355_CS_Pin, GPIO_PIN_RESET); // SELECT THE CHIP / PRIME THE INPUT-REGISTER
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0a:	4831      	ldr	r0, [pc, #196]	; (8001fd0 <ADF4355_WriteData+0xd0>)
 8001f0c:	f002 fa58 	bl	80043c0 <HAL_GPIO_WritePin>
	ADF4355_WriteRegister(adf_config.REG13);
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f12:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f85e 	bl	8001fd8 <ADF4355_WriteRegister>
	ADF4355_WriteRegister(adf_config.REG12);
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f858 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG11);
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f852 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG10);
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f36:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f84c 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG9);
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f846 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG8);
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f4e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f840 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG7);
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f83a 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG6);
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f834 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG5);
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f82e 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG4);
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f828 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG3);
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f822 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG2);
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001f96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f81c 	bl	8001fd8 <ADF4355_WriteRegister>
	//HAL_Delay(1);
	ADF4355_WriteRegister(adf_config.REG1);
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f816 	bl	8001fd8 <ADF4355_WriteRegister>
	// TODO: Calculate the Wait-Time: 16/ADF4355_ADC-CLK
	HAL_Delay(1);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f001 f9d3 	bl	8003358 <HAL_Delay>
	ADF4355_WriteRegister(adf_config.REG0);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <ADF4355_WriteData+0xd4>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f80d 	bl	8001fd8 <ADF4355_WriteRegister>
	HAL_GPIO_WritePin(ADF4355_CS_GPIO_Port, ADF4355_CS_Pin, GPIO_PIN_SET); // SELECT THE CHIP / PRIME THE INPUT-REGISTER
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <ADF4355_WriteData+0xd0>)
 8001fc6:	f002 f9fb 	bl	80043c0 <HAL_GPIO_WritePin>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	20000270 	.word	0x20000270

08001fd8 <ADF4355_WriteRegister>:
		ADF4355_WriteRegister(adf_config.REG6);
		break;
	}
}

void ADF4355_WriteRegister(int adfreg) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	for (int i = 0; i < 4; i++) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e00f      	b.n	8002006 <ADF4355_WriteRegister+0x2e>
		buf[3 - i] = (uint8_t) (adfreg >> (i * 8));	// Split the value into 4 Bytes
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	411a      	asrs	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1c3 0303 	rsb	r3, r3, #3
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f107 0110 	add.w	r1, r7, #16
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (int i = 0; i < 4; i++) {
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b03      	cmp	r3, #3
 800200a:	ddec      	ble.n	8001fe6 <ADF4355_WriteRegister+0xe>
	}
	HAL_GPIO_WritePin(ADF4355_LE_GPIO_Port, ADF4355_LE_Pin, GPIO_PIN_RESET);// SELECT THE CHIP / PRIME THE INPUT-REGISTER
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002012:	480a      	ldr	r0, [pc, #40]	; (800203c <ADF4355_WriteRegister+0x64>)
 8002014:	f002 f9d4 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, buf, 4, 800);// Send the Data to the Chip via SPI2
 8002018:	f107 0108 	add.w	r1, r7, #8
 800201c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002020:	2204      	movs	r2, #4
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <ADF4355_WriteRegister+0x68>)
 8002024:	f004 f9cf 	bl	80063c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADF4355_LE_GPIO_Port, ADF4355_LE_Pin, GPIO_PIN_SET);// DESELECT THE CHIP AND LOAD THE INPUT-REGISTER INTO THE INTERNAL REGISTER SPECIFIED BY THE 4 LSB
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800202e:	4803      	ldr	r0, [pc, #12]	; (800203c <ADF4355_WriteRegister+0x64>)
 8002030:	f002 f9c6 	bl	80043c0 <HAL_GPIO_WritePin>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	20000398 	.word	0x20000398
 8002044:	00000000 	.word	0x00000000

08002048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800204c:	f001 f912 	bl	8003274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002050:	f000 f890 	bl	8002174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002054:	f000 fb52 	bl	80026fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002058:	f000 faf2 	bl	8002640 <MX_DMA_Init>
  MX_CRC_Init();
 800205c:	f000 f968 	bl	8002330 <MX_CRC_Init>
  MX_I2C1_Init();
 8002060:	f000 f97a 	bl	8002358 <MX_I2C1_Init>
  MX_RNG_Init();
 8002064:	f000 f9a6 	bl	80023b4 <MX_RNG_Init>
  MX_SPI1_Init();
 8002068:	f000 f9b8 	bl	80023dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800206c:	f000 fabe 	bl	80025ec <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002070:	f009 f8a6 	bl	800b1c0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8002074:	f000 f9ea 	bl	800244c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002078:	f000 fa1e 	bl	80024b8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800207c:	f000 f8ea 	bl	8002254 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(AD9957_CS_GPIO_Port, AD9957_CS_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002086:	4838      	ldr	r0, [pc, #224]	; (8002168 <main+0x120>)
 8002088:	f002 f99a 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002092:	4836      	ldr	r0, [pc, #216]	; (800216c <main+0x124>)
 8002094:	f002 f994 	bl	80043c0 <HAL_GPIO_WritePin>
	ADF4355_Setup(0x01, 20000000, ADF_DIRECT_CTRL, 400);
 8002098:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800209c:	22dc      	movs	r2, #220	; 0xdc
 800209e:	4934      	ldr	r1, [pc, #208]	; (8002170 <main+0x128>)
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7fe feb1 	bl	8000e08 <ADF4355_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ac:	482f      	ldr	r0, [pc, #188]	; (800216c <main+0x124>)
 80020ae:	f002 f987 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	482b      	ldr	r0, [pc, #172]	; (8002168 <main+0x120>)
 80020ba:	f002 f981 	bl	80043c0 <HAL_GPIO_WritePin>
		ADF4355_SetFrequency(102000000);
 80020be:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002148 <main+0x100>
 80020c2:	f7ff f88f 	bl	80011e4 <ADF4355_SetFrequency>
		HAL_Delay(2000);
 80020c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ca:	f001 f945 	bl	8003358 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d4:	4825      	ldr	r0, [pc, #148]	; (800216c <main+0x124>)
 80020d6:	f002 f973 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e0:	4821      	ldr	r0, [pc, #132]	; (8002168 <main+0x120>)
 80020e2:	f002 f96d 	bl	80043c0 <HAL_GPIO_WritePin>
		ADF4355_SetFrequency(3000000001);
 80020e6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002150 <main+0x108>
 80020ea:	f7ff f87b 	bl	80011e4 <ADF4355_SetFrequency>
		HAL_Delay(2000);
 80020ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020f2:	f001 f931 	bl	8003358 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fc:	481b      	ldr	r0, [pc, #108]	; (800216c <main+0x124>)
 80020fe:	f002 f95f 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002108:	4817      	ldr	r0, [pc, #92]	; (8002168 <main+0x120>)
 800210a:	f002 f959 	bl	80043c0 <HAL_GPIO_WritePin>
		ADF4355_SetFrequency(220000000);
 800210e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002158 <main+0x110>
 8002112:	f7ff f867 	bl	80011e4 <ADF4355_SetFrequency>
		HAL_Delay(2000);
 8002116:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800211a:	f001 f91d 	bl	8003358 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002124:	4811      	ldr	r0, [pc, #68]	; (800216c <main+0x124>)
 8002126:	f002 f94b 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <main+0x120>)
 8002132:	f002 f945 	bl	80043c0 <HAL_GPIO_WritePin>
		ADF4355_SetFrequency(6600000000);
 8002136:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002160 <main+0x118>
 800213a:	f7ff f853 	bl	80011e4 <ADF4355_SetFrequency>
		HAL_Delay(2000);
 800213e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002142:	f001 f909 	bl	8003358 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002146:	e7ae      	b.n	80020a6 <main+0x5e>
 8002148:	00000000 	.word	0x00000000
 800214c:	41985196 	.word	0x41985196
 8002150:	c0200000 	.word	0xc0200000
 8002154:	41e65a0b 	.word	0x41e65a0b
 8002158:	00000000 	.word	0x00000000
 800215c:	41aa39de 	.word	0x41aa39de
 8002160:	20000000 	.word	0x20000000
 8002164:	41f89640 	.word	0x41f89640
 8002168:	40021000 	.word	0x40021000
 800216c:	40020800 	.word	0x40020800
 8002170:	01312d00 	.word	0x01312d00

08002174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b094      	sub	sp, #80	; 0x50
 8002178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	2230      	movs	r2, #48	; 0x30
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f009 fcc2 	bl	800bb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <SystemClock_Config+0xd8>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <SystemClock_Config+0xd8>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a6:	6413      	str	r3, [r2, #64]	; 0x40
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <SystemClock_Config+0xd8>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <SystemClock_Config+0xdc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <SystemClock_Config+0xdc>)
 80021be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <SystemClock_Config+0xdc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021da:	2302      	movs	r3, #2
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021e8:	23a8      	movs	r3, #168	; 0xa8
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021f0:	2307      	movs	r3, #7
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f4:	f107 0320 	add.w	r3, r7, #32
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fb85 	bl	8005908 <HAL_RCC_OscConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002204:	f000 fbc0 	bl	8002988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002208:	230f      	movs	r3, #15
 800220a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	2105      	movs	r1, #5
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fdde 	bl	8005de8 <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002232:	f000 fba9 	bl	8002988 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 8002236:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800223a:	2100      	movs	r1, #0
 800223c:	2001      	movs	r0, #1
 800223e:	f003 feb9 	bl	8005fb4 <HAL_RCC_MCOConfig>
}
 8002242:	bf00      	nop
 8002244:	3750      	adds	r7, #80	; 0x50
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000

08002254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <MX_ADC1_Init+0xd4>)
 800226a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <MX_ADC1_Init+0xd0>)
 800226e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002272:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002274:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <MX_ADC1_Init+0xd0>)
 800227c:	2201      	movs	r2, #1
 800227e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002282:	2201      	movs	r2, #1
 8002284:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002290:	2200      	movs	r2, #0
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <MX_ADC1_Init+0xd0>)
 8002296:	4a25      	ldr	r2, [pc, #148]	; (800232c <MX_ADC1_Init+0xd8>)
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <MX_ADC1_Init+0xd0>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022a2:	2203      	movs	r2, #3
 80022a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022b4:	481b      	ldr	r0, [pc, #108]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022b6:	f001 f871 	bl	800339c <HAL_ADC_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022c0:	f000 fb62 	bl	8002988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80022c4:	2310      	movs	r3, #16
 80022c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022cc:	2307      	movs	r3, #7
 80022ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d0:	463b      	mov	r3, r7
 80022d2:	4619      	mov	r1, r3
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022d6:	f001 f8a5 	bl	8003424 <HAL_ADC_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022e0:	f000 fb52 	bl	8002988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80022e4:	2311      	movs	r3, #17
 80022e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ec:	463b      	mov	r3, r7
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <MX_ADC1_Init+0xd0>)
 80022f2:	f001 f897 	bl	8003424 <HAL_ADC_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80022fc:	f000 fb44 	bl	8002988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002300:	2312      	movs	r3, #18
 8002302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002304:	2303      	movs	r3, #3
 8002306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_ADC1_Init+0xd0>)
 800230e:	f001 f889 	bl	8003424 <HAL_ADC_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002318:	f000 fb36 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000054c 	.word	0x2000054c
 8002328:	40012000 	.word	0x40012000
 800232c:	0f000001 	.word	0x0f000001

08002330 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_CRC_Init+0x20>)
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <MX_CRC_Init+0x24>)
 8002338:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_CRC_Init+0x20>)
 800233c:	f001 fba1 	bl	8003a82 <HAL_CRC_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002346:	f000 fb1f 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200004a4 	.word	0x200004a4
 8002354:	40023000 	.word	0x40023000

08002358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <MX_I2C1_Init+0x50>)
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <MX_I2C1_Init+0x54>)
 8002360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MX_I2C1_Init+0x58>)
 8002366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_I2C1_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800237a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <MX_I2C1_Init+0x50>)
 800237e:	2200      	movs	r2, #0
 8002380:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <MX_I2C1_Init+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <MX_I2C1_Init+0x50>)
 8002396:	f002 f82d 	bl	80043f4 <HAL_I2C_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023a0:	f000 faf2 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000450 	.word	0x20000450
 80023ac:	40005400 	.word	0x40005400
 80023b0:	000186a0 	.word	0x000186a0

080023b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_RNG_Init+0x20>)
 80023ba:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <MX_RNG_Init+0x24>)
 80023bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_RNG_Init+0x20>)
 80023c0:	f003 ff6c 	bl	800629c <HAL_RNG_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023ca:	f000 fadd 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000694 	.word	0x20000694
 80023d8:	50060800 	.word	0x50060800

080023dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_SPI1_Init+0x68>)
 80023e2:	4a19      	ldr	r2, [pc, #100]	; (8002448 <MX_SPI1_Init+0x6c>)
 80023e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <MX_SPI1_Init+0x68>)
 80023e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <MX_SPI1_Init+0x68>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_SPI1_Init+0x68>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <MX_SPI1_Init+0x68>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <MX_SPI1_Init+0x68>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_SPI1_Init+0x68>)
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <MX_SPI1_Init+0x68>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_SPI1_Init+0x68>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <MX_SPI1_Init+0x68>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_SPI1_Init+0x68>)
 8002422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_SPI1_Init+0x68>)
 800242a:	220a      	movs	r2, #10
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_SPI1_Init+0x68>)
 8002430:	f003 ff5e 	bl	80062f0 <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800243a:	f000 faa5 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200006a4 	.word	0x200006a4
 8002448:	40013000 	.word	0x40013000

0800244c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <MX_SPI2_Init+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI2_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI2_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002498:	220a      	movs	r2, #10
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_SPI2_Init+0x64>)
 800249e:	f003 ff27 	bl	80062f0 <HAL_SPI_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024a8:	f000 fa6e 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000398 	.word	0x20000398
 80024b4:	40003800 	.word	0x40003800

080024b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b092      	sub	sp, #72	; 0x48
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <MX_TIM3_Init+0x12c>)
 80024f8:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <MX_TIM3_Init+0x130>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <MX_TIM3_Init+0x12c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <MX_TIM3_Init+0x12c>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <MX_TIM3_Init+0x12c>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <MX_TIM3_Init+0x12c>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <MX_TIM3_Init+0x12c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800251c:	4831      	ldr	r0, [pc, #196]	; (80025e4 <MX_TIM3_Init+0x12c>)
 800251e:	f004 f955 	bl	80067cc <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002528:	f000 fa2e 	bl	8002988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002536:	4619      	mov	r1, r3
 8002538:	482a      	ldr	r0, [pc, #168]	; (80025e4 <MX_TIM3_Init+0x12c>)
 800253a:	f004 fb3f 	bl	8006bbc <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002544:	f000 fa20 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002548:	4826      	ldr	r0, [pc, #152]	; (80025e4 <MX_TIM3_Init+0x12c>)
 800254a:	f004 f96a 	bl	8006822 <HAL_TIM_PWM_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002554:	f000 fa18 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002558:	4822      	ldr	r0, [pc, #136]	; (80025e4 <MX_TIM3_Init+0x12c>)
 800255a:	f004 f997 	bl	800688c <HAL_TIM_IC_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002564:	f000 fa10 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002574:	4619      	mov	r1, r3
 8002576:	481b      	ldr	r0, [pc, #108]	; (80025e4 <MX_TIM3_Init+0x12c>)
 8002578:	f004 ffec 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8002582:	f000 fa01 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2360      	movs	r3, #96	; 0x60
 8002588:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	2208      	movs	r2, #8
 800259c:	4619      	mov	r1, r3
 800259e:	4811      	ldr	r0, [pc, #68]	; (80025e4 <MX_TIM3_Init+0x12c>)
 80025a0:	f004 fa46 	bl	8006a30 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80025aa:	f000 f9ed 	bl	8002988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	220c      	movs	r2, #12
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	; (80025e4 <MX_TIM3_Init+0x12c>)
 80025c6:	f004 f996 	bl	80068f6 <HAL_TIM_IC_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80025d0:	f000 f9da 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <MX_TIM3_Init+0x12c>)
 80025d6:	f000 fcd7 	bl	8002f88 <HAL_TIM_MspPostInit>

}
 80025da:	bf00      	nop
 80025dc:	3748      	adds	r7, #72	; 0x48
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2000050c 	.word	0x2000050c
 80025e8:	40000400 	.word	0x40000400

080025ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART1_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002624:	f005 f812 	bl	800764c <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f000 f9ab 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000594 	.word	0x20000594
 800263c:	40011000 	.word	0x40011000

08002640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <MX_DMA_Init+0xb8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a2a      	ldr	r2, [pc, #168]	; (80026f8 <MX_DMA_Init+0xb8>)
 8002650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <MX_DMA_Init+0xb8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <MX_DMA_Init+0xb8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <MX_DMA_Init+0xb8>)
 800266c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <MX_DMA_Init+0xb8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	200b      	movs	r0, #11
 8002684:	f001 f9c7 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002688:	200b      	movs	r0, #11
 800268a:	f001 f9e0 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	200e      	movs	r0, #14
 8002694:	f001 f9bf 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002698:	200e      	movs	r0, #14
 800269a:	f001 f9d8 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	200f      	movs	r0, #15
 80026a4:	f001 f9b7 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026a8:	200f      	movs	r0, #15
 80026aa:	f001 f9d0 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2011      	movs	r0, #17
 80026b4:	f001 f9af 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026b8:	2011      	movs	r0, #17
 80026ba:	f001 f9c8 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2038      	movs	r0, #56	; 0x38
 80026c4:	f001 f9a7 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026c8:	2038      	movs	r0, #56	; 0x38
 80026ca:	f001 f9c0 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	203b      	movs	r0, #59	; 0x3b
 80026d4:	f001 f99f 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80026d8:	203b      	movs	r0, #59	; 0x3b
 80026da:	f001 f9b8 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	203c      	movs	r0, #60	; 0x3c
 80026e4:	f001 f997 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80026e8:	203c      	movs	r0, #60	; 0x3c
 80026ea:	f001 f9b0 	bl	8003a4e <HAL_NVIC_EnableIRQ>

}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	4b96      	ldr	r3, [pc, #600]	; (8002970 <MX_GPIO_Init+0x274>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a95      	ldr	r2, [pc, #596]	; (8002970 <MX_GPIO_Init+0x274>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b93      	ldr	r3, [pc, #588]	; (8002970 <MX_GPIO_Init+0x274>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b8f      	ldr	r3, [pc, #572]	; (8002970 <MX_GPIO_Init+0x274>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a8e      	ldr	r2, [pc, #568]	; (8002970 <MX_GPIO_Init+0x274>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <MX_GPIO_Init+0x274>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b88      	ldr	r3, [pc, #544]	; (8002970 <MX_GPIO_Init+0x274>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a87      	ldr	r2, [pc, #540]	; (8002970 <MX_GPIO_Init+0x274>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b85      	ldr	r3, [pc, #532]	; (8002970 <MX_GPIO_Init+0x274>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <MX_GPIO_Init+0x274>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a80      	ldr	r2, [pc, #512]	; (8002970 <MX_GPIO_Init+0x274>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b7e      	ldr	r3, [pc, #504]	; (8002970 <MX_GPIO_Init+0x274>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <MX_GPIO_Init+0x274>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a79      	ldr	r2, [pc, #484]	; (8002970 <MX_GPIO_Init+0x274>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b77      	ldr	r3, [pc, #476]	; (8002970 <MX_GPIO_Init+0x274>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <MX_GPIO_Init+0x274>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <MX_GPIO_Init+0x274>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b70      	ldr	r3, [pc, #448]	; (8002970 <MX_GPIO_Init+0x274>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 80027ba:	2200      	movs	r2, #0
 80027bc:	f640 4177 	movw	r1, #3191	; 0xc77
 80027c0:	486c      	ldr	r0, [pc, #432]	; (8002974 <MX_GPIO_Init+0x278>)
 80027c2:	f001 fdfd 	bl	80043c0 <HAL_GPIO_WritePin>
                          |AD9957_RESET_Pin|AD9957_IORESET_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 80027cc:	486a      	ldr	r0, [pc, #424]	; (8002978 <MX_GPIO_Init+0x27c>)
 80027ce:	f001 fdf7 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_SET);
 80027d2:	2201      	movs	r2, #1
 80027d4:	2116      	movs	r1, #22
 80027d6:	4869      	ldr	r0, [pc, #420]	; (800297c <MX_GPIO_Init+0x280>)
 80027d8:	f001 fdf2 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD9957_IOUP_Pin|AD9957_CS_Pin|ADF4355_CS_Pin|ADF4355_LE_Pin, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80027e2:	4864      	ldr	r0, [pc, #400]	; (8002974 <MX_GPIO_Init+0x278>)
 80027e4:	f001 fdec 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_C_GPIO_Port, SEL_PAATTEN_C_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ee:	4864      	ldr	r0, [pc, #400]	; (8002980 <MX_GPIO_Init+0x284>)
 80027f0:	f001 fde6 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEL_PAATTEN_D_Pin|MAX10_CS_Pin, GPIO_PIN_SET);
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80027fa:	4861      	ldr	r0, [pc, #388]	; (8002980 <MX_GPIO_Init+0x284>)
 80027fc:	f001 fde0 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SEL_PAATTEN_A_Pin|ATTEN_0_Pin|ATTEN_1_Pin|ATTEN_2_Pin
 8002800:	2200      	movs	r2, #0
 8002802:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002806:	485f      	ldr	r0, [pc, #380]	; (8002984 <MX_GPIO_Init+0x288>)
 8002808:	f001 fdda 	bl	80043c0 <HAL_GPIO_WritePin>
                          |ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin|ATTEN_6_Pin
                          |ATTEN_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_B_GPIO_Port, SEL_PAATTEN_B_Pin, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002812:	485c      	ldr	r0, [pc, #368]	; (8002984 <MX_GPIO_Init+0x288>)
 8002814:	f001 fdd4 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_FILTERSEL_V3_Pin RF_FILTERSEL_V4_Pin RF_FILTERSEL_V5_Pin RF_FILTERSEL_V6_Pin
                           AD9957_IOUP_Pin AD9957_CS_Pin AD9957_RESET_Pin AD9957_IORESET_Pin
                           ADF4355_CS_Pin ADF4355_LE_Pin RF_FILTERSEL_V1_Pin RF_FILTERSEL_V2_Pin */
  GPIO_InitStruct.Pin = RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 8002818:	f646 7377 	movw	r3, #28535	; 0x6f77
 800281c:	61fb      	str	r3, [r7, #28]
                          |AD9957_IOUP_Pin|AD9957_CS_Pin|AD9957_RESET_Pin|AD9957_IORESET_Pin
                          |ADF4355_CS_Pin|ADF4355_LE_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281e:	2301      	movs	r3, #1
 8002820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4850      	ldr	r0, [pc, #320]	; (8002974 <MX_GPIO_Init+0x278>)
 8002832:	f001 fc2b 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	484a      	ldr	r0, [pc, #296]	; (8002978 <MX_GPIO_Init+0x27c>)
 8002850:	f001 fc1c 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBD_IRQ_Pin TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = KEYBD_IRQ_Pin|TOUCH_IRQ_Pin;
 8002854:	2303      	movs	r3, #3
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285c:	2301      	movs	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4844      	ldr	r0, [pc, #272]	; (8002978 <MX_GPIO_Init+0x27c>)
 8002868:	f001 fc10 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : REF_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = REF_PLL_LOCK_Pin;
 800286c:	2304      	movs	r3, #4
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(REF_PLL_LOCK_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	483e      	ldr	r0, [pc, #248]	; (8002978 <MX_GPIO_Init+0x27c>)
 8002880:	f001 fc04 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin;
 8002884:	2316      	movs	r3, #22
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	4838      	ldr	r0, [pc, #224]	; (800297c <MX_GPIO_Init+0x280>)
 800289c:	f001 fbf6 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 ADF4355_MUX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|ADF4355_MUX_Pin;
 80028a0:	f248 0380 	movw	r3, #32896	; 0x8080
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	482f      	ldr	r0, [pc, #188]	; (8002974 <MX_GPIO_Init+0x278>)
 80028b6:	f001 fbe9 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9957_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = AD9957_PLL_LOCK_Pin;
 80028ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD9957_PLL_LOCK_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4829      	ldr	r0, [pc, #164]	; (8002974 <MX_GPIO_Init+0x278>)
 80028d0:	f001 fbdc 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_C_Pin SEL_PAATTEN_D_Pin MAX10_CS_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_C_Pin|SEL_PAATTEN_D_Pin|MAX10_CS_Pin;
 80028d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	4619      	mov	r1, r3
 80028ec:	4824      	ldr	r0, [pc, #144]	; (8002980 <MX_GPIO_Init+0x284>)
 80028ee:	f001 fbcd 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_A_Pin SEL_PAATTEN_B_Pin ATTEN_0_Pin ATTEN_1_Pin
                           ATTEN_2_Pin ATTEN_3_Pin ATTEN_4_Pin ATTEN_5_Pin
                           ATTEN_6_Pin ATTEN_7_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_A_Pin|SEL_PAATTEN_B_Pin|ATTEN_0_Pin|ATTEN_1_Pin
 80028f2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80028f6:	61fb      	str	r3, [r7, #28]
                          |ATTEN_2_Pin|ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin
                          |ATTEN_6_Pin|ATTEN_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	481e      	ldr	r0, [pc, #120]	; (8002984 <MX_GPIO_Init+0x288>)
 800290c:	f001 fbbe 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_SIGSRC_B_Pin SEL_SIGSRC_A_Pin */
  GPIO_InitStruct.Pin = SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin;
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	4814      	ldr	r0, [pc, #80]	; (8002978 <MX_GPIO_Init+0x27c>)
 8002928:	f001 fbb0 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800292c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	4619      	mov	r1, r3
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <MX_GPIO_Init+0x27c>)
 800294a:	f001 fb9f 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : VUSB_SENSE_Pin */
  GPIO_InitStruct.Pin = VUSB_SENSE_Pin;
 800294e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VUSB_SENSE_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_GPIO_Init+0x280>)
 8002964:	f001 fb92 	bl	800408c <HAL_GPIO_Init>

}
 8002968:	bf00      	nop
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	40021000 	.word	0x40021000
 8002978:	40020800 	.word	0x40020800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020c00 	.word	0x40020c00

08002988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_ADC_MspInit+0x94>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d13c      	bne.n	8002a74 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_ADC_MspInit+0x98>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_ADC_MspInit+0x98>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_ADC_MspInit+0x98>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_ADC_MspInit+0xa0>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a5a:	f001 f82f 	bl	8003abc <HAL_DMA_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8002a64:	f7ff ff90 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <HAL_ADC_MspInit+0x9c>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40012000 	.word	0x40012000
 8002a80:	40023800 	.word	0x40023800
 8002a84:	200005d4 	.word	0x200005d4
 8002a88:	40026470 	.word	0x40026470

08002a8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <HAL_CRC_MspInit+0x3c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_CRC_MspInit+0x40>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_CRC_MspInit+0x40>)
 8002aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_CRC_MspInit+0x40>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023000 	.word	0x40023000
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <HAL_I2C_MspInit+0x13c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f040 8088 	bne.w	8002c04 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b14:	2312      	movs	r3, #18
 8002b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b20:	2304      	movs	r3, #4
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	483a      	ldr	r0, [pc, #232]	; (8002c14 <HAL_I2C_MspInit+0x144>)
 8002b2c:	f001 faae 	bl	800408c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <HAL_I2C_MspInit+0x140>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b4e:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <HAL_I2C_MspInit+0x14c>)
 8002b50:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b58:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b8c:	4822      	ldr	r0, [pc, #136]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002b8e:	f000 ff95 	bl	8003abc <HAL_DMA_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002b98:	f7ff fef6 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_I2C_MspInit+0x148>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_I2C_MspInit+0x154>)
 8002bac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bea:	f000 ff67 	bl	8003abc <HAL_DMA_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8002bf4:	f7ff fec8 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_I2C_MspInit+0x150>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c04:	bf00      	nop
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020400 	.word	0x40020400
 8002c18:	200003f0 	.word	0x200003f0
 8002c1c:	400260a0 	.word	0x400260a0
 8002c20:	20000634 	.word	0x20000634
 8002c24:	40026010 	.word	0x40026010

08002c28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RNG_MspInit+0x3c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RNG_MspInit+0x40>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RNG_MspInit+0x40>)
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	6353      	str	r3, [r2, #52]	; 0x34
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RNG_MspInit+0x40>)
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	50060800 	.word	0x50060800
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a8e      	ldr	r2, [pc, #568]	; (8002ec4 <HAL_SPI_MspInit+0x258>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f040 8089 	bne.w	8002da2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	4a8b      	ldr	r2, [pc, #556]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca0:	4b89      	ldr	r3, [pc, #548]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a84      	ldr	r2, [pc, #528]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 8002cc8:	23e0      	movs	r3, #224	; 0xe0
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	487a      	ldr	r0, [pc, #488]	; (8002ecc <HAL_SPI_MspInit+0x260>)
 8002ce4:	f001 f9d2 	bl	800408c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002ce8:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002cea:	4a7a      	ldr	r2, [pc, #488]	; (8002ed4 <HAL_SPI_MspInit+0x268>)
 8002cec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002cee:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002cf0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cf4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfc:	4b74      	ldr	r3, [pc, #464]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d08:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d0a:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d1c:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d22:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d28:	4869      	ldr	r0, [pc, #420]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d2a:	f000 fec7 	bl	8003abc <HAL_DMA_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002d34:	f7ff fe28 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d3e:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <HAL_SPI_MspInit+0x264>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002d44:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d46:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_SPI_MspInit+0x270>)
 8002d48:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d4c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d50:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d58:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5e:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d64:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d72:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d78:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7e:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d84:	4854      	ldr	r0, [pc, #336]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d86:	f000 fe99 	bl	8003abc <HAL_DMA_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002d90:	f7ff fdfa 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a50      	ldr	r2, [pc, #320]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d98:	649a      	str	r2, [r3, #72]	; 0x48
 8002d9a:	4a4f      	ldr	r2, [pc, #316]	; (8002ed8 <HAL_SPI_MspInit+0x26c>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002da0:	e08c      	b.n	8002ebc <HAL_SPI_MspInit+0x250>
  else if(hspi->Instance==SPI2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_SPI_MspInit+0x274>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f040 8087 	bne.w	8002ebc <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a44      	ldr	r2, [pc, #272]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_SPI_MspInit+0x25c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002de6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	4838      	ldr	r0, [pc, #224]	; (8002ee4 <HAL_SPI_MspInit+0x278>)
 8002e04:	f001 f942 	bl	800408c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002e08:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e0a:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_SPI_MspInit+0x280>)
 8002e0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e26:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e46:	4828      	ldr	r0, [pc, #160]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e48:	f000 fe38 	bl	8003abc <HAL_DMA_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8002e52:	f7ff fd99 	bl	8002988 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_SPI_MspInit+0x27c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_SPI_MspInit+0x288>)
 8002e66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ea0:	4813      	ldr	r0, [pc, #76]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002ea2:	f000 fe0b 	bl	8003abc <HAL_DMA_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8002eac:	f7ff fd6c 	bl	8002988 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002eb4:	649a      	str	r2, [r3, #72]	; 0x48
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_SPI_MspInit+0x284>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ebc:	bf00      	nop
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40013000 	.word	0x40013000
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	200006fc 	.word	0x200006fc
 8002ed4:	40026410 	.word	0x40026410
 8002ed8:	200007bc 	.word	0x200007bc
 8002edc:	40026458 	.word	0x40026458
 8002ee0:	40003800 	.word	0x40003800
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	200004ac 	.word	0x200004ac
 8002eec:	40026058 	.word	0x40026058
 8002ef0:	2000075c 	.word	0x2000075c
 8002ef4:	40026070 	.word	0x40026070

08002ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12b      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = FAN_RPM_Pin;
 8002f52:	2302      	movs	r3, #2
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f62:	2302      	movs	r3, #2
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_RPM_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_TIM_Base_MspInit+0x8c>)
 8002f6e:	f001 f88d 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020400 	.word	0x40020400

08002f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <HAL_TIM_MspPostInit+0x68>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d11d      	bne.n	8002fe6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <HAL_TIM_MspPostInit+0x70>)
 8002fe2:	f001 f853 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020400 	.word	0x40020400

08002ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_UART_MspInit+0x84>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12c      	bne.n	8003078 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_UART_MspInit+0x88>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_UART_MspInit+0x88>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_UART_MspInit+0x88>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_UART_MspInit+0x88>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_UART_MspInit+0x88>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_UART_MspInit+0x88>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003056:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003068:	2307      	movs	r3, #7
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <HAL_UART_MspInit+0x8c>)
 8003074:	f001 f80a 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40011000 	.word	0x40011000
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000

0800308c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309e:	e7fe      	b.n	800309e <HardFault_Handler+0x4>

080030a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <MemManage_Handler+0x4>

080030a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <BusFault_Handler+0x4>

080030ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <UsageFault_Handler+0x4>

080030b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e0:	f000 f91a 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <DMA1_Stream0_IRQHandler+0x10>)
 80030ee:	f000 fd93 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000634 	.word	0x20000634

080030fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA1_Stream3_IRQHandler+0x10>)
 8003102:	f000 fd89 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200004ac 	.word	0x200004ac

08003110 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <DMA1_Stream4_IRQHandler+0x10>)
 8003116:	f000 fd7f 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2000075c 	.word	0x2000075c

08003124 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream6_IRQHandler+0x10>)
 800312a:	f000 fd75 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200003f0 	.word	0x200003f0

08003138 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA2_Stream0_IRQHandler+0x10>)
 800313e:	f000 fd6b 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200006fc 	.word	0x200006fc

0800314c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA2_Stream3_IRQHandler+0x10>)
 8003152:	f000 fd61 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200007bc 	.word	0x200007bc

08003160 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA2_Stream4_IRQHandler+0x10>)
 8003166:	f000 fd57 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200005d4 	.word	0x200005d4

08003174 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <OTG_FS_IRQHandler+0x10>)
 800317a:	f001 fbf3 	bl	8004964 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000cf0 	.word	0x20000cf0

08003188 <_sbrk>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
 80031b8:	f008 fc6e 	bl	800ba98 <__errno>
 80031bc:	4602      	mov	r2, r0
 80031be:	230c      	movs	r3, #12
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20020000 	.word	0x20020000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	20000160 	.word	0x20000160
 80031f0:	20001100 	.word	0x20001100

080031f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <SystemInit+0x28>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <SystemInit+0x28>)
 8003200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <SystemInit+0x28>)
 800320a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800320e:	609a      	str	r2, [r3, #8]
#endif
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <Reset_Handler>:
 8003220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003258 <LoopFillZerobss+0x14>
 8003224:	2100      	movs	r1, #0
 8003226:	e003      	b.n	8003230 <LoopCopyDataInit>

08003228 <CopyDataInit>:
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <LoopFillZerobss+0x18>)
 800322a:	585b      	ldr	r3, [r3, r1]
 800322c:	5043      	str	r3, [r0, r1]
 800322e:	3104      	adds	r1, #4

08003230 <LoopCopyDataInit>:
 8003230:	480b      	ldr	r0, [pc, #44]	; (8003260 <LoopFillZerobss+0x1c>)
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <LoopFillZerobss+0x20>)
 8003234:	1842      	adds	r2, r0, r1
 8003236:	429a      	cmp	r2, r3
 8003238:	d3f6      	bcc.n	8003228 <CopyDataInit>
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <LoopFillZerobss+0x24>)
 800323c:	e002      	b.n	8003244 <LoopFillZerobss>

0800323e <FillZerobss>:
 800323e:	2300      	movs	r3, #0
 8003240:	f842 3b04 	str.w	r3, [r2], #4

08003244 <LoopFillZerobss>:
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <LoopFillZerobss+0x28>)
 8003246:	429a      	cmp	r2, r3
 8003248:	d3f9      	bcc.n	800323e <FillZerobss>
 800324a:	f7ff ffd3 	bl	80031f4 <SystemInit>
 800324e:	f008 fc29 	bl	800baa4 <__libc_init_array>
 8003252:	f7fe fef9 	bl	8002048 <main>
 8003256:	4770      	bx	lr
 8003258:	20020000 	.word	0x20020000
 800325c:	0800bd88 	.word	0x0800bd88
 8003260:	20000000 	.word	0x20000000
 8003264:	20000140 	.word	0x20000140
 8003268:	20000140 	.word	0x20000140
 800326c:	200010fc 	.word	0x200010fc

08003270 <ADC_IRQHandler>:
 8003270:	e7fe      	b.n	8003270 <ADC_IRQHandler>
	...

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_Init+0x40>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_Init+0x40>)
 800328a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_Init+0x40>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_Init+0x40>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 fbaf 	bl	8003a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f000 f808 	bl	80032b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a8:	f7ff fb76 	bl	8002998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x54>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fbc7 	bl	8003a6a <HAL_SYSTICK_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00e      	b.n	8003304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d80a      	bhi.n	8003302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	2200      	movs	r2, #0
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 fb8f 	bl	8003a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <HAL_InitTick+0x5c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000000 	.word	0x20000000
 8003310:	20000008 	.word	0x20000008
 8003314:	20000004 	.word	0x20000004

08003318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x20>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_IncTick+0x24>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_IncTick+0x24>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000008 	.word	0x20000008
 800333c:	2000081c 	.word	0x2000081c

08003340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_GetTick+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000081c 	.word	0x2000081c

08003358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff ffee 	bl	8003340 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d005      	beq.n	800337e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_Delay+0x40>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337e:	bf00      	nop
 8003380:	f7ff ffde 	bl	8003340 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d8f7      	bhi.n	8003380 <HAL_Delay+0x28>
  {
  }
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000008 	.word	0x20000008

0800339c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e033      	b.n	800341a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fb14 	bl	80029e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033e2:	f023 0302 	bic.w	r3, r3, #2
 80033e6:	f043 0202 	orr.w	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f93a 	bl	8003668 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
 800340a:	e001      	b.n	8003410 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e105      	b.n	800364c <HAL_ADC_ConfigChannel+0x228>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d925      	bls.n	800349c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	3b1e      	subs	r3, #30
 8003466:	2207      	movs	r2, #7
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43da      	mvns	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	400a      	ands	r2, r1
 8003474:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68d9      	ldr	r1, [r3, #12]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	4618      	mov	r0, r3
 8003488:	4603      	mov	r3, r0
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4403      	add	r3, r0
 800348e:	3b1e      	subs	r3, #30
 8003490:	409a      	lsls	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e022      	b.n	80034e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6919      	ldr	r1, [r3, #16]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	2207      	movs	r2, #7
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6919      	ldr	r1, [r3, #16]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4403      	add	r3, r0
 80034d8:	409a      	lsls	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d824      	bhi.n	8003534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b05      	subs	r3, #5
 80034fc:	221f      	movs	r2, #31
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	400a      	ands	r2, r1
 800350a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	4618      	mov	r0, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b05      	subs	r3, #5
 8003526:	fa00 f203 	lsl.w	r2, r0, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
 8003532:	e04c      	b.n	80035ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b0c      	cmp	r3, #12
 800353a:	d824      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	3b23      	subs	r3, #35	; 0x23
 800354e:	221f      	movs	r2, #31
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43da      	mvns	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	400a      	ands	r2, r1
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	3b23      	subs	r3, #35	; 0x23
 8003578:	fa00 f203 	lsl.w	r2, r0, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
 8003584:	e023      	b.n	80035ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	3b41      	subs	r3, #65	; 0x41
 8003598:	221f      	movs	r2, #31
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	400a      	ands	r2, r1
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4618      	mov	r0, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	3b41      	subs	r3, #65	; 0x41
 80035c2:	fa00 f203 	lsl.w	r2, r0, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_ADC_ConfigChannel+0x234>)
 80035d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a21      	ldr	r2, [pc, #132]	; (800365c <HAL_ADC_ConfigChannel+0x238>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1cc>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b12      	cmp	r3, #18
 80035e2:	d105      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_ADC_ConfigChannel+0x238>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d123      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x21e>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d003      	beq.n	800360a <HAL_ADC_ConfigChannel+0x1e6>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b11      	cmp	r3, #17
 8003608:	d11b      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d111      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_ADC_ConfigChannel+0x23c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <HAL_ADC_ConfigChannel+0x240>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0c9a      	lsrs	r2, r3, #18
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003634:	e002      	b.n	800363c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40012300 	.word	0x40012300
 800365c:	40012000 	.word	0x40012000
 8003660:	20000000 	.word	0x20000000
 8003664:	431bde83 	.word	0x431bde83

08003668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <ADC_Init+0x1f0>)
 8003672:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800369c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	4a58      	ldr	r2, [pc, #352]	; (800385c <ADC_Init+0x1f4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800370e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e00f      	b.n	8003766 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003764:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0202 	bic.w	r2, r2, #2
 8003774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7e1b      	ldrb	r3, [r3, #24]
 8003780:	005a      	lsls	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	3b01      	subs	r3, #1
 80037c0:	035a      	lsls	r2, r3, #13
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e007      	b.n	80037dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	051a      	lsls	r2, r3, #20
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800381e:	025a      	lsls	r2, r3, #9
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	029a      	lsls	r2, r3, #10
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40012300 	.word	0x40012300
 800385c:	0f000001 	.word	0x0f000001

08003860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800388c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003892:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	60d3      	str	r3, [r2, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 0307 	and.w	r3, r3, #7
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	db0b      	blt.n	80038ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <__NVIC_EnableIRQ+0x38>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2001      	movs	r0, #1
 80038e6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000e100 	.word	0xe000e100

08003900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db0a      	blt.n	800392a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	490c      	ldr	r1, [pc, #48]	; (800394c <__NVIC_SetPriority+0x4c>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	440b      	add	r3, r1
 8003924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003928:	e00a      	b.n	8003940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4908      	ldr	r1, [pc, #32]	; (8003950 <__NVIC_SetPriority+0x50>)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	3b04      	subs	r3, #4
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	440b      	add	r3, r1
 800393e:	761a      	strb	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000e100 	.word	0xe000e100
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	; 0x24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f1c3 0307 	rsb	r3, r3, #7
 800396e:	2b04      	cmp	r3, #4
 8003970:	bf28      	it	cs
 8003972:	2304      	movcs	r3, #4
 8003974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3304      	adds	r3, #4
 800397a:	2b06      	cmp	r3, #6
 800397c:	d902      	bls.n	8003984 <NVIC_EncodePriority+0x30>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b03      	subs	r3, #3
 8003982:	e000      	b.n	8003986 <NVIC_EncodePriority+0x32>
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	401a      	ands	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800399c:	f04f 31ff 	mov.w	r1, #4294967295
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43d9      	mvns	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	4313      	orrs	r3, r2
         );
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039cc:	d301      	bcc.n	80039d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00f      	b.n	80039f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <SysTick_Config+0x40>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039da:	210f      	movs	r1, #15
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f7ff ff8e 	bl	8003900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <SysTick_Config+0x40>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <SysTick_Config+0x40>)
 80039ec:	2207      	movs	r2, #7
 80039ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010

08003a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff29 	bl	8003860 <__NVIC_SetPriorityGrouping>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a28:	f7ff ff3e 	bl	80038a8 <__NVIC_GetPriorityGrouping>
 8003a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7ff ff8e 	bl	8003954 <NVIC_EncodePriority>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff5d 	bl	8003900 <__NVIC_SetPriority>
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff31 	bl	80038c4 <__NVIC_EnableIRQ>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ffa2 	bl	80039bc <SysTick_Config>
 8003a78:	4603      	mov	r3, r0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00e      	b.n	8003ab2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	795b      	ldrb	r3, [r3, #5]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fe fff1 	bl	8002a8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff fc3a 	bl	8003340 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e099      	b.n	8003c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af8:	e00f      	b.n	8003b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afa:	f7ff fc21 	bl	8003340 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d908      	bls.n	8003b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e078      	b.n	8003c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e8      	bne.n	8003afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <HAL_DMA_Init+0x158>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d117      	bne.n	8003bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f9e9 	bl	8003f98 <DMA_CheckFifoParam>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e016      	b.n	8003c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9a0 	bl	8003f2c <DMA_CalcBaseAndBitshift>
 8003bec:	4603      	mov	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	223f      	movs	r2, #63	; 0x3f
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f010803f 	.word	0xf010803f

08003c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c24:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_DMA_IRQHandler+0x258>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a92      	ldr	r2, [pc, #584]	; (8003e74 <HAL_DMA_IRQHandler+0x25c>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	2208      	movs	r2, #8
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01a      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2208      	movs	r2, #8
 8003c72:	409a      	lsls	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	2204      	movs	r2, #4
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	2210      	movs	r2, #16
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d043      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d03c      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	2210      	movs	r2, #16
 8003d14:	409a      	lsls	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
 8003d46:	e01f      	b.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
 8003d58:	e016      	b.n	8003d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0208 	bic.w	r2, r2, #8
 8003d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 808e 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8086 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2220      	movs	r2, #32
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d136      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0216 	bic.w	r2, r2, #22
 8003dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_DMA_IRQHandler+0x1da>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	223f      	movs	r2, #63	; 0x3f
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d07d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
        }
        return;
 8003e2e:	e078      	b.n	8003f22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d030      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
 8003e5c:	e02b      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e022      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
 8003e70:	20000000 	.word	0x20000000
 8003e74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0210 	bic.w	r2, r2, #16
 8003e94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d032      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d307      	bcc.n	8003efe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x2ca>
 8003efc:	e000      	b.n	8003f00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003efe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f22:	bf00      	nop
    }
  }
}
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3b10      	subs	r3, #16
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <DMA_CalcBaseAndBitshift+0x64>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <DMA_CalcBaseAndBitshift+0x68>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d909      	bls.n	8003f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f6c:	e007      	b.n	8003f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	aaaaaaab 	.word	0xaaaaaaab
 8003f94:	0800bd70 	.word	0x0800bd70

08003f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11f      	bne.n	8003ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d855      	bhi.n	8004064 <DMA_CheckFifoParam+0xcc>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <DMA_CheckFifoParam+0x28>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fe3 	.word	0x08003fe3
 8003fc8:	08003fd1 	.word	0x08003fd1
 8003fcc:	08004065 	.word	0x08004065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d045      	beq.n	8004068 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe0:	e042      	b.n	8004068 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fea:	d13f      	bne.n	800406c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff0:	e03c      	b.n	800406c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d121      	bne.n	8004040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d836      	bhi.n	8004070 <DMA_CheckFifoParam+0xd8>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <DMA_CheckFifoParam+0x70>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004019 	.word	0x08004019
 800400c:	0800401f 	.word	0x0800401f
 8004010:	08004019 	.word	0x08004019
 8004014:	08004031 	.word	0x08004031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e02f      	b.n	800407e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d024      	beq.n	8004074 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402e:	e021      	b.n	8004074 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004038:	d11e      	bne.n	8004078 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800403e:	e01b      	b.n	8004078 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d902      	bls.n	800404c <DMA_CheckFifoParam+0xb4>
 8004046:	2b03      	cmp	r3, #3
 8004048:	d003      	beq.n	8004052 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800404a:	e018      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e015      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      break;
 8004062:	e00b      	b.n	800407c <DMA_CheckFifoParam+0xe4>
      break;
 8004064:	bf00      	nop
 8004066:	e00a      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 8004068:	bf00      	nop
 800406a:	e008      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 800406c:	bf00      	nop
 800406e:	e006      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 8004070:	bf00      	nop
 8004072:	e004      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;   
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 800407c:	bf00      	nop
    }
  } 
  
  return status; 
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e16b      	b.n	8004380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040a8:	2201      	movs	r2, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	f040 815a 	bne.w	800437a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d00b      	beq.n	80040e6 <HAL_GPIO_Init+0x5a>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040da:	2b11      	cmp	r3, #17
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b12      	cmp	r3, #18
 80040e4:	d130      	bne.n	8004148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	2203      	movs	r2, #3
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411c:	2201      	movs	r2, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 0201 	and.w	r2, r3, #1
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0xfc>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b12      	cmp	r3, #18
 8004186:	d123      	bne.n	80041d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	08da      	lsrs	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3208      	adds	r2, #8
 8004190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	220f      	movs	r2, #15
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	08da      	lsrs	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3208      	adds	r2, #8
 80041ca:	69b9      	ldr	r1, [r7, #24]
 80041cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0203 	and.w	r2, r3, #3
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80b4 	beq.w	800437a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b5f      	ldr	r3, [pc, #380]	; (8004394 <HAL_GPIO_Init+0x308>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a5e      	ldr	r2, [pc, #376]	; (8004394 <HAL_GPIO_Init+0x308>)
 800421c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b5c      	ldr	r3, [pc, #368]	; (8004394 <HAL_GPIO_Init+0x308>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800422e:	4a5a      	ldr	r2, [pc, #360]	; (8004398 <HAL_GPIO_Init+0x30c>)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	3302      	adds	r3, #2
 8004236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	220f      	movs	r2, #15
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a51      	ldr	r2, [pc, #324]	; (800439c <HAL_GPIO_Init+0x310>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02b      	beq.n	80042b2 <HAL_GPIO_Init+0x226>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a50      	ldr	r2, [pc, #320]	; (80043a0 <HAL_GPIO_Init+0x314>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d025      	beq.n	80042ae <HAL_GPIO_Init+0x222>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a4f      	ldr	r2, [pc, #316]	; (80043a4 <HAL_GPIO_Init+0x318>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <HAL_GPIO_Init+0x21e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4e      	ldr	r2, [pc, #312]	; (80043a8 <HAL_GPIO_Init+0x31c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d019      	beq.n	80042a6 <HAL_GPIO_Init+0x21a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_GPIO_Init+0x320>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_GPIO_Init+0x216>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4c      	ldr	r2, [pc, #304]	; (80043b0 <HAL_GPIO_Init+0x324>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00d      	beq.n	800429e <HAL_GPIO_Init+0x212>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4b      	ldr	r2, [pc, #300]	; (80043b4 <HAL_GPIO_Init+0x328>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <HAL_GPIO_Init+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4a      	ldr	r2, [pc, #296]	; (80043b8 <HAL_GPIO_Init+0x32c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_GPIO_Init+0x20a>
 8004292:	2307      	movs	r3, #7
 8004294:	e00e      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 8004296:	2308      	movs	r3, #8
 8004298:	e00c      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 800429a:	2306      	movs	r3, #6
 800429c:	e00a      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 800429e:	2305      	movs	r3, #5
 80042a0:	e008      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e004      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_GPIO_Init+0x228>
 80042b2:	2300      	movs	r3, #0
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f002 0203 	and.w	r2, r2, #3
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	4093      	lsls	r3, r2
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042c4:	4934      	ldr	r1, [pc, #208]	; (8004398 <HAL_GPIO_Init+0x30c>)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042d2:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <HAL_GPIO_Init+0x330>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f6:	4a31      	ldr	r2, [pc, #196]	; (80043bc <HAL_GPIO_Init+0x330>)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_GPIO_Init+0x330>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <HAL_GPIO_Init+0x330>)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_GPIO_Init+0x330>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_GPIO_Init+0x330>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_GPIO_Init+0x330>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <HAL_GPIO_Init+0x330>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	f67f ae90 	bls.w	80040a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004388:	bf00      	nop
 800438a:	3724      	adds	r7, #36	; 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40023800 	.word	0x40023800
 8004398:	40013800 	.word	0x40013800
 800439c:	40020000 	.word	0x40020000
 80043a0:	40020400 	.word	0x40020400
 80043a4:	40020800 	.word	0x40020800
 80043a8:	40020c00 	.word	0x40020c00
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40021400 	.word	0x40021400
 80043b4:	40021800 	.word	0x40021800
 80043b8:	40021c00 	.word	0x40021c00
 80043bc:	40013c00 	.word	0x40013c00

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e11f      	b.n	8004646 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fe fb58 	bl	8002ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004458:	f001 fef8 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 800445c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4a7b      	ldr	r2, [pc, #492]	; (8004650 <HAL_I2C_Init+0x25c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d807      	bhi.n	8004478 <HAL_I2C_Init+0x84>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a7a      	ldr	r2, [pc, #488]	; (8004654 <HAL_I2C_Init+0x260>)
 800446c:	4293      	cmp	r3, r2
 800446e:	bf94      	ite	ls
 8004470:	2301      	movls	r3, #1
 8004472:	2300      	movhi	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e006      	b.n	8004486 <HAL_I2C_Init+0x92>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a77      	ldr	r2, [pc, #476]	; (8004658 <HAL_I2C_Init+0x264>)
 800447c:	4293      	cmp	r3, r2
 800447e:	bf94      	ite	ls
 8004480:	2301      	movls	r3, #1
 8004482:	2300      	movhi	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0db      	b.n	8004646 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a72      	ldr	r2, [pc, #456]	; (800465c <HAL_I2C_Init+0x268>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4a64      	ldr	r2, [pc, #400]	; (8004650 <HAL_I2C_Init+0x25c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d802      	bhi.n	80044c8 <HAL_I2C_Init+0xd4>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	3301      	adds	r3, #1
 80044c6:	e009      	b.n	80044dc <HAL_I2C_Init+0xe8>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	4a63      	ldr	r2, [pc, #396]	; (8004660 <HAL_I2C_Init+0x26c>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	3301      	adds	r3, #1
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4956      	ldr	r1, [pc, #344]	; (8004650 <HAL_I2C_Init+0x25c>)
 80044f8:	428b      	cmp	r3, r1
 80044fa:	d80d      	bhi.n	8004518 <HAL_I2C_Init+0x124>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1e59      	subs	r1, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fbb1 f3f3 	udiv	r3, r1, r3
 800450a:	3301      	adds	r3, #1
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	2b04      	cmp	r3, #4
 8004512:	bf38      	it	cc
 8004514:	2304      	movcc	r3, #4
 8004516:	e04f      	b.n	80045b8 <HAL_I2C_Init+0x1c4>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <HAL_I2C_Init+0x150>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e58      	subs	r0, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	440b      	add	r3, r1
 800452e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004532:	3301      	adds	r3, #1
 8004534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e012      	b.n	800456a <HAL_I2C_Init+0x176>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1e58      	subs	r0, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	0099      	lsls	r1, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	fbb0 f3f3 	udiv	r3, r0, r3
 800455a:	3301      	adds	r3, #1
 800455c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Init+0x17e>
 800456e:	2301      	movs	r3, #1
 8004570:	e022      	b.n	80045b8 <HAL_I2C_Init+0x1c4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10e      	bne.n	8004598 <HAL_I2C_Init+0x1a4>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1e58      	subs	r0, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	440b      	add	r3, r1
 8004588:	fbb0 f3f3 	udiv	r3, r0, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	e00f      	b.n	80045b8 <HAL_I2C_Init+0x1c4>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	0099      	lsls	r1, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	6809      	ldr	r1, [r1, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6911      	ldr	r1, [r2, #16]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	000186a0 	.word	0x000186a0
 8004654:	001e847f 	.word	0x001e847f
 8004658:	003d08ff 	.word	0x003d08ff
 800465c:	431bde83 	.word	0x431bde83
 8004660:	10624dd3 	.word	0x10624dd3

08004664 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004666:	b08f      	sub	sp, #60	; 0x3c
 8004668:	af0a      	add	r7, sp, #40	; 0x28
 800466a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e10f      	b.n	8004896 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f006 ff1b 	bl	800b4cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2203      	movs	r2, #3
 800469a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f003 fca8 	bl	800800a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	687e      	ldr	r6, [r7, #4]
 80046c2:	466d      	mov	r5, sp
 80046c4:	f106 0410 	add.w	r4, r6, #16
 80046c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80046d8:	1d33      	adds	r3, r6, #4
 80046da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046dc:	6838      	ldr	r0, [r7, #0]
 80046de:	f003 fb7f 	bl	8007de0 <USB_CoreInit>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0d0      	b.n	8004896 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f003 fc96 	bl	800802c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e04a      	b.n	800479c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	333d      	adds	r3, #61	; 0x3d
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	333c      	adds	r3, #60	; 0x3c
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	b298      	uxth	r0, r3
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3342      	adds	r3, #66	; 0x42
 8004742:	4602      	mov	r2, r0
 8004744:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	333f      	adds	r3, #63	; 0x3f
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	3344      	adds	r3, #68	; 0x44
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3348      	adds	r3, #72	; 0x48
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004782:	7bfa      	ldrb	r2, [r7, #15]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3350      	adds	r3, #80	; 0x50
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	3301      	adds	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	7bfa      	ldrb	r2, [r7, #15]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3af      	bcc.n	8004706 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	e044      	b.n	8004836 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800481a:	7bfa      	ldrb	r2, [r7, #15]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	3301      	adds	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	7bfa      	ldrb	r2, [r7, #15]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d3b5      	bcc.n	80047ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	687e      	ldr	r6, [r7, #4]
 8004848:	466d      	mov	r5, sp
 800484a:	f106 0410 	add.w	r4, r6, #16
 800484e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800485a:	e885 0003 	stmia.w	r5, {r0, r1}
 800485e:	1d33      	adds	r3, r6, #4
 8004860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	f003 fc0c 	bl	8008080 <USB_DevInit>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e00d      	b.n	8004896 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f004 fbbe 	bl	8009010 <USB_DevDisconnect>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800489e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_PCD_Start+0x1c>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e020      	b.n	80048fc <HAL_PCD_Start+0x5e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d109      	bne.n	80048de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d005      	beq.n	80048de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f004 fb7c 	bl	8008fe0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 fb7b 	bl	8007fe8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_PCD_Stop+0x16>
 8004916:	2302      	movs	r3, #2
 8004918:	e020      	b.n	800495c <HAL_PCD_Stop+0x58>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fb6f 	bl	800800a <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f004 fae0 	bl	8008ef6 <USB_StopDevice>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e009      	b.n	800495c <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f004 fb5f 	bl	8009010 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08d      	sub	sp, #52	; 0x34
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f004 fbf3 	bl	8009166 <USB_GetMode>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 839d 	bne.w	80050c2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f004 fb57 	bl	8009040 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8393 	beq.w	80050c0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 fb4e 	bl	8009040 <USB_ReadInterrupts>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d107      	bne.n	80049be <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f002 0202 	and.w	r2, r2, #2
 80049bc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 fb3c 	bl	8009040 <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d161      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0210 	bic.w	r2, r2, #16
 80049e0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	3304      	adds	r3, #4
 8004a00:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	0c5b      	lsrs	r3, r3, #17
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d124      	bne.n	8004a58 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d035      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6a38      	ldr	r0, [r7, #32]
 8004a2e:	f004 f965 	bl	8008cfc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a3e:	441a      	add	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a50:	441a      	add	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	619a      	str	r2, [r3, #24]
 8004a56:	e016      	b.n	8004a86 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	0c5b      	lsrs	r3, r3, #17
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2b06      	cmp	r3, #6
 8004a62:	d110      	bne.n	8004a86 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6a38      	ldr	r0, [r7, #32]
 8004a70:	f004 f944 	bl	8008cfc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a80:	441a      	add	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0210 	orr.w	r2, r2, #16
 8004a94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fad0 	bl	8009040 <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aaa:	d16e      	bne.n	8004b8a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f004 fad6 	bl	8009066 <USB_ReadDevAllOutEpInterrupt>
 8004aba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004abc:	e062      	b.n	8004b84 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d057      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fafb 	bl	80090ce <USB_ReadDevOutEPInterrupt>
 8004ad8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2301      	movs	r3, #1
 8004af4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fd4f 	bl	800559c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00c      	beq.n	8004b22 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2308      	movs	r3, #8
 8004b18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fe49 	bl	80057b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2320      	movs	r3, #32
 8004b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b76:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d199      	bne.n	8004abe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f004 fa56 	bl	8009040 <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b9e:	f040 80c0 	bne.w	8004d22 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fa77 	bl	800909a <USB_ReadDevAllInEpInterrupt>
 8004bac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004bb2:	e0b2      	b.n	8004d1a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80a7 	beq.w	8004d0e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 fa9d 	bl	800910a <USB_ReadDevInEPInterrupt>
 8004bd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d057      	beq.n	8004c8c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	2201      	movs	r2, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2301      	movs	r3, #1
 8004c10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d132      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3348      	adds	r3, #72	; 0x48
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4403      	add	r3, r0
 8004c3a:	3344      	adds	r3, #68	; 0x44
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4419      	add	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	3348      	adds	r3, #72	; 0x48
 8004c50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d113      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x31c>
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	3350      	adds	r3, #80	; 0x50
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	f004 faa4 	bl	80091c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f006 fca1 	bl	800b5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fbb9 	bl	8005480 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	3301      	adds	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f af49 	bne.w	8004bb4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 f98a 	bl	8009040 <USB_ReadInterrupts>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d122      	bne.n	8004d7e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fdc5 	bl	80058f0 <HAL_PCDEx_LPM_Callback>
 8004d66:	e002      	b.n	8004d6e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f006 fca7 	bl	800b6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f004 f95c 	bl	8009040 <USB_ReadInterrupts>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d92:	d112      	bne.n	8004dba <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f006 fc63 	bl	800b670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004db8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 f93e 	bl	8009040 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	f040 80c7 	bne.w	8004f60 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2110      	movs	r1, #16
 8004dec:	4618      	mov	r0, r3
 8004dee:	f003 faab 	bl	8008348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e056      	b.n	8004ea6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	461a      	mov	r2, r3
 8004e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e2a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d3a3      	bcc.n	8004df8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ebe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ec2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004edc:	f043 030b 	orr.w	r3, r3, #11
 8004ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f043 030b 	orr.w	r3, r3, #11
 8004ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef8:	e015      	b.n	8004f26 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f0c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f10:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f20:	f043 030b 	orr.w	r3, r3, #11
 8004f24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f004 f93c 	bl	80091c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f004 f86b 	bl	8009040 <USB_ReadInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f74:	d124      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 f901 	bl	8009182 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 fa40 	bl	800840a <USB_GetDevSpeed>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681c      	ldr	r4, [r3, #0]
 8004f96:	f001 f94d 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8004f9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f002 ff7d 	bl	8007ea4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f006 fb37 	bl	800b61e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 f83b 	bl	8009040 <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10a      	bne.n	8004fea <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f006 fb14 	bl	800b602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 0208 	and.w	r2, r2, #8
 8004fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 f826 	bl	8009040 <USB_ReadInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d10f      	bne.n	8005020 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f006 fb76 	bl	800b6fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800501e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f004 f80b 	bl	8009040 <USB_ReadInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005034:	d10f      	bne.n	8005056 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f006 fb49 	bl	800b6d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f003 fff0 	bl	8009040 <USB_ReadInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d10a      	bne.n	8005082 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f006 fb57 	bl	800b720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f003 ffda 	bl	8009040 <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d115      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f006 fb47 	bl	800b73c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	e000      	b.n	80050c2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80050c0:	bf00      	nop
    }
  }
}
 80050c2:	3734      	adds	r7, #52	; 0x34
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd90      	pop	{r4, r7, pc}

080050c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_PCD_SetAddress+0x1a>
 80050de:	2302      	movs	r3, #2
 80050e0:	e013      	b.n	800510a <HAL_PCD_SetAddress+0x42>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 ff4a 	bl	8008f94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	4608      	mov	r0, r1
 800511c:	4611      	mov	r1, r2
 800511e:	461a      	mov	r2, r3
 8005120:	4603      	mov	r3, r0
 8005122:	70fb      	strb	r3, [r7, #3]
 8005124:	460b      	mov	r3, r1
 8005126:	803b      	strh	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005134:	2b00      	cmp	r3, #0
 8005136:	da0f      	bge.n	8005158 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 020f 	and.w	r2, r3, #15
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	3338      	adds	r3, #56	; 0x38
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	3304      	adds	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	705a      	strb	r2, [r3, #1]
 8005156:	e00f      	b.n	8005178 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	3304      	adds	r3, #4
 8005170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005184:	883a      	ldrh	r2, [r7, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	78ba      	ldrb	r2, [r7, #2]
 800518e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051a2:	78bb      	ldrb	r3, [r7, #2]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d102      	bne.n	80051ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_PCD_EP_Open+0xaa>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e00e      	b.n	80051da <HAL_PCD_EP_Open+0xc8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f003 f942 	bl	8008454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	460b      	mov	r3, r1
 80051f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f2:	7afb      	ldrb	r3, [r7, #11]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	3304      	adds	r3, #4
 800520a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2200      	movs	r2, #0
 800521c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	b2da      	uxtb	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d102      	bne.n	800523e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	f003 fbc9 	bl	80089ec <USB_EP0StartXfer>
 800525a:	e008      	b.n	800526e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	6979      	ldr	r1, [r7, #20]
 800526a:	f003 f97b 	bl	8008564 <USB_EPStartXfer>
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	460b      	mov	r3, r1
 8005286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	f003 020f 	and.w	r2, r3, #15
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	3338      	adds	r3, #56	; 0x38
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	3304      	adds	r3, #4
 800529e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2201      	movs	r2, #1
 80052b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d102      	bne.n	80052d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052d2:	7afb      	ldrb	r3, [r7, #11]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6979      	ldr	r1, [r7, #20]
 80052ea:	f003 fb7f 	bl	80089ec <USB_EP0StartXfer>
 80052ee:	e008      	b.n	8005302 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	f003 f931 	bl	8008564 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d901      	bls.n	800532a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e050      	b.n	80053cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800532a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	da0f      	bge.n	8005352 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	3338      	adds	r3, #56	; 0x38
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	705a      	strb	r2, [r3, #1]
 8005350:	e00d      	b.n	800536e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_EP_SetStall+0x82>
 800538a:	2302      	movs	r3, #2
 800538c:	e01e      	b.n	80053cc <HAL_PCD_EP_SetStall+0xc0>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	4618      	mov	r0, r3
 800539e:	f003 fcd6 	bl	8008d4e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	b2d9      	uxtb	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053bc:	461a      	mov	r2, r3
 80053be:	f003 ff03 	bl	80091c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d901      	bls.n	80053f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e042      	b.n	8005478 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da0f      	bge.n	800541a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	3338      	adds	r3, #56	; 0x38
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	3304      	adds	r3, #4
 8005410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	705a      	strb	r2, [r3, #1]
 8005418:	e00f      	b.n	800543a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_PCD_EP_ClrStall+0x86>
 8005456:	2302      	movs	r3, #2
 8005458:	e00e      	b.n	8005478 <HAL_PCD_EP_ClrStall+0xa4>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	4618      	mov	r0, r3
 800546a:	f003 fcde 	bl	8008e2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	3338      	adds	r3, #56	; 0x38
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	3304      	adds	r3, #4
 80054a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d901      	bls.n	80054b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e06c      	b.n	8005592 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d902      	bls.n	80054d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3303      	adds	r3, #3
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054dc:	e02b      	b.n	8005536 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d902      	bls.n	80054fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3303      	adds	r3, #3
 80054fe:	089b      	lsrs	r3, r3, #2
 8005500:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68d9      	ldr	r1, [r3, #12]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005512:	b2db      	uxtb	r3, r3
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4603      	mov	r3, r0
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f003 fbba 	bl	8008c92 <USB_WritePacket>

    ep->xfer_buff  += len;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	441a      	add	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	441a      	add	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	b29b      	uxth	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	d809      	bhi.n	8005560 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005554:	429a      	cmp	r2, r3
 8005556:	d203      	bcs.n	8005560 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1be      	bne.n	80054de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	695a      	ldr	r2, [r3, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d811      	bhi.n	8005590 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	2201      	movs	r2, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	43db      	mvns	r3, r3
 8005586:	6939      	ldr	r1, [r7, #16]
 8005588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800558c:	4013      	ands	r3, r2
 800558e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3720      	adds	r7, #32
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	333c      	adds	r3, #60	; 0x3c
 80055b4:	3304      	adds	r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	f040 80a0 	bne.w	8005714 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d015      	beq.n	800560a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a72      	ldr	r2, [pc, #456]	; (80057ac <PCD_EP_OutXfrComplete_int+0x210>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f240 80dd 	bls.w	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80d7 	beq.w	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005606:	6093      	str	r3, [r2, #8]
 8005608:	e0cb      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2320      	movs	r3, #32
 8005624:	6093      	str	r3, [r2, #8]
 8005626:	e0bc      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 80b7 	bne.w	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a5d      	ldr	r2, [pc, #372]	; (80057ac <PCD_EP_OutXfrComplete_int+0x210>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d90f      	bls.n	800565c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	461a      	mov	r2, r3
 8005654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005658:	6093      	str	r3, [r2, #8]
 800565a:	e0a2      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800566e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	0159      	lsls	r1, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	440b      	add	r3, r1
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005682:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4403      	add	r3, r0
 8005692:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005696:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056aa:	6819      	ldr	r1, [r3, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4403      	add	r3, r0
 80056ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4419      	add	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4403      	add	r3, r0
 80056d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d114      	bne.n	8005706 <PCD_EP_OutXfrComplete_int+0x16a>
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056fe:	461a      	mov	r2, r3
 8005700:	2101      	movs	r1, #1
 8005702:	f003 fd61 	bl	80091c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f005 ff43 	bl	800b598 <HAL_PCD_DataOutStageCallback>
 8005712:	e046      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d124      	bne.n	8005766 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	461a      	mov	r2, r3
 8005734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	e032      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	461a      	mov	r2, r3
 8005754:	2320      	movs	r3, #32
 8005756:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f005 ff1a 	bl	800b598 <HAL_PCD_DataOutStageCallback>
 8005764:	e01d      	b.n	80057a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d114      	bne.n	8005796 <PCD_EP_OutXfrComplete_int+0x1fa>
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800578e:	461a      	mov	r2, r3
 8005790:	2100      	movs	r1, #0
 8005792:	f003 fd19 	bl	80091c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f005 fefb 	bl	800b598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	4f54300a 	.word	0x4f54300a
 80057b0:	4f54310a 	.word	0x4f54310a

080057b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	333c      	adds	r3, #60	; 0x3c
 80057cc:	3304      	adds	r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <PCD_EP_OutSetupPacket_int+0x88>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d90e      	bls.n	8005808 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f005 feb3 	bl	800b574 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a0a      	ldr	r2, [pc, #40]	; (800583c <PCD_EP_OutSetupPacket_int+0x88>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d90c      	bls.n	8005830 <PCD_EP_OutSetupPacket_int+0x7c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d108      	bne.n	8005830 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005828:	461a      	mov	r2, r3
 800582a:	2101      	movs	r1, #1
 800582c:	f003 fccc 	bl	80091c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	4f54300a 	.word	0x4f54300a

08005840 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
 800584c:	4613      	mov	r3, r2
 800584e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800585e:	883b      	ldrh	r3, [r7, #0]
 8005860:	0419      	lsls	r1, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	430a      	orrs	r2, r1
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
 800586c:	e028      	b.n	80058c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e00d      	b.n	800589e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	3340      	adds	r3, #64	; 0x40
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	3301      	adds	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
 800589e:	7bfa      	ldrb	r2, [r7, #15]
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3ec      	bcc.n	8005882 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058a8:	883b      	ldrh	r3, [r7, #0]
 80058aa:	0418      	lsls	r0, r3, #16
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	4302      	orrs	r2, r0
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e25b      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d075      	beq.n	8005a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005926:	4ba3      	ldr	r3, [pc, #652]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00c      	beq.n	800594c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4ba0      	ldr	r3, [pc, #640]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800593a:	2b08      	cmp	r3, #8
 800593c:	d112      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b9d      	ldr	r3, [pc, #628]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b99      	ldr	r3, [pc, #612]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05b      	beq.n	8005a10 <HAL_RCC_OscConfig+0x108>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d157      	bne.n	8005a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e236      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x74>
 800596e:	4b91      	ldr	r3, [pc, #580]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a90      	ldr	r2, [pc, #576]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e01d      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b8b      	ldr	r3, [pc, #556]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a8a      	ldr	r2, [pc, #552]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a87      	ldr	r2, [pc, #540]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 80059a0:	4b84      	ldr	r3, [pc, #528]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a83      	ldr	r2, [pc, #524]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a80      	ldr	r2, [pc, #512]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd fcbe 	bl	8003340 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fd fcba 	bl	8003340 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1fb      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b76      	ldr	r3, [pc, #472]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0xc0>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fd fcaa 	bl	8003340 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd fca6 	bl	8003340 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1e7      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	4b6c      	ldr	r3, [pc, #432]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0xe8>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d063      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a1e:	4b65      	ldr	r3, [pc, #404]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b62      	ldr	r3, [pc, #392]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d116      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e1bb      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4952      	ldr	r1, [pc, #328]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	e03a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b4f      	ldr	r3, [pc, #316]	; (8005bb8 <HAL_RCC_OscConfig+0x2b0>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fc5f 	bl	8003340 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fd fc5b 	bl	8003340 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e19c      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4940      	ldr	r1, [pc, #256]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <HAL_RCC_OscConfig+0x2b0>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fd fc3e 	bl	8003340 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fd fc3a 	bl	8003340 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e17b      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d030      	beq.n	8005b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <HAL_RCC_OscConfig+0x2b4>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fd fc1e 	bl	8003340 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fd fc1a 	bl	8003340 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e15b      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x200>
 8005b26:	e015      	b.n	8005b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_OscConfig+0x2b4>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fd fc07 	bl	8003340 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fd fc03 	bl	8003340 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e144      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80a0 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	6413      	str	r3, [r2, #64]	; 0x40
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d121      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005baa:	f7fd fbc9 	bl	8003340 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	e011      	b.n	8005bd6 <HAL_RCC_OscConfig+0x2ce>
 8005bb2:	bf00      	nop
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470000 	.word	0x42470000
 8005bbc:	42470e80 	.word	0x42470e80
 8005bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc4:	f7fd fbbc 	bl	8003340 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e0fd      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd6:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <HAL_RCC_OscConfig+0x4d4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
 8005bea:	4b7d      	ldr	r3, [pc, #500]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	4a7c      	ldr	r2, [pc, #496]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf6:	e01c      	b.n	8005c32 <HAL_RCC_OscConfig+0x32a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d10c      	bne.n	8005c1a <HAL_RCC_OscConfig+0x312>
 8005c00:	4b77      	ldr	r3, [pc, #476]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a76      	ldr	r2, [pc, #472]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	4b74      	ldr	r3, [pc, #464]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a73      	ldr	r2, [pc, #460]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
 8005c18:	e00b      	b.n	8005c32 <HAL_RCC_OscConfig+0x32a>
 8005c1a:	4b71      	ldr	r3, [pc, #452]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a70      	ldr	r2, [pc, #448]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
 8005c26:	4b6e      	ldr	r3, [pc, #440]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a6d      	ldr	r2, [pc, #436]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d015      	beq.n	8005c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fd fb81 	bl	8003340 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fd fb7d 	bl	8003340 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0bc      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	4b61      	ldr	r3, [pc, #388]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0ee      	beq.n	8005c42 <HAL_RCC_OscConfig+0x33a>
 8005c64:	e014      	b.n	8005c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c66:	f7fd fb6b 	bl	8003340 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6c:	e00a      	b.n	8005c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f7fd fb67 	bl	8003340 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0a6      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c84:	4b56      	ldr	r3, [pc, #344]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ee      	bne.n	8005c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d105      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c96:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a51      	ldr	r2, [pc, #324]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8092 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d05c      	beq.n	8005d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d141      	bne.n	8005d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc0:	4b48      	ldr	r3, [pc, #288]	; (8005de4 <HAL_RCC_OscConfig+0x4dc>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fd fb3b 	bl	8003340 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fd fb37 	bl	8003340 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e078      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce0:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	019b      	lsls	r3, r3, #6
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	3b01      	subs	r3, #1
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	4933      	ldr	r1, [pc, #204]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d16:	4b33      	ldr	r3, [pc, #204]	; (8005de4 <HAL_RCC_OscConfig+0x4dc>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd fb10 	bl	8003340 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fd fb0c 	bl	8003340 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e04d      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x41c>
 8005d42:	e045      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_RCC_OscConfig+0x4dc>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7fd faf9 	bl	8003340 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fd faf5 	bl	8003340 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e036      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d64:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f0      	bne.n	8005d52 <HAL_RCC_OscConfig+0x44a>
 8005d70:	e02e      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e029      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <HAL_RCC_OscConfig+0x4d8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d11c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d115      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da6:	4013      	ands	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10d      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d106      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	40023800 	.word	0x40023800
 8005de4:	42470060 	.word	0x42470060

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0cc      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b68      	ldr	r3, [pc, #416]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d90c      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b65      	ldr	r3, [pc, #404]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b63      	ldr	r3, [pc, #396]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0b8      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e3c:	4b59      	ldr	r3, [pc, #356]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a58      	ldr	r2, [pc, #352]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e54:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e60:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	494d      	ldr	r1, [pc, #308]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d044      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b47      	ldr	r3, [pc, #284]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d119      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e07f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e06f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e067      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec6:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 0203 	bic.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4934      	ldr	r1, [pc, #208]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ed8:	f7fd fa32 	bl	8003340 <HAL_GetTick>
 8005edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee0:	f7fd fa2e 	bl	8003340 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e04f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 020c 	and.w	r2, r3, #12
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1eb      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d20c      	bcs.n	8005f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e032      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f3c:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4916      	ldr	r1, [pc, #88]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	490e      	ldr	r1, [pc, #56]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f6e:	f000 f889 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8005f72:	4601      	mov	r1, r0
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f80:	5cd3      	ldrb	r3, [r2, r3]
 8005f82:	fa21 f303 	lsr.w	r3, r1, r3
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fd f992 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40023c00 	.word	0x40023c00
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	0800bd58 	.word	0x0800bd58
 8005fac:	20000000 	.word	0x20000000
 8005fb0:	20000004 	.word	0x20000004

08005fb4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d129      	bne.n	800601a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b28      	ldr	r3, [pc, #160]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fec:	2303      	movs	r3, #3
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005ff8:	f107 031c 	add.w	r3, r7, #28
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	481f      	ldr	r0, [pc, #124]	; (800607c <HAL_RCC_MCOConfig+0xc8>)
 8006000:	f7fe f844 	bl	800408c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006004:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	430b      	orrs	r3, r1
 8006012:	4919      	ldr	r1, [pc, #100]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8006014:	4313      	orrs	r3, r2
 8006016:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006018:	e029      	b.n	800606e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	4b16      	ldr	r3, [pc, #88]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 8006024:	f043 0304 	orr.w	r3, r3, #4
 8006028:	6313      	str	r3, [r2, #48]	; 0x30
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800603a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603c:	2302      	movs	r3, #2
 800603e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006040:	2303      	movs	r3, #3
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2300      	movs	r3, #0
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800604c:	f107 031c 	add.w	r3, r7, #28
 8006050:	4619      	mov	r1, r3
 8006052:	480b      	ldr	r0, [pc, #44]	; (8006080 <HAL_RCC_MCOConfig+0xcc>)
 8006054:	f7fe f81a 	bl	800408c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	00d9      	lsls	r1, r3, #3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	430b      	orrs	r3, r1
 8006068:	4903      	ldr	r1, [pc, #12]	; (8006078 <HAL_RCC_MCOConfig+0xc4>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
}
 800606e:	bf00      	nop
 8006070:	3730      	adds	r7, #48	; 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800
 800607c:	40020000 	.word	0x40020000
 8006080:	40020800 	.word	0x40020800

08006084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	2300      	movs	r3, #0
 8006094:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800609a:	4b63      	ldr	r3, [pc, #396]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d007      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x32>
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d008      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0x38>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 80b4 	bne.w	8006218 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4b5e      	ldr	r3, [pc, #376]	; (800622c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80060b2:	60bb      	str	r3, [r7, #8]
       break;
 80060b4:	e0b3      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060b6:	4b5e      	ldr	r3, [pc, #376]	; (8006230 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80060b8:	60bb      	str	r3, [r7, #8]
      break;
 80060ba:	e0b0      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060bc:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060c6:	4b58      	ldr	r3, [pc, #352]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04a      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d2:	4b55      	ldr	r3, [pc, #340]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	099b      	lsrs	r3, r3, #6
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea03 0501 	and.w	r5, r3, r1
 80060e8:	ea04 0602 	and.w	r6, r4, r2
 80060ec:	4629      	mov	r1, r5
 80060ee:	4632      	mov	r2, r6
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	0154      	lsls	r4, r2, #5
 80060fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060fe:	014b      	lsls	r3, r1, #5
 8006100:	4619      	mov	r1, r3
 8006102:	4622      	mov	r2, r4
 8006104:	1b49      	subs	r1, r1, r5
 8006106:	eb62 0206 	sbc.w	r2, r2, r6
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	0194      	lsls	r4, r2, #6
 8006114:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006118:	018b      	lsls	r3, r1, #6
 800611a:	1a5b      	subs	r3, r3, r1
 800611c:	eb64 0402 	sbc.w	r4, r4, r2
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	00e2      	lsls	r2, r4, #3
 800612a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800612e:	00d9      	lsls	r1, r3, #3
 8006130:	460b      	mov	r3, r1
 8006132:	4614      	mov	r4, r2
 8006134:	195b      	adds	r3, r3, r5
 8006136:	eb44 0406 	adc.w	r4, r4, r6
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	0262      	lsls	r2, r4, #9
 8006144:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006148:	0259      	lsls	r1, r3, #9
 800614a:	460b      	mov	r3, r1
 800614c:	4614      	mov	r4, r2
 800614e:	4618      	mov	r0, r3
 8006150:	4621      	mov	r1, r4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f04f 0400 	mov.w	r4, #0
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	f7fa fcd2 	bl	8000b04 <__aeabi_uldivmod>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e049      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006168:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	099b      	lsrs	r3, r3, #6
 800616e:	f04f 0400 	mov.w	r4, #0
 8006172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	ea03 0501 	and.w	r5, r3, r1
 800617e:	ea04 0602 	and.w	r6, r4, r2
 8006182:	4629      	mov	r1, r5
 8006184:	4632      	mov	r2, r6
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	f04f 0400 	mov.w	r4, #0
 800618e:	0154      	lsls	r4, r2, #5
 8006190:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006194:	014b      	lsls	r3, r1, #5
 8006196:	4619      	mov	r1, r3
 8006198:	4622      	mov	r2, r4
 800619a:	1b49      	subs	r1, r1, r5
 800619c:	eb62 0206 	sbc.w	r2, r2, r6
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	f04f 0400 	mov.w	r4, #0
 80061a8:	0194      	lsls	r4, r2, #6
 80061aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061ae:	018b      	lsls	r3, r1, #6
 80061b0:	1a5b      	subs	r3, r3, r1
 80061b2:	eb64 0402 	sbc.w	r4, r4, r2
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	00e2      	lsls	r2, r4, #3
 80061c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061c4:	00d9      	lsls	r1, r3, #3
 80061c6:	460b      	mov	r3, r1
 80061c8:	4614      	mov	r4, r2
 80061ca:	195b      	adds	r3, r3, r5
 80061cc:	eb44 0406 	adc.w	r4, r4, r6
 80061d0:	f04f 0100 	mov.w	r1, #0
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	02a2      	lsls	r2, r4, #10
 80061da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80061de:	0299      	lsls	r1, r3, #10
 80061e0:	460b      	mov	r3, r1
 80061e2:	4614      	mov	r4, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	4621      	mov	r1, r4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f04f 0400 	mov.w	r4, #0
 80061ee:	461a      	mov	r2, r3
 80061f0:	4623      	mov	r3, r4
 80061f2:	f7fa fc87 	bl	8000b04 <__aeabi_uldivmod>
 80061f6:	4603      	mov	r3, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	3301      	adds	r3, #1
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	60bb      	str	r3, [r7, #8]
      break;
 8006216:	e002      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800621a:	60bb      	str	r3, [r7, #8]
      break;
 800621c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800621e:	68bb      	ldr	r3, [r7, #8]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006228:	40023800 	.word	0x40023800
 800622c:	00f42400 	.word	0x00f42400
 8006230:	007a1200 	.word	0x007a1200

08006234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006238:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_RCC_GetHCLKFreq+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000000 	.word	0x20000000

0800624c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006250:	f7ff fff0 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006254:	4601      	mov	r1, r0
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	0a9b      	lsrs	r3, r3, #10
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4a03      	ldr	r2, [pc, #12]	; (8006270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006262:	5cd3      	ldrb	r3, [r2, r3]
 8006264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40023800 	.word	0x40023800
 8006270:	0800bd68 	.word	0x0800bd68

08006274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006278:	f7ff ffdc 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 800627c:	4601      	mov	r1, r0
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	0b5b      	lsrs	r3, r3, #13
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4a03      	ldr	r2, [pc, #12]	; (8006298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40023800 	.word	0x40023800
 8006298:	0800bd68 	.word	0x0800bd68

0800629c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e01c      	b.n	80062e8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	795b      	ldrb	r3, [r3, #5]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fc fcb2 	bl	8002c28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0204 	orr.w	r2, r2, #4
 80062d8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e05d      	b.n	80063be <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fc fca8 	bl	8002c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	f003 0104 	and.w	r1, r3, #4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	d104      	bne.n	800639e <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800639c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b088      	sub	sp, #32
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_SPI_Transmit+0x22>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e140      	b.n	800666a <HAL_SPI_Transmit+0x2a4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063f0:	f7fc ffa6 	bl	8003340 <HAL_GetTick>
 80063f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d002      	beq.n	800640c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006406:	2302      	movs	r3, #2
 8006408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800640a:	e125      	b.n	8006658 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Transmit+0x52>
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800641c:	e11c      	b.n	8006658 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2203      	movs	r2, #3
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d107      	bne.n	8006476 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006474:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	d10f      	bne.n	80064a0 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800649e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d007      	beq.n	80064be <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c6:	d14b      	bne.n	8006560 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x110>
 80064d0:	8afb      	ldrh	r3, [r7, #22]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d13e      	bne.n	8006554 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	1c9a      	adds	r2, r3, #2
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064fa:	e02b      	b.n	8006554 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b02      	cmp	r3, #2
 8006508:	d112      	bne.n	8006530 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	86da      	strh	r2, [r3, #54]	; 0x36
 800652e:	e011      	b.n	8006554 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006530:	f7fc ff06 	bl	8003340 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d803      	bhi.n	8006548 <HAL_SPI_Transmit+0x182>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d102      	bne.n	800654e <HAL_SPI_Transmit+0x188>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006552:	e081      	b.n	8006658 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ce      	bne.n	80064fc <HAL_SPI_Transmit+0x136>
 800655e:	e04c      	b.n	80065fa <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SPI_Transmit+0x1a8>
 8006568:	8afb      	ldrh	r3, [r7, #22]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d140      	bne.n	80065f0 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	7812      	ldrb	r2, [r2, #0]
 800657a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006594:	e02c      	b.n	80065f0 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d113      	bne.n	80065cc <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ca:	e011      	b.n	80065f0 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065cc:	f7fc feb8 	bl	8003340 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d803      	bhi.n	80065e4 <HAL_SPI_Transmit+0x21e>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_Transmit+0x224>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065ee:	e033      	b.n	8006658 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1cd      	bne.n	8006596 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006602:	d107      	bne.n	8006614 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006612:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f895 	bl	8006748 <SPI_EndRxTxTransaction>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e000      	b.n	8006658 <HAL_SPI_Transmit+0x292>
  }

error:
 8006656:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006668:	7ffb      	ldrb	r3, [r7, #31]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006682:	e04c      	b.n	800671e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d048      	beq.n	800671e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800668c:	f7fc fe58 	bl	8003340 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d902      	bls.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d13d      	bne.n	800671e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ba:	d111      	bne.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c4:	d004      	beq.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ce:	d107      	bne.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e8:	d10f      	bne.n	800670a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00f      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d1a3      	bne.n	8006684 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <SPI_EndRxTxTransaction+0x7c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <SPI_EndRxTxTransaction+0x80>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	0d5b      	lsrs	r3, r3, #21
 8006760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006772:	d112      	bne.n	800679a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff77 	bl	8006672 <SPI_WaitFlagStateUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e00f      	b.n	80067ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b80      	cmp	r3, #128	; 0x80
 80067b2:	d0f2      	beq.n	800679a <SPI_EndRxTxTransaction+0x52>
 80067b4:	e000      	b.n	80067b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067b6:	bf00      	nop
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000000 	.word	0x20000000
 80067c8:	165e9f81 	.word	0x165e9f81

080067cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e01d      	b.n	800681a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fc fb80 	bl	8002ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f000 fa8e 	bl	8006d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e01d      	b.n	8006870 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f815 	bl	8006878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f000 fa63 	bl	8006d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e01d      	b.n	80068da <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f815 	bl	80068e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 fa2e 	bl	8006d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIM_IC_ConfigChannel+0x1a>
 800690c:	2302      	movs	r3, #2
 800690e:	e08a      	b.n	8006a26 <HAL_TIM_IC_ConfigChannel+0x130>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11b      	bne.n	800695e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f000 fc49 	bl	80071cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 020c 	bic.w	r2, r2, #12
 8006948:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6999      	ldr	r1, [r3, #24]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	619a      	str	r2, [r3, #24]
 800695c:	e05a      	b.n	8006a14 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d11c      	bne.n	800699e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6819      	ldr	r1, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f000 fccd 	bl	8007312 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006986:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
 800699c:	e03a      	b.n	8006a14 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d11b      	bne.n	80069dc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f000 fd1a 	bl	80073ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 020c 	bic.w	r2, r2, #12
 80069c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69d9      	ldr	r1, [r3, #28]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	61da      	str	r2, [r3, #28]
 80069da:	e01b      	b.n	8006a14 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f000 fd3a 	bl	8007464 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69d9      	ldr	r1, [r3, #28]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	021a      	lsls	r2, r3, #8
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0b4      	b.n	8006bb4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	f200 809f 	bhi.w	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a9d 	.word	0x08006a9d
 8006a6c:	08006ba1 	.word	0x08006ba1
 8006a70:	08006ba1 	.word	0x08006ba1
 8006a74:	08006ba1 	.word	0x08006ba1
 8006a78:	08006add 	.word	0x08006add
 8006a7c:	08006ba1 	.word	0x08006ba1
 8006a80:	08006ba1 	.word	0x08006ba1
 8006a84:	08006ba1 	.word	0x08006ba1
 8006a88:	08006b1f 	.word	0x08006b1f
 8006a8c:	08006ba1 	.word	0x08006ba1
 8006a90:	08006ba1 	.word	0x08006ba1
 8006a94:	08006ba1 	.word	0x08006ba1
 8006a98:	08006b5f 	.word	0x08006b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f9e2 	bl	8006e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0204 	bic.w	r2, r2, #4
 8006ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6999      	ldr	r1, [r3, #24]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	619a      	str	r2, [r3, #24]
      break;
 8006ada:	e062      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa32 	bl	8006f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6999      	ldr	r1, [r3, #24]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	021a      	lsls	r2, r3, #8
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	619a      	str	r2, [r3, #24]
      break;
 8006b1c:	e041      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fa87 	bl	8007038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0208 	orr.w	r2, r2, #8
 8006b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69da      	ldr	r2, [r3, #28]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0204 	bic.w	r2, r2, #4
 8006b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69d9      	ldr	r1, [r3, #28]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	61da      	str	r2, [r3, #28]
      break;
 8006b5c:	e021      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fadb 	bl	8007120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	021a      	lsls	r2, r3, #8
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	61da      	str	r2, [r3, #28]
      break;
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006ba0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIM_ConfigClockSource+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e0a6      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x166>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d067      	beq.n	8006cdc <HAL_TIM_ConfigClockSource+0x120>
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d80b      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x6c>
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d073      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0x140>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d802      	bhi.n	8006c1e <HAL_TIM_ConfigClockSource+0x62>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d06f      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c1c:	e078      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d06c      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0x140>
 8006c22:	2b30      	cmp	r3, #48	; 0x30
 8006c24:	d06a      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006c26:	e073      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c28:	2b70      	cmp	r3, #112	; 0x70
 8006c2a:	d00d      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x8c>
 8006c2c:	2b70      	cmp	r3, #112	; 0x70
 8006c2e:	d804      	bhi.n	8006c3a <HAL_TIM_ConfigClockSource+0x7e>
 8006c30:	2b50      	cmp	r3, #80	; 0x50
 8006c32:	d033      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0xe0>
 8006c34:	2b60      	cmp	r3, #96	; 0x60
 8006c36:	d041      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006c38:	e06a      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3e:	d066      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x152>
 8006c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c44:	d017      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006c46:	e063      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fc5c 	bl	8007514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	609a      	str	r2, [r3, #8]
      break;
 8006c74:	e04c      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6899      	ldr	r1, [r3, #8]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f000 fc45 	bl	8007514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c98:	609a      	str	r2, [r3, #8]
      break;
 8006c9a:	e039      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f000 fb03 	bl	80072b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2150      	movs	r1, #80	; 0x50
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fc12 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006cba:	e029      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f000 fb5f 	bl	800738c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2160      	movs	r1, #96	; 0x60
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc02 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006cda:	e019      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f000 fae3 	bl	80072b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2140      	movs	r1, #64	; 0x40
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fbf2 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006cfa:	e009      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f000 fbe9 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006d0c:	e000      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a40      	ldr	r2, [pc, #256]	; (8006e40 <TIM_Base_SetConfig+0x114>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4a:	d00f      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a3d      	ldr	r2, [pc, #244]	; (8006e44 <TIM_Base_SetConfig+0x118>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00b      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a3c      	ldr	r2, [pc, #240]	; (8006e48 <TIM_Base_SetConfig+0x11c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d007      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a3b      	ldr	r2, [pc, #236]	; (8006e4c <TIM_Base_SetConfig+0x120>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a3a      	ldr	r2, [pc, #232]	; (8006e50 <TIM_Base_SetConfig+0x124>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2f      	ldr	r2, [pc, #188]	; (8006e40 <TIM_Base_SetConfig+0x114>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8c:	d027      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2c      	ldr	r2, [pc, #176]	; (8006e44 <TIM_Base_SetConfig+0x118>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d023      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2b      	ldr	r2, [pc, #172]	; (8006e48 <TIM_Base_SetConfig+0x11c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01f      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <TIM_Base_SetConfig+0x120>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a29      	ldr	r2, [pc, #164]	; (8006e50 <TIM_Base_SetConfig+0x124>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d017      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <TIM_Base_SetConfig+0x128>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <TIM_Base_SetConfig+0x12c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00f      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <TIM_Base_SetConfig+0x130>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <TIM_Base_SetConfig+0x134>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <TIM_Base_SetConfig+0x138>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <TIM_Base_SetConfig+0x13c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0a      	ldr	r2, [pc, #40]	; (8006e40 <TIM_Base_SetConfig+0x114>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0xf8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	; (8006e50 <TIM_Base_SetConfig+0x124>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d103      	bne.n	8006e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	615a      	str	r2, [r3, #20]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800
 8006e60:	40001800 	.word	0x40001800
 8006e64:	40001c00 	.word	0x40001c00
 8006e68:	40002000 	.word	0x40002000

08006e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0201 	bic.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 0302 	bic.w	r3, r3, #2
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <TIM_OC1_SetConfig+0xd8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x64>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <TIM_OC1_SetConfig+0xdc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10c      	bne.n	8006eea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0308 	bic.w	r3, r3, #8
 8006ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0304 	bic.w	r3, r3, #4
 8006ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <TIM_OC1_SetConfig+0xd8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC1_SetConfig+0x8e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <TIM_OC1_SetConfig+0xdc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d111      	bne.n	8006f1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40010400 	.word	0x40010400

08006f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f023 0210 	bic.w	r2, r3, #16
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0320 	bic.w	r3, r3, #32
 8006f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a22      	ldr	r2, [pc, #136]	; (8007030 <TIM_OC2_SetConfig+0xe4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC2_SetConfig+0x68>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a21      	ldr	r2, [pc, #132]	; (8007034 <TIM_OC2_SetConfig+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10d      	bne.n	8006fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <TIM_OC2_SetConfig+0xe4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC2_SetConfig+0x94>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <TIM_OC2_SetConfig+0xe8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d113      	bne.n	8007008 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40010000 	.word	0x40010000
 8007034:	40010400 	.word	0x40010400

08007038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <TIM_OC3_SetConfig+0xe0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC3_SetConfig+0x66>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <TIM_OC3_SetConfig+0xe4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d10d      	bne.n	80070ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a16      	ldr	r2, [pc, #88]	; (8007118 <TIM_OC3_SetConfig+0xe0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_OC3_SetConfig+0x92>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a15      	ldr	r2, [pc, #84]	; (800711c <TIM_OC3_SetConfig+0xe4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d113      	bne.n	80070f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	621a      	str	r2, [r3, #32]
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400

08007120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800716a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	031b      	lsls	r3, r3, #12
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a12      	ldr	r2, [pc, #72]	; (80071c4 <TIM_OC4_SetConfig+0xa4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC4_SetConfig+0x68>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <TIM_OC4_SetConfig+0xa8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d109      	bne.n	800719c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	019b      	lsls	r3, r3, #6
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010400 	.word	0x40010400

080071cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a28      	ldr	r2, [pc, #160]	; (8007298 <TIM_TI1_SetConfig+0xcc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01b      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d017      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a25      	ldr	r2, [pc, #148]	; (800729c <TIM_TI1_SetConfig+0xd0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a24      	ldr	r2, [pc, #144]	; (80072a0 <TIM_TI1_SetConfig+0xd4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00f      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a23      	ldr	r2, [pc, #140]	; (80072a4 <TIM_TI1_SetConfig+0xd8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00b      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <TIM_TI1_SetConfig+0xdc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d007      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a21      	ldr	r2, [pc, #132]	; (80072ac <TIM_TI1_SetConfig+0xe0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <TIM_TI1_SetConfig+0x66>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <TIM_TI1_SetConfig+0xe4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <TIM_TI1_SetConfig+0x6a>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <TIM_TI1_SetConfig+0x6c>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e003      	b.n	8007256 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800725c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	b2db      	uxtb	r3, r3
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f023 030a 	bic.w	r3, r3, #10
 8007270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f003 030a 	and.w	r3, r3, #10
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40010000 	.word	0x40010000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40010400 	.word	0x40010400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40001800 	.word	0x40001800

080072b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f023 0201 	bic.w	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f023 030a 	bic.w	r3, r3, #10
 80072f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007312:	b480      	push	{r7}
 8007314:	b087      	sub	sp, #28
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f023 0210 	bic.w	r2, r3, #16
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	031b      	lsls	r3, r3, #12
 8007356:	b29b      	uxth	r3, r3
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007364:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f023 0210 	bic.w	r2, r3, #16
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	031b      	lsls	r3, r3, #12
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	621a      	str	r2, [r3, #32]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	b2db      	uxtb	r3, r3
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800743c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	621a      	str	r2, [r3, #32]
}
 8007458:	bf00      	nop
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	031b      	lsls	r3, r3, #12
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	031b      	lsls	r3, r3, #12
 80074bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f043 0307 	orr.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800752e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	021a      	lsls	r2, r3, #8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	431a      	orrs	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4313      	orrs	r3, r2
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e05a      	b.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a21      	ldr	r2, [pc, #132]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d01d      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1a      	ldr	r2, [pc, #104]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a18      	ldr	r2, [pc, #96]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d10c      	bne.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	4313      	orrs	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40010400 	.word	0x40010400
 8007644:	40014000 	.word	0x40014000
 8007648:	40001800 	.word	0x40001800

0800764c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e03f      	b.n	80076de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fb fcc2 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2224      	movs	r2, #36	; 0x24
 800767c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f829 	bl	80076e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695a      	ldr	r2, [r3, #20]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800772a:	f023 030c 	bic.w	r3, r3, #12
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	68f9      	ldr	r1, [r7, #12]
 8007734:	430b      	orrs	r3, r1
 8007736:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007756:	f040 818b 	bne.w	8007a70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4ac1      	ldr	r2, [pc, #772]	; (8007a64 <UART_SetConfig+0x37c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d005      	beq.n	8007770 <UART_SetConfig+0x88>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4abf      	ldr	r2, [pc, #764]	; (8007a68 <UART_SetConfig+0x380>)
 800776a:	4293      	cmp	r3, r2
 800776c:	f040 80bd 	bne.w	80078ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007770:	f7fe fd80 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 8007774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	461d      	mov	r5, r3
 800777a:	f04f 0600 	mov.w	r6, #0
 800777e:	46a8      	mov	r8, r5
 8007780:	46b1      	mov	r9, r6
 8007782:	eb18 0308 	adds.w	r3, r8, r8
 8007786:	eb49 0409 	adc.w	r4, r9, r9
 800778a:	4698      	mov	r8, r3
 800778c:	46a1      	mov	r9, r4
 800778e:	eb18 0805 	adds.w	r8, r8, r5
 8007792:	eb49 0906 	adc.w	r9, r9, r6
 8007796:	f04f 0100 	mov.w	r1, #0
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077aa:	4688      	mov	r8, r1
 80077ac:	4691      	mov	r9, r2
 80077ae:	eb18 0005 	adds.w	r0, r8, r5
 80077b2:	eb49 0106 	adc.w	r1, r9, r6
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	461d      	mov	r5, r3
 80077bc:	f04f 0600 	mov.w	r6, #0
 80077c0:	196b      	adds	r3, r5, r5
 80077c2:	eb46 0406 	adc.w	r4, r6, r6
 80077c6:	461a      	mov	r2, r3
 80077c8:	4623      	mov	r3, r4
 80077ca:	f7f9 f99b 	bl	8000b04 <__aeabi_uldivmod>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	461a      	mov	r2, r3
 80077d4:	4ba5      	ldr	r3, [pc, #660]	; (8007a6c <UART_SetConfig+0x384>)
 80077d6:	fba3 2302 	umull	r2, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	461d      	mov	r5, r3
 80077e4:	f04f 0600 	mov.w	r6, #0
 80077e8:	46a9      	mov	r9, r5
 80077ea:	46b2      	mov	sl, r6
 80077ec:	eb19 0309 	adds.w	r3, r9, r9
 80077f0:	eb4a 040a 	adc.w	r4, sl, sl
 80077f4:	4699      	mov	r9, r3
 80077f6:	46a2      	mov	sl, r4
 80077f8:	eb19 0905 	adds.w	r9, r9, r5
 80077fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007800:	f04f 0100 	mov.w	r1, #0
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800780c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007814:	4689      	mov	r9, r1
 8007816:	4692      	mov	sl, r2
 8007818:	eb19 0005 	adds.w	r0, r9, r5
 800781c:	eb4a 0106 	adc.w	r1, sl, r6
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	461d      	mov	r5, r3
 8007826:	f04f 0600 	mov.w	r6, #0
 800782a:	196b      	adds	r3, r5, r5
 800782c:	eb46 0406 	adc.w	r4, r6, r6
 8007830:	461a      	mov	r2, r3
 8007832:	4623      	mov	r3, r4
 8007834:	f7f9 f966 	bl	8000b04 <__aeabi_uldivmod>
 8007838:	4603      	mov	r3, r0
 800783a:	460c      	mov	r4, r1
 800783c:	461a      	mov	r2, r3
 800783e:	4b8b      	ldr	r3, [pc, #556]	; (8007a6c <UART_SetConfig+0x384>)
 8007840:	fba3 1302 	umull	r1, r3, r3, r2
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	2164      	movs	r1, #100	; 0x64
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	3332      	adds	r3, #50	; 0x32
 8007852:	4a86      	ldr	r2, [pc, #536]	; (8007a6c <UART_SetConfig+0x384>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007860:	4498      	add	r8, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	461d      	mov	r5, r3
 8007866:	f04f 0600 	mov.w	r6, #0
 800786a:	46a9      	mov	r9, r5
 800786c:	46b2      	mov	sl, r6
 800786e:	eb19 0309 	adds.w	r3, r9, r9
 8007872:	eb4a 040a 	adc.w	r4, sl, sl
 8007876:	4699      	mov	r9, r3
 8007878:	46a2      	mov	sl, r4
 800787a:	eb19 0905 	adds.w	r9, r9, r5
 800787e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007882:	f04f 0100 	mov.w	r1, #0
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800788e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007896:	4689      	mov	r9, r1
 8007898:	4692      	mov	sl, r2
 800789a:	eb19 0005 	adds.w	r0, r9, r5
 800789e:	eb4a 0106 	adc.w	r1, sl, r6
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	461d      	mov	r5, r3
 80078a8:	f04f 0600 	mov.w	r6, #0
 80078ac:	196b      	adds	r3, r5, r5
 80078ae:	eb46 0406 	adc.w	r4, r6, r6
 80078b2:	461a      	mov	r2, r3
 80078b4:	4623      	mov	r3, r4
 80078b6:	f7f9 f925 	bl	8000b04 <__aeabi_uldivmod>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	461a      	mov	r2, r3
 80078c0:	4b6a      	ldr	r3, [pc, #424]	; (8007a6c <UART_SetConfig+0x384>)
 80078c2:	fba3 1302 	umull	r1, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2164      	movs	r1, #100	; 0x64
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	3332      	adds	r3, #50	; 0x32
 80078d4:	4a65      	ldr	r2, [pc, #404]	; (8007a6c <UART_SetConfig+0x384>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	f003 0207 	and.w	r2, r3, #7
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4442      	add	r2, r8
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	e26f      	b.n	8007dca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ea:	f7fe fcaf 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 80078ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	461d      	mov	r5, r3
 80078f4:	f04f 0600 	mov.w	r6, #0
 80078f8:	46a8      	mov	r8, r5
 80078fa:	46b1      	mov	r9, r6
 80078fc:	eb18 0308 	adds.w	r3, r8, r8
 8007900:	eb49 0409 	adc.w	r4, r9, r9
 8007904:	4698      	mov	r8, r3
 8007906:	46a1      	mov	r9, r4
 8007908:	eb18 0805 	adds.w	r8, r8, r5
 800790c:	eb49 0906 	adc.w	r9, r9, r6
 8007910:	f04f 0100 	mov.w	r1, #0
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800791c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007924:	4688      	mov	r8, r1
 8007926:	4691      	mov	r9, r2
 8007928:	eb18 0005 	adds.w	r0, r8, r5
 800792c:	eb49 0106 	adc.w	r1, r9, r6
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	461d      	mov	r5, r3
 8007936:	f04f 0600 	mov.w	r6, #0
 800793a:	196b      	adds	r3, r5, r5
 800793c:	eb46 0406 	adc.w	r4, r6, r6
 8007940:	461a      	mov	r2, r3
 8007942:	4623      	mov	r3, r4
 8007944:	f7f9 f8de 	bl	8000b04 <__aeabi_uldivmod>
 8007948:	4603      	mov	r3, r0
 800794a:	460c      	mov	r4, r1
 800794c:	461a      	mov	r2, r3
 800794e:	4b47      	ldr	r3, [pc, #284]	; (8007a6c <UART_SetConfig+0x384>)
 8007950:	fba3 2302 	umull	r2, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	461d      	mov	r5, r3
 800795e:	f04f 0600 	mov.w	r6, #0
 8007962:	46a9      	mov	r9, r5
 8007964:	46b2      	mov	sl, r6
 8007966:	eb19 0309 	adds.w	r3, r9, r9
 800796a:	eb4a 040a 	adc.w	r4, sl, sl
 800796e:	4699      	mov	r9, r3
 8007970:	46a2      	mov	sl, r4
 8007972:	eb19 0905 	adds.w	r9, r9, r5
 8007976:	eb4a 0a06 	adc.w	sl, sl, r6
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800798a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800798e:	4689      	mov	r9, r1
 8007990:	4692      	mov	sl, r2
 8007992:	eb19 0005 	adds.w	r0, r9, r5
 8007996:	eb4a 0106 	adc.w	r1, sl, r6
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	461d      	mov	r5, r3
 80079a0:	f04f 0600 	mov.w	r6, #0
 80079a4:	196b      	adds	r3, r5, r5
 80079a6:	eb46 0406 	adc.w	r4, r6, r6
 80079aa:	461a      	mov	r2, r3
 80079ac:	4623      	mov	r3, r4
 80079ae:	f7f9 f8a9 	bl	8000b04 <__aeabi_uldivmod>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	461a      	mov	r2, r3
 80079b8:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <UART_SetConfig+0x384>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <UART_SetConfig+0x384>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079da:	4498      	add	r8, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	461d      	mov	r5, r3
 80079e0:	f04f 0600 	mov.w	r6, #0
 80079e4:	46a9      	mov	r9, r5
 80079e6:	46b2      	mov	sl, r6
 80079e8:	eb19 0309 	adds.w	r3, r9, r9
 80079ec:	eb4a 040a 	adc.w	r4, sl, sl
 80079f0:	4699      	mov	r9, r3
 80079f2:	46a2      	mov	sl, r4
 80079f4:	eb19 0905 	adds.w	r9, r9, r5
 80079f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a10:	4689      	mov	r9, r1
 8007a12:	4692      	mov	sl, r2
 8007a14:	eb19 0005 	adds.w	r0, r9, r5
 8007a18:	eb4a 0106 	adc.w	r1, sl, r6
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	461d      	mov	r5, r3
 8007a22:	f04f 0600 	mov.w	r6, #0
 8007a26:	196b      	adds	r3, r5, r5
 8007a28:	eb46 0406 	adc.w	r4, r6, r6
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	f7f9 f868 	bl	8000b04 <__aeabi_uldivmod>
 8007a34:	4603      	mov	r3, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <UART_SetConfig+0x384>)
 8007a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	2164      	movs	r1, #100	; 0x64
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	3332      	adds	r3, #50	; 0x32
 8007a4e:	4a07      	ldr	r2, [pc, #28]	; (8007a6c <UART_SetConfig+0x384>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 0207 	and.w	r2, r3, #7
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4442      	add	r2, r8
 8007a60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a62:	e1b2      	b.n	8007dca <UART_SetConfig+0x6e2>
 8007a64:	40011000 	.word	0x40011000
 8007a68:	40011400 	.word	0x40011400
 8007a6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4ad7      	ldr	r2, [pc, #860]	; (8007dd4 <UART_SetConfig+0x6ec>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d005      	beq.n	8007a86 <UART_SetConfig+0x39e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4ad6      	ldr	r2, [pc, #856]	; (8007dd8 <UART_SetConfig+0x6f0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	f040 80d1 	bne.w	8007c28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a86:	f7fe fbf5 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 8007a8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	469a      	mov	sl, r3
 8007a90:	f04f 0b00 	mov.w	fp, #0
 8007a94:	46d0      	mov	r8, sl
 8007a96:	46d9      	mov	r9, fp
 8007a98:	eb18 0308 	adds.w	r3, r8, r8
 8007a9c:	eb49 0409 	adc.w	r4, r9, r9
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	46a1      	mov	r9, r4
 8007aa4:	eb18 080a 	adds.w	r8, r8, sl
 8007aa8:	eb49 090b 	adc.w	r9, r9, fp
 8007aac:	f04f 0100 	mov.w	r1, #0
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ab8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007abc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ac0:	4688      	mov	r8, r1
 8007ac2:	4691      	mov	r9, r2
 8007ac4:	eb1a 0508 	adds.w	r5, sl, r8
 8007ac8:	eb4b 0609 	adc.w	r6, fp, r9
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	f04f 0400 	mov.w	r4, #0
 8007ade:	0094      	lsls	r4, r2, #2
 8007ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ae4:	008b      	lsls	r3, r1, #2
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4623      	mov	r3, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	4631      	mov	r1, r6
 8007aee:	f7f9 f809 	bl	8000b04 <__aeabi_uldivmod>
 8007af2:	4603      	mov	r3, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	461a      	mov	r2, r3
 8007af8:	4bb8      	ldr	r3, [pc, #736]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007afa:	fba3 2302 	umull	r2, r3, r3, r2
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	469b      	mov	fp, r3
 8007b08:	f04f 0c00 	mov.w	ip, #0
 8007b0c:	46d9      	mov	r9, fp
 8007b0e:	46e2      	mov	sl, ip
 8007b10:	eb19 0309 	adds.w	r3, r9, r9
 8007b14:	eb4a 040a 	adc.w	r4, sl, sl
 8007b18:	4699      	mov	r9, r3
 8007b1a:	46a2      	mov	sl, r4
 8007b1c:	eb19 090b 	adds.w	r9, r9, fp
 8007b20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b38:	4689      	mov	r9, r1
 8007b3a:	4692      	mov	sl, r2
 8007b3c:	eb1b 0509 	adds.w	r5, fp, r9
 8007b40:	eb4c 060a 	adc.w	r6, ip, sl
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	f04f 0400 	mov.w	r4, #0
 8007b56:	0094      	lsls	r4, r2, #2
 8007b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4623      	mov	r3, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	4631      	mov	r1, r6
 8007b66:	f7f8 ffcd 	bl	8000b04 <__aeabi_uldivmod>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4b9a      	ldr	r3, [pc, #616]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007b72:	fba3 1302 	umull	r1, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	2164      	movs	r1, #100	; 0x64
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	3332      	adds	r3, #50	; 0x32
 8007b84:	4a95      	ldr	r2, [pc, #596]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b90:	4498      	add	r8, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	469b      	mov	fp, r3
 8007b96:	f04f 0c00 	mov.w	ip, #0
 8007b9a:	46d9      	mov	r9, fp
 8007b9c:	46e2      	mov	sl, ip
 8007b9e:	eb19 0309 	adds.w	r3, r9, r9
 8007ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ba6:	4699      	mov	r9, r3
 8007ba8:	46a2      	mov	sl, r4
 8007baa:	eb19 090b 	adds.w	r9, r9, fp
 8007bae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bb2:	f04f 0100 	mov.w	r1, #0
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	4692      	mov	sl, r2
 8007bca:	eb1b 0509 	adds.w	r5, fp, r9
 8007bce:	eb4c 060a 	adc.w	r6, ip, sl
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	f04f 0400 	mov.w	r4, #0
 8007be4:	0094      	lsls	r4, r2, #2
 8007be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bea:	008b      	lsls	r3, r1, #2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	f7f8 ff86 	bl	8000b04 <__aeabi_uldivmod>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b77      	ldr	r3, [pc, #476]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c00:	fba3 1302 	umull	r1, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2164      	movs	r1, #100	; 0x64
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a72      	ldr	r2, [pc, #456]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4442      	add	r2, r8
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	e0d0      	b.n	8007dca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c28:	f7fe fb10 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007c2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	469a      	mov	sl, r3
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	46d0      	mov	r8, sl
 8007c38:	46d9      	mov	r9, fp
 8007c3a:	eb18 0308 	adds.w	r3, r8, r8
 8007c3e:	eb49 0409 	adc.w	r4, r9, r9
 8007c42:	4698      	mov	r8, r3
 8007c44:	46a1      	mov	r9, r4
 8007c46:	eb18 080a 	adds.w	r8, r8, sl
 8007c4a:	eb49 090b 	adc.w	r9, r9, fp
 8007c4e:	f04f 0100 	mov.w	r1, #0
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c62:	4688      	mov	r8, r1
 8007c64:	4691      	mov	r9, r2
 8007c66:	eb1a 0508 	adds.w	r5, sl, r8
 8007c6a:	eb4b 0609 	adc.w	r6, fp, r9
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4619      	mov	r1, r3
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	f04f 0400 	mov.w	r4, #0
 8007c80:	0094      	lsls	r4, r2, #2
 8007c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c86:	008b      	lsls	r3, r1, #2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	4631      	mov	r1, r6
 8007c90:	f7f8 ff38 	bl	8000b04 <__aeabi_uldivmod>
 8007c94:	4603      	mov	r3, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	469b      	mov	fp, r3
 8007caa:	f04f 0c00 	mov.w	ip, #0
 8007cae:	46d9      	mov	r9, fp
 8007cb0:	46e2      	mov	sl, ip
 8007cb2:	eb19 0309 	adds.w	r3, r9, r9
 8007cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8007cba:	4699      	mov	r9, r3
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	eb19 090b 	adds.w	r9, r9, fp
 8007cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cc6:	f04f 0100 	mov.w	r1, #0
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cda:	4689      	mov	r9, r1
 8007cdc:	4692      	mov	sl, r2
 8007cde:	eb1b 0509 	adds.w	r5, fp, r9
 8007ce2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	f04f 0400 	mov.w	r4, #0
 8007cf8:	0094      	lsls	r4, r2, #2
 8007cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cfe:	008b      	lsls	r3, r1, #2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	4631      	mov	r1, r6
 8007d08:	f7f8 fefc 	bl	8000b04 <__aeabi_uldivmod>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	3332      	adds	r3, #50	; 0x32
 8007d26:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d32:	4498      	add	r8, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	469b      	mov	fp, r3
 8007d38:	f04f 0c00 	mov.w	ip, #0
 8007d3c:	46d9      	mov	r9, fp
 8007d3e:	46e2      	mov	sl, ip
 8007d40:	eb19 0309 	adds.w	r3, r9, r9
 8007d44:	eb4a 040a 	adc.w	r4, sl, sl
 8007d48:	4699      	mov	r9, r3
 8007d4a:	46a2      	mov	sl, r4
 8007d4c:	eb19 090b 	adds.w	r9, r9, fp
 8007d50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d68:	4689      	mov	r9, r1
 8007d6a:	4692      	mov	sl, r2
 8007d6c:	eb1b 0509 	adds.w	r5, fp, r9
 8007d70:	eb4c 060a 	adc.w	r6, ip, sl
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	f04f 0400 	mov.w	r4, #0
 8007d86:	0094      	lsls	r4, r2, #2
 8007d88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d8c:	008b      	lsls	r3, r1, #2
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4623      	mov	r3, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	4631      	mov	r1, r6
 8007d96:	f7f8 feb5 	bl	8000b04 <__aeabi_uldivmod>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007da2:	fba3 1302 	umull	r1, r3, r3, r2
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	2164      	movs	r1, #100	; 0x64
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	3332      	adds	r3, #50	; 0x32
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4442      	add	r2, r8
 8007dc6:	609a      	str	r2, [r3, #8]
}
 8007dc8:	e7ff      	b.n	8007dca <UART_SetConfig+0x6e2>
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	40011000 	.word	0x40011000
 8007dd8:	40011400 	.word	0x40011400
 8007ddc:	51eb851f 	.word	0x51eb851f

08007de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de0:	b084      	sub	sp, #16
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	f107 001c 	add.w	r0, r7, #28
 8007dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d122      	bne.n	8007e3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d105      	bne.n	8007e32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fa26 	bl	8009284 <USB_CoreReset>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
 8007e3c:	e01a      	b.n	8007e74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fa1a 	bl	8009284 <USB_CoreReset>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
 8007e66:	e005      	b.n	8007e74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d10b      	bne.n	8007e92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f043 0206 	orr.w	r2, r3, #6
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e9e:	b004      	add	sp, #16
 8007ea0:	4770      	bx	lr
	...

08007ea4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d165      	bne.n	8007f84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a41      	ldr	r2, [pc, #260]	; (8007fc0 <USB_SetTurnaroundTime+0x11c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d906      	bls.n	8007ece <USB_SetTurnaroundTime+0x2a>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <USB_SetTurnaroundTime+0x120>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d802      	bhi.n	8007ece <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ec8:	230f      	movs	r3, #15
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e062      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4a3c      	ldr	r2, [pc, #240]	; (8007fc4 <USB_SetTurnaroundTime+0x120>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d906      	bls.n	8007ee4 <USB_SetTurnaroundTime+0x40>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4a3b      	ldr	r2, [pc, #236]	; (8007fc8 <USB_SetTurnaroundTime+0x124>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d802      	bhi.n	8007ee4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ede:	230e      	movs	r3, #14
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e057      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4a38      	ldr	r2, [pc, #224]	; (8007fc8 <USB_SetTurnaroundTime+0x124>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d906      	bls.n	8007efa <USB_SetTurnaroundTime+0x56>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4a37      	ldr	r2, [pc, #220]	; (8007fcc <USB_SetTurnaroundTime+0x128>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d802      	bhi.n	8007efa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ef4:	230d      	movs	r3, #13
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	e04c      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4a33      	ldr	r2, [pc, #204]	; (8007fcc <USB_SetTurnaroundTime+0x128>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d906      	bls.n	8007f10 <USB_SetTurnaroundTime+0x6c>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4a32      	ldr	r2, [pc, #200]	; (8007fd0 <USB_SetTurnaroundTime+0x12c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d802      	bhi.n	8007f10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e041      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4a2f      	ldr	r2, [pc, #188]	; (8007fd0 <USB_SetTurnaroundTime+0x12c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d906      	bls.n	8007f26 <USB_SetTurnaroundTime+0x82>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4a2e      	ldr	r2, [pc, #184]	; (8007fd4 <USB_SetTurnaroundTime+0x130>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d802      	bhi.n	8007f26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f20:	230b      	movs	r3, #11
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e036      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <USB_SetTurnaroundTime+0x130>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d906      	bls.n	8007f3c <USB_SetTurnaroundTime+0x98>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <USB_SetTurnaroundTime+0x134>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d802      	bhi.n	8007f3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f36:	230a      	movs	r3, #10
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	e02b      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <USB_SetTurnaroundTime+0x134>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d906      	bls.n	8007f52 <USB_SetTurnaroundTime+0xae>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <USB_SetTurnaroundTime+0x138>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d802      	bhi.n	8007f52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f4c:	2309      	movs	r3, #9
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e020      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4a21      	ldr	r2, [pc, #132]	; (8007fdc <USB_SetTurnaroundTime+0x138>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d906      	bls.n	8007f68 <USB_SetTurnaroundTime+0xc4>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4a20      	ldr	r2, [pc, #128]	; (8007fe0 <USB_SetTurnaroundTime+0x13c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d802      	bhi.n	8007f68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f62:	2308      	movs	r3, #8
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e015      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <USB_SetTurnaroundTime+0x13c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d906      	bls.n	8007f7e <USB_SetTurnaroundTime+0xda>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <USB_SetTurnaroundTime+0x140>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d802      	bhi.n	8007f7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f78:	2307      	movs	r3, #7
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e00a      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f7e:	2306      	movs	r3, #6
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	e007      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f8a:	2309      	movs	r3, #9
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e001      	b.n	8007f94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f90:	2309      	movs	r3, #9
 8007f92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	029b      	lsls	r3, r3, #10
 8007fa8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	00d8acbf 	.word	0x00d8acbf
 8007fc4:	00e4e1bf 	.word	0x00e4e1bf
 8007fc8:	00f423ff 	.word	0x00f423ff
 8007fcc:	0106737f 	.word	0x0106737f
 8007fd0:	011a499f 	.word	0x011a499f
 8007fd4:	01312cff 	.word	0x01312cff
 8007fd8:	014ca43f 	.word	0x014ca43f
 8007fdc:	016e35ff 	.word	0x016e35ff
 8007fe0:	01a6ab1f 	.word	0x01a6ab1f
 8007fe4:	01e847ff 	.word	0x01e847ff

08007fe8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f043 0201 	orr.w	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f023 0201 	bic.w	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d106      	bne.n	8008058 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	e00b      	b.n	8008070 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	e001      	b.n	8008070 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e003      	b.n	8008078 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008070:	2032      	movs	r0, #50	; 0x32
 8008072:	f7fb f971 	bl	8003358 <HAL_Delay>

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008080:	b084      	sub	sp, #16
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800808e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e009      	b.n	80080b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3340      	adds	r3, #64	; 0x40
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b0e      	cmp	r3, #14
 80080b8:	d9f2      	bls.n	80080a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11c      	bne.n	80080fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ce:	f043 0302 	orr.w	r3, r3, #2
 80080d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
 80080f8:	e00b      	b.n	8008112 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008118:	461a      	mov	r2, r3
 800811a:	2300      	movs	r3, #0
 800811c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008124:	4619      	mov	r1, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812c:	461a      	mov	r2, r3
 800812e:	680b      	ldr	r3, [r1, #0]
 8008130:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	2b01      	cmp	r3, #1
 8008136:	d10c      	bne.n	8008152 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f949 	bl	80083d8 <USB_SetDevSpeed>
 8008146:	e008      	b.n	800815a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f944 	bl	80083d8 <USB_SetDevSpeed>
 8008150:	e003      	b.n	800815a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008152:	2103      	movs	r1, #3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f93f 	bl	80083d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800815a:	2110      	movs	r1, #16
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8f3 	bl	8008348 <USB_FlushTxFifo>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f911 	bl	8008394 <USB_FlushRxFifo>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	461a      	mov	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	e043      	b.n	800822e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081bc:	d118      	bne.n	80081f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	461a      	mov	r2, r3
 80081d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e013      	b.n	8008202 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	461a      	mov	r2, r3
 80081e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e008      	b.n	8008202 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	461a      	mov	r2, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	461a      	mov	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	461a      	mov	r2, r3
 8008222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3301      	adds	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d3b7      	bcc.n	80081a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	e043      	b.n	80082c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008252:	d118      	bne.n	8008286 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e013      	b.n	8008298 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e008      	b.n	8008298 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	461a      	mov	r2, r3
 8008294:	2300      	movs	r3, #0
 8008296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	461a      	mov	r2, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3b7      	bcc.n	800823c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f043 0210 	orr.w	r2, r3, #16
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <USB_DevInit+0x2c4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800832c:	f043 0304 	orr.w	r3, r3, #4
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008340:	b004      	add	sp, #16
 8008342:	4770      	bx	lr
 8008344:	803c3800 	.word	0x803c3800

08008348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <USB_FlushTxFifo+0x48>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d901      	bls.n	8008374 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e006      	b.n	8008382 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b20      	cmp	r3, #32
 800837e:	d0f0      	beq.n	8008362 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	00030d40 	.word	0x00030d40

08008394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2210      	movs	r2, #16
 80083a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <USB_FlushRxFifo+0x40>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d901      	bls.n	80083b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e006      	b.n	80083c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d0f0      	beq.n	80083a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	00030d40 	.word	0x00030d40

080083d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	68f9      	ldr	r1, [r7, #12]
 80083f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f8:	4313      	orrs	r3, r2
 80083fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b480      	push	{r7}
 800840c:	b087      	sub	sp, #28
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0306 	and.w	r3, r3, #6
 8008422:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
 800842e:	e00a      	b.n	8008446 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d002      	beq.n	800843c <USB_GetDevSpeed+0x32>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b06      	cmp	r3, #6
 800843a:	d102      	bne.n	8008442 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800843c:	2302      	movs	r3, #2
 800843e:	75fb      	strb	r3, [r7, #23]
 8008440:	e001      	b.n	8008446 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008442:	230f      	movs	r3, #15
 8008444:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	785b      	ldrb	r3, [r3, #1]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d13a      	bne.n	80084e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2101      	movs	r1, #1
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	b29b      	uxth	r3, r3
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800848e:	4313      	orrs	r3, r2
 8008490:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d155      	bne.n	8008554 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	78db      	ldrb	r3, [r3, #3]
 80084c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	059b      	lsls	r3, r3, #22
 80084ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084cc:	4313      	orrs	r3, r2
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	e036      	b.n	8008554 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ec:	69da      	ldr	r2, [r3, #28]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	2101      	movs	r1, #1
 80084f8:	fa01 f303 	lsl.w	r3, r1, r3
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	68f9      	ldr	r1, [r7, #12]
 8008500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008504:	4313      	orrs	r3, r2
 8008506:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d11a      	bne.n	8008554 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	78db      	ldrb	r3, [r3, #3]
 8008538:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800853a:	430b      	orrs	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008552:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
	...

08008564 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b01      	cmp	r3, #1
 8008582:	f040 815c 	bne.w	800883e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d132      	bne.n	80085f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ec:	0cdb      	lsrs	r3, r3, #19
 80085ee:	04db      	lsls	r3, r3, #19
 80085f0:	6113      	str	r3, [r2, #16]
 80085f2:	e074      	b.n	80086de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860e:	0cdb      	lsrs	r3, r3, #19
 8008610:	04db      	lsls	r3, r3, #19
 8008612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008632:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6959      	ldr	r1, [r3, #20]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	440b      	add	r3, r1
 8008650:	1e59      	subs	r1, r3, #1
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	fbb1 f3f3 	udiv	r3, r1, r3
 800865a:	04d9      	lsls	r1, r3, #19
 800865c:	4b9d      	ldr	r3, [pc, #628]	; (80088d4 <USB_EPStartXfer+0x370>)
 800865e:	400b      	ands	r3, r1
 8008660:	69b9      	ldr	r1, [r7, #24]
 8008662:	0148      	lsls	r0, r1, #5
 8008664:	69f9      	ldr	r1, [r7, #28]
 8008666:	4401      	add	r1, r0
 8008668:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800866c:	4313      	orrs	r3, r2
 800866e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008686:	69b9      	ldr	r1, [r7, #24]
 8008688:	0148      	lsls	r0, r1, #5
 800868a:	69f9      	ldr	r1, [r7, #28]
 800868c:	4401      	add	r1, r0
 800868e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008692:	4313      	orrs	r3, r2
 8008694:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	78db      	ldrb	r3, [r3, #3]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d11f      	bne.n	80086de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d14b      	bne.n	800877c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	461a      	mov	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	78db      	ldrb	r3, [r3, #3]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d128      	bne.n	800875a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008714:	2b00      	cmp	r3, #0
 8008716:	d110      	bne.n	800873a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	440a      	add	r2, r1
 800872e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	e00f      	b.n	800875a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008758:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008774:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e12f      	b.n	80089dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800879a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	78db      	ldrb	r3, [r3, #3]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d015      	beq.n	80087d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 8117 	beq.w	80089dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	2101      	movs	r1, #1
 80087c0:	fa01 f303 	lsl.w	r3, r1, r3
 80087c4:	69f9      	ldr	r1, [r7, #28]
 80087c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ca:	4313      	orrs	r3, r2
 80087cc:	634b      	str	r3, [r1, #52]	; 0x34
 80087ce:	e105      	b.n	80089dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d110      	bne.n	8008802 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	e00f      	b.n	8008822 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008820:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	68d9      	ldr	r1, [r3, #12]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	b298      	uxth	r0, r3
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fa2b 	bl	8008c92 <USB_WritePacket>
 800883c:	e0ce      	b.n	80089dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	440a      	add	r2, r1
 8008854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008858:	0cdb      	lsrs	r3, r3, #19
 800885a:	04db      	lsls	r3, r3, #19
 800885c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800887c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008880:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d126      	bne.n	80088d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	0148      	lsls	r0, r1, #5
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	4401      	add	r1, r0
 80088a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088ac:	4313      	orrs	r3, r2
 80088ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ce:	6113      	str	r3, [r2, #16]
 80088d0:	e036      	b.n	8008940 <USB_EPStartXfer+0x3dc>
 80088d2:	bf00      	nop
 80088d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	1e5a      	subs	r2, r3, #1
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	691a      	ldr	r2, [r3, #16]
 80088fc:	8afb      	ldrh	r3, [r7, #22]
 80088fe:	04d9      	lsls	r1, r3, #19
 8008900:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <USB_EPStartXfer+0x484>)
 8008902:	400b      	ands	r3, r1
 8008904:	69b9      	ldr	r1, [r7, #24]
 8008906:	0148      	lsls	r0, r1, #5
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	4401      	add	r1, r0
 800890c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008910:	4313      	orrs	r3, r2
 8008912:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	8af9      	ldrh	r1, [r7, #22]
 8008928:	fb01 f303 	mul.w	r3, r1, r3
 800892c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008930:	69b9      	ldr	r1, [r7, #24]
 8008932:	0148      	lsls	r0, r1, #5
 8008934:	69f9      	ldr	r1, [r7, #28]
 8008936:	4401      	add	r1, r0
 8008938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800893c:	4313      	orrs	r3, r2
 800893e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d10d      	bne.n	8008962 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	68d9      	ldr	r1, [r3, #12]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	460a      	mov	r2, r1
 8008960:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	78db      	ldrb	r3, [r3, #3]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d128      	bne.n	80089bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008976:	2b00      	cmp	r3, #0
 8008978:	d110      	bne.n	800899c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	69fa      	ldr	r2, [r7, #28]
 800898e:	440a      	add	r2, r1
 8008990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e00f      	b.n	80089bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	1ff80000 	.word	0x1ff80000

080089ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f040 80cd 	bne.w	8008ba8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d132      	bne.n	8008a7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	0cdb      	lsrs	r3, r3, #19
 8008a76:	04db      	lsls	r3, r3, #19
 8008a78:	6113      	str	r3, [r2, #16]
 8008a7a:	e04e      	b.n	8008b1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a96:	0cdb      	lsrs	r3, r3, #19
 8008a98:	04db      	lsls	r3, r3, #19
 8008a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008abe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	695a      	ldr	r2, [r3, #20]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d903      	bls.n	8008ad4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	691a      	ldr	r2, [r3, #16]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b0a:	6939      	ldr	r1, [r7, #16]
 8008b0c:	0148      	lsls	r0, r1, #5
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	4401      	add	r1, r0
 8008b12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b16:	4313      	orrs	r3, r2
 8008b18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d11e      	bne.n	8008b5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	461a      	mov	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e092      	b.n	8008c84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d07e      	beq.n	8008c84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	2101      	movs	r1, #1
 8008b98:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	634b      	str	r3, [r1, #52]	; 0x34
 8008ba6:	e06d      	b.n	8008c84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc2:	0cdb      	lsrs	r3, r3, #19
 8008bc4:	04db      	lsls	r3, r3, #19
 8008bc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008be6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c32:	6939      	ldr	r1, [r7, #16]
 8008c34:	0148      	lsls	r0, r1, #5
 8008c36:	6979      	ldr	r1, [r7, #20]
 8008c38:	4401      	add	r1, r0
 8008c3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d10d      	bne.n	8008c64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	68d9      	ldr	r1, [r3, #12]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c60:	460a      	mov	r2, r1
 8008c62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b089      	sub	sp, #36	; 0x24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	71fb      	strb	r3, [r7, #7]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d11a      	bne.n	8008cee <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cb8:	88bb      	ldrh	r3, [r7, #4]
 8008cba:	3303      	adds	r3, #3
 8008cbc:	089b      	lsrs	r3, r3, #2
 8008cbe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e00f      	b.n	8008ce6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	031a      	lsls	r2, r3, #12
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d3eb      	bcc.n	8008cc6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3724      	adds	r7, #36	; 0x24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b089      	sub	sp, #36	; 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	3303      	adds	r3, #3
 8008d16:	089b      	lsrs	r3, r3, #2
 8008d18:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	e00b      	b.n	8008d38 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	3301      	adds	r3, #1
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3ef      	bcc.n	8008d20 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008d40:	69fb      	ldr	r3, [r7, #28]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3724      	adds	r7, #36	; 0x24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b085      	sub	sp, #20
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d12c      	bne.n	8008dc4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db12      	blt.n	8008da2 <USB_EPSetStall+0x54>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00f      	beq.n	8008da2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008da0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e02b      	b.n	8008e1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	db12      	blt.n	8008dfc <USB_EPSetStall+0xae>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00f      	beq.n	8008dfc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dfa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d128      	bne.n	8008e98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	78db      	ldrb	r3, [r3, #3]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d003      	beq.n	8008e76 <USB_EPClearStall+0x4c>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	78db      	ldrb	r3, [r3, #3]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d138      	bne.n	8008ee8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	e027      	b.n	8008ee8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d003      	beq.n	8008ec8 <USB_EPClearStall+0x9e>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	78db      	ldrb	r3, [r3, #3]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d10f      	bne.n	8008ee8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	0151      	lsls	r1, r2, #5
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	440a      	add	r2, r1
 8008ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b086      	sub	sp, #24
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e016      	b.n	8008f36 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	461a      	mov	r2, r3
 8008f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f1a:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	3301      	adds	r3, #1
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	d9e5      	bls.n	8008f08 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	461a      	mov	r2, r3
 8008f44:	2300      	movs	r3, #0
 8008f46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4e:	461a      	mov	r2, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff fa17 	bl	8008394 <USB_FlushRxFifo>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <USB_StopDevice+0x7e>
  {
    return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	e00b      	b.n	8008f8c <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8008f74:	2110      	movs	r1, #16
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff f9e6 	bl	8008348 <USB_FlushTxFifo>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <USB_StopDevice+0x94>
  {
    return ret;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	e000      	b.n	8008f8c <USB_StopDevice+0x96>
  }

  return ret;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008fc8:	68f9      	ldr	r1, [r7, #12]
 8008fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ffa:	f023 0302 	bic.w	r3, r3, #2
 8008ffe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009000:	2003      	movs	r0, #3
 8009002:	f7fa f9a9 	bl	8003358 <HAL_Delay>

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800902a:	f043 0302 	orr.w	r3, r3, #2
 800902e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009030:	2003      	movs	r0, #3
 8009032:	f7fa f991 	bl	8003358 <HAL_Delay>

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009058:	68fb      	ldr	r3, [r7, #12]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009066:	b480      	push	{r7}
 8009068:	b085      	sub	sp, #20
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	4013      	ands	r3, r2
 8009088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	0c1b      	lsrs	r3, r3, #16
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	b29b      	uxth	r3, r3
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4013      	ands	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090fc:	68bb      	ldr	r3, [r7, #8]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800910a:	b480      	push	{r7}
 800910c:	b087      	sub	sp, #28
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	01db      	lsls	r3, r3, #7
 800913c:	b2db      	uxtb	r3, r3
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4013      	ands	r3, r2
 8009156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009158:	68bb      	ldr	r3, [r7, #8]
}
 800915a:	4618      	mov	r0, r3
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f003 0301 	and.w	r3, r3, #1
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009182:	b480      	push	{r7}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091a0:	f023 0307 	bic.w	r3, r3, #7
 80091a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	460b      	mov	r3, r1
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	333c      	adds	r3, #60	; 0x3c
 80091de:	3304      	adds	r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	4a26      	ldr	r2, [pc, #152]	; (8009280 <USB_EP0_OutStart+0xb8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d90a      	bls.n	8009202 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091fc:	d101      	bne.n	8009202 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e037      	b.n	8009272 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	461a      	mov	r2, r3
 800920a:	2300      	movs	r3, #0
 800920c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009230:	f043 0318 	orr.w	r3, r3, #24
 8009234:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009244:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009248:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800924a:	7afb      	ldrb	r3, [r7, #11]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d10f      	bne.n	8009270 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800926e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	4f54300a 	.word	0x4f54300a

08009284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4a13      	ldr	r2, [pc, #76]	; (80092e8 <USB_CoreReset+0x64>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e01b      	b.n	80092da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	daf2      	bge.n	8009290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f043 0201 	orr.w	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <USB_CoreReset+0x64>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d901      	bls.n	80092cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e006      	b.n	80092da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d0f0      	beq.n	80092ba <USB_CoreReset+0x36>

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	00030d40 	.word	0x00030d40

080092ec <__NVIC_SystemReset>:
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80092f0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <__NVIC_SystemReset+0x20>)
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80092fc:	4903      	ldr	r1, [pc, #12]	; (800930c <__NVIC_SystemReset+0x20>)
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <__NVIC_SystemReset+0x24>)
 8009300:	4313      	orrs	r3, r2
 8009302:	60cb      	str	r3, [r1, #12]
 8009304:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <__NVIC_SystemReset+0x1c>
 800930c:	e000ed00 	.word	0xe000ed00
 8009310:	05fa0004 	.word	0x05fa0004

08009314 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8009320:	f240 401c 	movw	r0, #1052	; 0x41c
 8009324:	f002 fbe2 	bl	800baec <malloc>
 8009328:	4603      	mov	r3, r0
 800932a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d105      	bne.n	800933e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800933a:	2302      	movs	r3, #2
 800933c:	e03f      	b.n	80093be <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009354:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4798      	blx	r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e000      	b.n	80093be <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80093dc:	2302      	movs	r3, #2
 80093de:	e027      	b.n	8009430 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093e6:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009420:	4618      	mov	r0, r3
 8009422:	f002 fb6b 	bl	800bafc <free>
  pdev->pClassData = NULL;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009448:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009462:	2b00      	cmp	r3, #0
 8009464:	d03f      	beq.n	80094e6 <USBD_DFU_Setup+0xae>
 8009466:	2b20      	cmp	r3, #32
 8009468:	f040 80c3 	bne.w	80095f2 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b06      	cmp	r3, #6
 8009472:	d830      	bhi.n	80094d6 <USBD_DFU_Setup+0x9e>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <USBD_DFU_Setup+0x44>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094cd 	.word	0x080094cd
 8009480:	08009499 	.word	0x08009499
 8009484:	080094a3 	.word	0x080094a3
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094bd 	.word	0x080094bd
 8009494:	080094c5 	.word	0x080094c5
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa62 	bl	8009964 <DFU_Download>
      break;
 80094a0:	e020      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fac7 	bl	8009a38 <DFU_Upload>
      break;
 80094aa:	e01b      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fb9b 	bl	8009be8 <DFU_GetStatus>
      break;
 80094b2:	e017      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fc49 	bl	8009d4c <DFU_ClearStatus>
      break;
 80094ba:	e013      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fc95 	bl	8009dec <DFU_GetState>
      break;
 80094c2:	e00f      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fca5 	bl	8009e14 <DFU_Abort>
      break;
 80094ca:	e00b      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f9e8 	bl	80098a4 <DFU_Detach>
      break;
 80094d4:	e006      	b.n	80094e4 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fd7f 	bl	800afdc <USBD_CtlError>
      ret = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	77fb      	strb	r3, [r7, #31]
      break;
 80094e2:	bf00      	nop
    }
    break;
 80094e4:	e08c      	b.n	8009600 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	2b0b      	cmp	r3, #11
 80094ec:	d878      	bhi.n	80095e0 <USBD_DFU_Setup+0x1a8>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <USBD_DFU_Setup+0xbc>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009525 	.word	0x08009525
 80094f8:	080095ef 	.word	0x080095ef
 80094fc:	080095e1 	.word	0x080095e1
 8009500:	080095e1 	.word	0x080095e1
 8009504:	080095e1 	.word	0x080095e1
 8009508:	080095e1 	.word	0x080095e1
 800950c:	0800954d 	.word	0x0800954d
 8009510:	080095e1 	.word	0x080095e1
 8009514:	080095e1 	.word	0x080095e1
 8009518:	080095e1 	.word	0x080095e1
 800951c:	08009577 	.word	0x08009577
 8009520:	080095a1 	.word	0x080095a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952a:	2b03      	cmp	r3, #3
 800952c:	d107      	bne.n	800953e <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800952e:	f107 030e 	add.w	r3, r7, #14
 8009532:	2202      	movs	r2, #2
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fdc1 	bl	800b0be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800953c:	e058      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 fd4b 	bl	800afdc <USBD_CtlError>
        ret = USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	77fb      	strb	r3, [r7, #31]
      break;
 800954a:	e051      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	885b      	ldrh	r3, [r3, #2]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b21      	cmp	r3, #33	; 0x21
 8009556:	d107      	bne.n	8009568 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8009558:	4b2c      	ldr	r3, [pc, #176]	; (800960c <USBD_DFU_Setup+0x1d4>)
 800955a:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	88db      	ldrh	r3, [r3, #6]
 8009560:	2b09      	cmp	r3, #9
 8009562:	bf28      	it	cs
 8009564:	2309      	movcs	r3, #9
 8009566:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009568:	8afb      	ldrh	r3, [r7, #22]
 800956a:	461a      	mov	r2, r3
 800956c:	69b9      	ldr	r1, [r7, #24]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fda5 	bl	800b0be <USBD_CtlSendData>
      break;
 8009574:	e03c      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957c:	2b03      	cmp	r3, #3
 800957e:	d108      	bne.n	8009592 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009586:	2201      	movs	r2, #1
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fd97 	bl	800b0be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009590:	e02e      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fd21 	bl	800afdc <USBD_CtlError>
        ret = USBD_FAIL;
 800959a:	2303      	movs	r3, #3
 800959c:	77fb      	strb	r3, [r7, #31]
      break;
 800959e:	e027      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	885b      	ldrh	r3, [r3, #2]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d113      	bne.n	80095d2 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d107      	bne.n	80095c4 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	885b      	ldrh	r3, [r3, #2]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80095c2:	e015      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fd08 	bl	800afdc <USBD_CtlError>
          ret = USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	77fb      	strb	r3, [r7, #31]
      break;
 80095d0:	e00e      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fd01 	bl	800afdc <USBD_CtlError>
        ret = USBD_FAIL;
 80095da:	2303      	movs	r3, #3
 80095dc:	77fb      	strb	r3, [r7, #31]
      break;
 80095de:	e007      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fcfa 	bl	800afdc <USBD_CtlError>
      ret = USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	77fb      	strb	r3, [r7, #31]
      break;
 80095ec:	e000      	b.n	80095f0 <USBD_DFU_Setup+0x1b8>
      break;
 80095ee:	bf00      	nop
    }
    break;
 80095f0:	e006      	b.n	8009600 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fcf1 	bl	800afdc <USBD_CtlError>
    ret = USBD_FAIL;
 80095fa:	2303      	movs	r3, #3
 80095fc:	77fb      	strb	r3, [r7, #31]
    break;
 80095fe:	bf00      	nop
  }

  return (uint8_t)ret;
 8009600:	7ffb      	ldrb	r3, [r7, #31]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3720      	adds	r7, #32
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000005a 	.word	0x2000005a

08009610 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	221b      	movs	r2, #27
 800961c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	20000048 	.word	0x20000048

08009630 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009656:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800965e:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009666:	2b04      	cmp	r3, #4
 8009668:	f040 80bc 	bne.w	80097e4 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009672:	2b00      	cmp	r3, #0
 8009674:	d17a      	bne.n	800976c <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800967c:	2b01      	cmp	r3, #1
 800967e:	f000 8092 	beq.w	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009688:	2b05      	cmp	r3, #5
 800968a:	d15c      	bne.n	8009746 <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b21      	cmp	r3, #33	; 0x21
 8009692:	d124      	bne.n	80096de <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	461a      	mov	r2, r3
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	789b      	ldrb	r3, [r3, #2]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	441a      	add	r2, r3
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	78db      	ldrb	r3, [r3, #3]
 80096be:	041b      	lsls	r3, r3, #16
 80096c0:	441a      	add	r2, r3
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	061b      	lsls	r3, r3, #24
 80096d4:	441a      	add	r2, r3
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80096dc:	e063      	b.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b41      	cmp	r3, #65	; 0x41
 80096e4:	d15f      	bne.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	461a      	mov	r2, r3
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	441a      	add	r2, r3
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	78db      	ldrb	r3, [r3, #3]
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	441a      	add	r2, r3
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	791b      	ldrb	r3, [r3, #4]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	441a      	add	r2, r3
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d031      	beq.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8009742:	2303      	movs	r3, #3
 8009744:	e057      	b.n	80097f6 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	2200      	movs	r2, #0
 800974a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800975a:	2301      	movs	r3, #1
 800975c:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800975e:	f107 030c 	add.w	r3, r7, #12
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 fc39 	bl	800afdc <USBD_CtlError>
 800976a:	e01c      	b.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009772:	2b01      	cmp	r3, #1
 8009774:	d917      	bls.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800977c:	4b20      	ldr	r3, [pc, #128]	; (8009800 <USBD_DFU_EP0_TxReady+0x1b8>)
 800977e:	4413      	add	r3, r2
 8009780:	029a      	lsls	r2, r3, #10
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009788:	4413      	add	r3, r2
 800978a:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	69f8      	ldr	r0, [r7, #28]
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800979a:	4798      	blx	r3
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e027      	b.n	80097f6 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2203      	movs	r2, #3
 80097ba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80097e2:	e007      	b.n	80097f4 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	d102      	bne.n	80097f4 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fb5e 	bl	8009eb0 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	003ffffe 	.word	0x003ffffe

08009804 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
	...

0800981c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220a      	movs	r2, #10
 8009828:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20000064 	.word	0x20000064

0800983c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	460b      	mov	r3, r1
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009850:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	2b06      	cmp	r3, #6
 8009856:	d808      	bhi.n	800986a <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	4905      	ldr	r1, [pc, #20]	; (8009874 <USBD_DFU_GetUsrStringDesc+0x38>)
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fbcc 	bl	800affe <USBD_GetString>
    return USBD_StrDesc;
 8009866:	4b03      	ldr	r3, [pc, #12]	; (8009874 <USBD_DFU_GetUsrStringDesc+0x38>)
 8009868:	e000      	b.n	800986c <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800986a:	2300      	movs	r3, #0
  }
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20000164 	.word	0x20000164

08009878 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	e004      	b.n	8009896 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
	...

080098a4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b4:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d013      	beq.n	80098e8 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d00e      	beq.n	80098e8 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d009      	beq.n	80098e8 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80098da:	2b06      	cmp	r3, #6
 80098dc:	d004      	beq.n	80098e8 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d125      	bne.n	8009934 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <DFU_Detach+0xbc>)
 8009936:	7d5b      	ldrb	r3, [r3, #21]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fb62 	bl	800a00a <USBD_Stop>
    (void)USBD_Start(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fb53 	bl	8009ff2 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800994c:	e004      	b.n	8009958 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	4618      	mov	r0, r3
 8009954:	f7f9 fd00 	bl	8003358 <HAL_Delay>
}
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000048 	.word	0x20000048

08009964 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009974:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	88db      	ldrh	r3, [r3, #6]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02d      	beq.n	80099da <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009984:	2b02      	cmp	r3, #2
 8009986:	d004      	beq.n	8009992 <DFU_Download+0x2e>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800998e:	2b05      	cmp	r3, #5
 8009990:	d11e      	bne.n	80099d0 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	461a      	mov	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	461a      	mov	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2203      	movs	r2, #3
 80099ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099c6:	461a      	mov	r2, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 fba4 	bl	800b116 <USBD_CtlPrepareRx>
 80099ce:	e02e      	b.n	8009a2e <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fb02 	bl	800afdc <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80099d8:	e029      	b.n	8009a2e <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	d004      	beq.n	80099ee <DFU_Download+0x8a>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d11a      	bne.n	8009a24 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2206      	movs	r2, #6
 80099fa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009a22:	e004      	b.n	8009a2e <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 fad8 	bl	800afdc <USBD_CtlError>
}
 8009a2c:	e7ff      	b.n	8009a2e <DFU_Download+0xca>
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a48:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a50:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	88db      	ldrh	r3, [r3, #6]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80a9 	beq.w	8009bae <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d005      	beq.n	8009a72 <DFU_Upload+0x3a>
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	f040 8091 	bne.w	8009b94 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	885b      	ldrh	r3, [r3, #2]
 8009a76:	461a      	mov	r2, r3
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	88db      	ldrh	r3, [r3, #6]
 8009a82:	461a      	mov	r2, r3
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d12c      	bne.n	8009aee <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d901      	bls.n	8009aa2 <DFU_Upload+0x6a>
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	e000      	b.n	8009aa4 <DFU_Upload+0x6c>
 8009aa2:	2209      	movs	r2, #9
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2221      	movs	r2, #33	; 0x21
 8009ad8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2241      	movs	r2, #65	; 0x41
 8009ade:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fae9 	bl	800b0be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8009aec:	e076      	b.n	8009bdc <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d932      	bls.n	8009b5e <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2209      	movs	r2, #9
 8009afc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009b2a:	4b2e      	ldr	r3, [pc, #184]	; (8009be4 <DFU_Upload+0x1ac>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	029a      	lsls	r2, r3, #10
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009b36:	4413      	add	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8009b48:	4798      	blx	r3
 8009b4a:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b52:	461a      	mov	r2, r3
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f001 fab1 	bl	800b0be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8009b5c:	e03e      	b.n	8009bdc <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	220f      	movs	r2, #15
 8009b62:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 fa25 	bl	800afdc <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8009b92:	e023      	b.n	8009bdc <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 fa18 	bl	800afdc <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8009bac:	e016      	b.n	8009bdc <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8009bda:	e7ff      	b.n	8009bdc <DFU_Upload+0x1a4>
 8009bdc:	bf00      	nop
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	003ffffe 	.word	0x003ffffe

08009be8 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf6:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bfe:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d002      	beq.n	8009c10 <DFU_GetStatus+0x28>
 8009c0a:	2b06      	cmp	r3, #6
 8009c0c:	d051      	beq.n	8009cb2 <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8009c0e:	e08e      	b.n	8009d2e <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d034      	beq.n	8009c84 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10e      	bne.n	8009c6e <DFU_GetStatus+0x86>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b41      	cmp	r3, #65	; 0x41
 8009c56:	d10a      	bne.n	8009c6e <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4798      	blx	r3
    break;
 8009c6c:	e05f      	b.n	8009d2e <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009c7e:	2101      	movs	r1, #1
 8009c80:	4798      	blx	r3
    break;
 8009c82:	e054      	b.n	8009d2e <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2205      	movs	r2, #5
 8009c88:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8009cb0:	e03d      	b.n	8009d2e <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d116      	bne.n	8009cea <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2207      	movs	r2, #7
 8009cc0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8009ce8:	e020      	b.n	8009d2c <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11b      	bne.n	8009d2c <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8009cf4:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <DFU_GetStatus+0x160>)
 8009cf6:	7d1b      	ldrb	r3, [r3, #20]
 8009cf8:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d015      	beq.n	8009d2c <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8009d2c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009d34:	2206      	movs	r2, #6
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 f9c0 	bl	800b0be <USBD_CtlSendData>
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20000048 	.word	0x20000048

08009d4c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d5a:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009d62:	2b0a      	cmp	r3, #10
 8009d64:	d11e      	bne.n	8009da4 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 8009da2:	e01d      	b.n	8009de0 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	220a      	movs	r2, #10
 8009da8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	220e      	movs	r2, #14
 8009db0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8009e02:	2201      	movs	r2, #1
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 f959 	bl	800b0be <USBD_CtlSendData>
}
 8009e0c:	bf00      	nop
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e22:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d013      	beq.n	8009e56 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d00e      	beq.n	8009e56 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	d009      	beq.n	8009e56 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009e48:	2b06      	cmp	r3, #6
 8009e4a:	d004      	beq.n	8009e56 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e52:	2b09      	cmp	r3, #9
 8009e54:	d125      	bne.n	8009ea2 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ebe:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8009ec8:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <DFU_Leave+0x90>)
 8009eca:	7d1b      	ldrb	r3, [r3, #20]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d016      	beq.n	8009f02 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8009f00:	e01a      	b.n	8009f38 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2208      	movs	r2, #8
 8009f06:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f86b 	bl	800a00a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8009f34:	f7ff f9da 	bl	80092ec <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000048 	.word	0x20000048

08009f44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e025      	b.n	8009fa8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	79fa      	ldrb	r2, [r7, #7]
 8009f9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f001 fbdb 	bl	800b758 <USBD_LL_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e010      	b.n	8009fea <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd8:	f107 020e 	add.w	r2, r7, #14
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fbf8 	bl	800b7f0 <USBD_LL_Start>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6852      	ldr	r2, [r2, #4]
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	4611      	mov	r1, r2
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fbef 	bl	800b826 <USBD_LL_Stop>
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]

  return ret;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d007      	beq.n	800a0ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	4798      	blx	r3
  }

  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 ff3e 	bl	800af68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d00e      	beq.n	800a12e <USBD_LL_SetupStage+0x5a>
 800a110:	2b01      	cmp	r3, #1
 800a112:	d302      	bcc.n	800a11a <USBD_LL_SetupStage+0x46>
 800a114:	2b02      	cmp	r3, #2
 800a116:	d014      	beq.n	800a142 <USBD_LL_SetupStage+0x6e>
 800a118:	e01d      	b.n	800a156 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa18 	bl	800a558 <USBD_StdDevReq>
 800a128:	4603      	mov	r3, r0
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e020      	b.n	800a170 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa7c 	bl	800a634 <USBD_StdItfReq>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
      break;
 800a140:	e016      	b.n	800a170 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fab8 	bl	800a6c0 <USBD_StdEPReq>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
      break;
 800a154:	e00c      	b.n	800a170 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a15c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a160:	b2db      	uxtb	r3, r3
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fb9f 	bl	800b8a8 <USBD_LL_StallEP>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
      break;
 800a16e:	bf00      	nop
  }

  return ret;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	460b      	mov	r3, r1
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d137      	bne.n	800a1fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a194:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d14a      	bne.n	800a236 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d913      	bls.n	800a1d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	1ad2      	subs	r2, r2, r3
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	bf28      	it	cs
 800a1c6:	4613      	movcs	r3, r2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 ffbf 	bl	800b150 <USBD_CtlContinueRx>
 800a1d2:	e030      	b.n	800a236 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d105      	bne.n	800a1f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 ffbb 	bl	800b172 <USBD_CtlSendStatus>
 800a1fc:	e01b      	b.n	800a236 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d013      	beq.n	800a232 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a210:	2b03      	cmp	r3, #3
 800a212:	d10e      	bne.n	800a232 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	7afa      	ldrb	r2, [r7, #11]
 800a21e:	4611      	mov	r1, r2
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	4798      	blx	r3
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	e002      	b.n	800a238 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	e000      	b.n	800a238 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	460b      	mov	r3, r1
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d16a      	bne.n	800a32a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3314      	adds	r3, #20
 800a258:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a260:	2b02      	cmp	r3, #2
 800a262:	d155      	bne.n	800a310 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d914      	bls.n	800a29a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	461a      	mov	r2, r3
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 ff34 	bl	800b0f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	2100      	movs	r1, #0
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f001 fbb2 	bl	800b9fc <USBD_LL_PrepareReceive>
 800a298:	e03a      	b.n	800a310 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d11c      	bne.n	800a2e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d316      	bcc.n	800a2e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d20f      	bcs.n	800a2e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 ff15 	bl	800b0f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f001 fb8f 	bl	800b9fc <USBD_LL_PrepareReceive>
 800a2de:	e017      	b.n	800a310 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d105      	bne.n	800a302 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a302:	2180      	movs	r1, #128	; 0x80
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f001 facf 	bl	800b8a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 ff44 	bl	800b198 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d123      	bne.n	800a362 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff fe9b 	bl	800a056 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a328:	e01b      	b.n	800a362 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d013      	beq.n	800a35e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d10e      	bne.n	800a35e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	7afa      	ldrb	r2, [r7, #11]
 800a34a:	4611      	mov	r1, r2
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	4798      	blx	r3
 800a350:	4603      	mov	r3, r0
 800a352:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	e002      	b.n	800a364 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a35e:	2303      	movs	r3, #3
 800a360:	e000      	b.n	800a364 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d009      	beq.n	800a3b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6852      	ldr	r2, [r2, #4]
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3b0:	2340      	movs	r3, #64	; 0x40
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 fa50 	bl	800b85c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2240      	movs	r2, #64	; 0x40
 800a3c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3cc:	2340      	movs	r3, #64	; 0x40
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2180      	movs	r1, #128	; 0x80
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 fa42 	bl	800b85c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2240      	movs	r2, #64	; 0x40
 800a3e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	78fa      	ldrb	r2, [r7, #3]
 800a3fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2204      	movs	r2, #4
 800a426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a446:	2b04      	cmp	r3, #4
 800a448:	d105      	bne.n	800a456 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a472:	2b03      	cmp	r3, #3
 800a474:	d10b      	bne.n	800a48e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d009      	beq.n	800a510 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6852      	ldr	r2, [r2, #4]
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	4611      	mov	r1, r2
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	4798      	blx	r3
  }

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b087      	sub	sp, #28
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3301      	adds	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a538:	8a3b      	ldrh	r3, [r7, #16]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	b21a      	sxth	r2, r3
 800a53e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a542:	4313      	orrs	r3, r2
 800a544:	b21b      	sxth	r3, r3
 800a546:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a548:	89fb      	ldrh	r3, [r7, #14]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a56e:	2b20      	cmp	r3, #32
 800a570:	d004      	beq.n	800a57c <USBD_StdDevReq+0x24>
 800a572:	2b40      	cmp	r3, #64	; 0x40
 800a574:	d002      	beq.n	800a57c <USBD_StdDevReq+0x24>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <USBD_StdDevReq+0x38>
 800a57a:	e050      	b.n	800a61e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
 800a58a:	4603      	mov	r3, r0
 800a58c:	73fb      	strb	r3, [r7, #15]
    break;
 800a58e:	e04b      	b.n	800a628 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	785b      	ldrb	r3, [r3, #1]
 800a594:	2b09      	cmp	r3, #9
 800a596:	d83c      	bhi.n	800a612 <USBD_StdDevReq+0xba>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <USBD_StdDevReq+0x48>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5f5 	.word	0x0800a5f5
 800a5a4:	0800a609 	.word	0x0800a609
 800a5a8:	0800a613 	.word	0x0800a613
 800a5ac:	0800a5ff 	.word	0x0800a5ff
 800a5b0:	0800a613 	.word	0x0800a613
 800a5b4:	0800a5d3 	.word	0x0800a5d3
 800a5b8:	0800a5c9 	.word	0x0800a5c9
 800a5bc:	0800a613 	.word	0x0800a613
 800a5c0:	0800a5eb 	.word	0x0800a5eb
 800a5c4:	0800a5dd 	.word	0x0800a5dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9ce 	bl	800a96c <USBD_GetDescriptor>
      break;
 800a5d0:	e024      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fb45 	bl	800ac64 <USBD_SetAddress>
      break;
 800a5da:	e01f      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fb82 	bl	800ace8 <USBD_SetConfig>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e8:	e018      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fc1f 	bl	800ae30 <USBD_GetConfig>
      break;
 800a5f2:	e013      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fc4e 	bl	800ae98 <USBD_GetStatus>
      break;
 800a5fc:	e00e      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fc7c 	bl	800aefe <USBD_SetFeature>
      break;
 800a606:	e009      	b.n	800a61c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fc8b 	bl	800af26 <USBD_ClrFeature>
      break;
 800a610:	e004      	b.n	800a61c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fce1 	bl	800afdc <USBD_CtlError>
      break;
 800a61a:	bf00      	nop
    }
    break;
 800a61c:	e004      	b.n	800a628 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fcdb 	bl	800afdc <USBD_CtlError>
    break;
 800a626:	bf00      	nop
  }

  return ret;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop

0800a634 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d003      	beq.n	800a656 <USBD_StdItfReq+0x22>
 800a64e:	2b40      	cmp	r3, #64	; 0x40
 800a650:	d001      	beq.n	800a656 <USBD_StdItfReq+0x22>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d12a      	bne.n	800a6ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a65c:	3b01      	subs	r3, #1
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d81d      	bhi.n	800a69e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	889b      	ldrh	r3, [r3, #4]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d813      	bhi.n	800a694 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	4798      	blx	r3
 800a67a:	4603      	mov	r3, r0
 800a67c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	88db      	ldrh	r3, [r3, #6]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d110      	bne.n	800a6a8 <USBD_StdItfReq+0x74>
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10d      	bne.n	800a6a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fd70 	bl	800b172 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a692:	e009      	b.n	800a6a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fca0 	bl	800afdc <USBD_CtlError>
      break;
 800a69c:	e004      	b.n	800a6a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fc9b 	bl	800afdc <USBD_CtlError>
      break;
 800a6a6:	e000      	b.n	800a6aa <USBD_StdItfReq+0x76>
      break;
 800a6a8:	bf00      	nop
    }
    break;
 800a6aa:	e004      	b.n	800a6b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fc94 	bl	800afdc <USBD_CtlError>
    break;
 800a6b4:	bf00      	nop
  }

  return ret;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	889b      	ldrh	r3, [r3, #4]
 800a6d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d004      	beq.n	800a6ea <USBD_StdEPReq+0x2a>
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d002      	beq.n	800a6ea <USBD_StdEPReq+0x2a>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <USBD_StdEPReq+0x3e>
 800a6e8:	e135      	b.n	800a956 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	4798      	blx	r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a6fc:	e130      	b.n	800a960 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	785b      	ldrb	r3, [r3, #1]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d03e      	beq.n	800a784 <USBD_StdEPReq+0xc4>
 800a706:	2b03      	cmp	r3, #3
 800a708:	d002      	beq.n	800a710 <USBD_StdEPReq+0x50>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d077      	beq.n	800a7fe <USBD_StdEPReq+0x13e>
 800a70e:	e11c      	b.n	800a94a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a716:	2b02      	cmp	r3, #2
 800a718:	d002      	beq.n	800a720 <USBD_StdEPReq+0x60>
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d015      	beq.n	800a74a <USBD_StdEPReq+0x8a>
 800a71e:	e02b      	b.n	800a778 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00c      	beq.n	800a740 <USBD_StdEPReq+0x80>
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b80      	cmp	r3, #128	; 0x80
 800a72a:	d009      	beq.n	800a740 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 f8b9 	bl	800b8a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a736:	2180      	movs	r1, #128	; 0x80
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f8b5 	bl	800b8a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a73e:	e020      	b.n	800a782 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fc4a 	bl	800afdc <USBD_CtlError>
        break;
 800a748:	e01b      	b.n	800a782 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	885b      	ldrh	r3, [r3, #2]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10e      	bne.n	800a770 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <USBD_StdEPReq+0xb0>
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b80      	cmp	r3, #128	; 0x80
 800a75c:	d008      	beq.n	800a770 <USBD_StdEPReq+0xb0>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	88db      	ldrh	r3, [r3, #6]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f001 f89c 	bl	800b8a8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fcfe 	bl	800b172 <USBD_CtlSendStatus>

        break;
 800a776:	e004      	b.n	800a782 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fc2e 	bl	800afdc <USBD_CtlError>
        break;
 800a780:	bf00      	nop
      }
      break;
 800a782:	e0e7      	b.n	800a954 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d002      	beq.n	800a794 <USBD_StdEPReq+0xd4>
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d015      	beq.n	800a7be <USBD_StdEPReq+0xfe>
 800a792:	e02d      	b.n	800a7f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <USBD_StdEPReq+0xf4>
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	2b80      	cmp	r3, #128	; 0x80
 800a79e:	d009      	beq.n	800a7b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f87f 	bl	800b8a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7aa:	2180      	movs	r1, #128	; 0x80
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 f87b 	bl	800b8a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a7b2:	e023      	b.n	800a7fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fc10 	bl	800afdc <USBD_CtlError>
        break;
 800a7bc:	e01e      	b.n	800a7fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	885b      	ldrh	r3, [r3, #2]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d119      	bne.n	800a7fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 f886 	bl	800b8e6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fcc9 	bl	800b172 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	4798      	blx	r3
        }
        break;
 800a7ee:	e004      	b.n	800a7fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fbf2 	bl	800afdc <USBD_CtlError>
        break;
 800a7f8:	e000      	b.n	800a7fc <USBD_StdEPReq+0x13c>
        break;
 800a7fa:	bf00      	nop
      }
      break;
 800a7fc:	e0aa      	b.n	800a954 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a804:	2b02      	cmp	r3, #2
 800a806:	d002      	beq.n	800a80e <USBD_StdEPReq+0x14e>
 800a808:	2b03      	cmp	r3, #3
 800a80a:	d032      	beq.n	800a872 <USBD_StdEPReq+0x1b2>
 800a80c:	e097      	b.n	800a93e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <USBD_StdEPReq+0x164>
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b80      	cmp	r3, #128	; 0x80
 800a818:	d004      	beq.n	800a824 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fbdd 	bl	800afdc <USBD_CtlError>
          break;
 800a822:	e091      	b.n	800a948 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	da0b      	bge.n	800a844 <USBD_StdEPReq+0x184>
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	3310      	adds	r3, #16
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	4413      	add	r3, r2
 800a840:	3304      	adds	r3, #4
 800a842:	e00b      	b.n	800a85c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	3304      	adds	r3, #4
 800a85c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2202      	movs	r2, #2
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fc27 	bl	800b0be <USBD_CtlSendData>
        break;
 800a870:	e06a      	b.n	800a948 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a876:	2b00      	cmp	r3, #0
 800a878:	da11      	bge.n	800a89e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	f003 020f 	and.w	r2, r3, #15
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	3324      	adds	r3, #36	; 0x24
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d117      	bne.n	800a8c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fba0 	bl	800afdc <USBD_CtlError>
            break;
 800a89c:	e054      	b.n	800a948 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	f003 020f 	and.w	r2, r3, #15
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fb8d 	bl	800afdc <USBD_CtlError>
            break;
 800a8c2:	e041      	b.n	800a948 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da0b      	bge.n	800a8e4 <USBD_StdEPReq+0x224>
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	3310      	adds	r3, #16
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	4413      	add	r3, r2
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	e00b      	b.n	800a8fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <USBD_StdEPReq+0x24a>
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	2b80      	cmp	r3, #128	; 0x80
 800a908:	d103      	bne.n	800a912 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e00e      	b.n	800a930 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f001 f804 	bl	800b924 <USBD_LL_IsStallEP>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2201      	movs	r2, #1
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	e002      	b.n	800a930 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2202      	movs	r2, #2
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fbc1 	bl	800b0be <USBD_CtlSendData>
          break;
 800a93c:	e004      	b.n	800a948 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fb4b 	bl	800afdc <USBD_CtlError>
        break;
 800a946:	bf00      	nop
      }
      break;
 800a948:	e004      	b.n	800a954 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fb45 	bl	800afdc <USBD_CtlError>
      break;
 800a952:	bf00      	nop
    }
    break;
 800a954:	e004      	b.n	800a960 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fb3f 	bl	800afdc <USBD_CtlError>
    break;
 800a95e:	bf00      	nop
  }

  return ret;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	0a1b      	lsrs	r3, r3, #8
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b01      	subs	r3, #1
 800a98c:	2b06      	cmp	r3, #6
 800a98e:	f200 813b 	bhi.w	800ac08 <USBD_GetDescriptor+0x29c>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <USBD_GetDescriptor+0x2c>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800a9b5 	.word	0x0800a9b5
 800a99c:	0800a9cd 	.word	0x0800a9cd
 800a9a0:	0800aa0d 	.word	0x0800aa0d
 800a9a4:	0800ac09 	.word	0x0800ac09
 800a9a8:	0800ac09 	.word	0x0800ac09
 800a9ac:	0800aba9 	.word	0x0800aba9
 800a9b0:	0800abd5 	.word	0x0800abd5
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	7c12      	ldrb	r2, [r2, #16]
 800a9c0:	f107 0108 	add.w	r1, r7, #8
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4798      	blx	r3
 800a9c8:	60f8      	str	r0, [r7, #12]
    break;
 800a9ca:	e125      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7c1b      	ldrb	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10d      	bne.n	800a9f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	f107 0208 	add.w	r2, r7, #8
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a9ee:	e113      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	f107 0208 	add.w	r2, r7, #8
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
    break;
 800aa0a:	e105      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	885b      	ldrh	r3, [r3, #2]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b05      	cmp	r3, #5
 800aa14:	f200 80ac 	bhi.w	800ab70 <USBD_GetDescriptor+0x204>
 800aa18:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBD_GetDescriptor+0xb4>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa39 	.word	0x0800aa39
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aaa1 	.word	0x0800aaa1
 800aa2c:	0800aad5 	.word	0x0800aad5
 800aa30:	0800ab09 	.word	0x0800ab09
 800aa34:	0800ab3d 	.word	0x0800ab3d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	7c12      	ldrb	r2, [r2, #16]
 800aa50:	f107 0108 	add.w	r1, r7, #8
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa5a:	e0a4      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fabc 	bl	800afdc <USBD_CtlError>
        err++;
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	3301      	adds	r3, #1
 800aa68:	72fb      	strb	r3, [r7, #11]
      break;
 800aa6a:	e09c      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	7c12      	ldrb	r2, [r2, #16]
 800aa84:	f107 0108 	add.w	r1, r7, #8
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
 800aa8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa8e:	e08a      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 faa2 	bl	800afdc <USBD_CtlError>
        err++;
 800aa98:	7afb      	ldrb	r3, [r7, #11]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	72fb      	strb	r3, [r7, #11]
      break;
 800aa9e:	e082      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	7c12      	ldrb	r2, [r2, #16]
 800aab8:	f107 0108 	add.w	r1, r7, #8
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
 800aac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aac2:	e070      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa88 	bl	800afdc <USBD_CtlError>
        err++;
 800aacc:	7afb      	ldrb	r3, [r7, #11]
 800aace:	3301      	adds	r3, #1
 800aad0:	72fb      	strb	r3, [r7, #11]
      break;
 800aad2:	e068      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	7c12      	ldrb	r2, [r2, #16]
 800aaec:	f107 0108 	add.w	r1, r7, #8
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	4798      	blx	r3
 800aaf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaf6:	e056      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa6e 	bl	800afdc <USBD_CtlError>
        err++;
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	3301      	adds	r3, #1
 800ab04:	72fb      	strb	r3, [r7, #11]
      break;
 800ab06:	e04e      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	7c12      	ldrb	r2, [r2, #16]
 800ab20:	f107 0108 	add.w	r1, r7, #8
 800ab24:	4610      	mov	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab2a:	e03c      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa54 	bl	800afdc <USBD_CtlError>
        err++;
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	3301      	adds	r3, #1
 800ab38:	72fb      	strb	r3, [r7, #11]
      break;
 800ab3a:	e034      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab5e:	e022      	b.n	800aba6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa3a 	bl	800afdc <USBD_CtlError>
        err++;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab6e:	e01a      	b.n	800aba6 <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	8852      	ldrh	r2, [r2, #2]
 800ab88:	b2d1      	uxtb	r1, r2
 800ab8a:	f107 0208 	add.w	r2, r7, #8
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	4798      	blx	r3
 800ab92:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 800ab94:	e006      	b.n	800aba4 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fa1f 	bl	800afdc <USBD_CtlError>
        err++;
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	3301      	adds	r3, #1
 800aba2:	72fb      	strb	r3, [r7, #11]
      break;
 800aba4:	bf00      	nop
    }
    break;
 800aba6:	e037      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7c1b      	ldrb	r3, [r3, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d109      	bne.n	800abc4 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb8:	f107 0208 	add.w	r2, r7, #8
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
 800abc0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800abc2:	e029      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fa08 	bl	800afdc <USBD_CtlError>
      err++;
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	3301      	adds	r3, #1
 800abd0:	72fb      	strb	r3, [r7, #11]
    break;
 800abd2:	e021      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7c1b      	ldrb	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10d      	bne.n	800abf8 <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	f107 0208 	add.w	r2, r7, #8
 800abe8:	4610      	mov	r0, r2
 800abea:	4798      	blx	r3
 800abec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3301      	adds	r3, #1
 800abf2:	2207      	movs	r2, #7
 800abf4:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800abf6:	e00f      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9ee 	bl	800afdc <USBD_CtlError>
      err++;
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	3301      	adds	r3, #1
 800ac04:	72fb      	strb	r3, [r7, #11]
    break;
 800ac06:	e007      	b.n	800ac18 <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f9e6 	bl	800afdc <USBD_CtlError>
    err++;
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	3301      	adds	r3, #1
 800ac14:	72fb      	strb	r3, [r7, #11]
    break;
 800ac16:	bf00      	nop
  }

  if (err != 0U)
 800ac18:	7afb      	ldrb	r3, [r7, #11]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d11e      	bne.n	800ac5c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	88db      	ldrh	r3, [r3, #6]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d016      	beq.n	800ac54 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 800ac26:	893b      	ldrh	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00e      	beq.n	800ac4a <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	88da      	ldrh	r2, [r3, #6]
 800ac30:	893b      	ldrh	r3, [r7, #8]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	bf28      	it	cs
 800ac36:	4613      	movcs	r3, r2
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac3c:	893b      	ldrh	r3, [r7, #8]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68f9      	ldr	r1, [r7, #12]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa3b 	bl	800b0be <USBD_CtlSendData>
 800ac48:	e009      	b.n	800ac5e <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f9c5 	bl	800afdc <USBD_CtlError>
 800ac52:	e004      	b.n	800ac5e <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fa8c 	bl	800b172 <USBD_CtlSendStatus>
 800ac5a:	e000      	b.n	800ac5e <USBD_GetDescriptor+0x2f2>
    return;
 800ac5c:	bf00      	nop
    }
  }
}
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	889b      	ldrh	r3, [r3, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d130      	bne.n	800acd8 <USBD_SetAddress+0x74>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	88db      	ldrh	r3, [r3, #6]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d12c      	bne.n	800acd8 <USBD_SetAddress+0x74>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	885b      	ldrh	r3, [r3, #2]
 800ac82:	2b7f      	cmp	r3, #127	; 0x7f
 800ac84:	d828      	bhi.n	800acd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	885b      	ldrh	r3, [r3, #2]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d104      	bne.n	800aca6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f99c 	bl	800afdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca4:	e01c      	b.n	800ace0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7bfa      	ldrb	r2, [r7, #15]
 800acaa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fe62 	bl	800b97c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fa5a 	bl	800b172 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d004      	beq.n	800acce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800accc:	e008      	b.n	800ace0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd6:	e003      	b.n	800ace0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f97e 	bl	800afdc <USBD_CtlError>
  }
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	885b      	ldrh	r3, [r3, #2]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	4b4b      	ldr	r3, [pc, #300]	; (800ae2c <USBD_SetConfig+0x144>)
 800acfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad00:	4b4a      	ldr	r3, [pc, #296]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d905      	bls.n	800ad14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f966 	bl	800afdc <USBD_CtlError>
    return USBD_FAIL;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e087      	b.n	800ae24 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d002      	beq.n	800ad24 <USBD_SetConfig+0x3c>
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d025      	beq.n	800ad6e <USBD_SetConfig+0x86>
 800ad22:	e071      	b.n	800ae08 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ad24:	4b41      	ldr	r3, [pc, #260]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01c      	beq.n	800ad66 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ad2c:	4b3f      	ldr	r3, [pc, #252]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad36:	4b3d      	ldr	r3, [pc, #244]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff f995 	bl	800a06c <USBD_SetClassConfig>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f944 	bl	800afdc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ad54:	e065      	b.n	800ae22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa0b 	bl	800b172 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2203      	movs	r2, #3
 800ad60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ad64:	e05d      	b.n	800ae22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa03 	bl	800b172 <USBD_CtlSendStatus>
    break;
 800ad6c:	e059      	b.n	800ae22 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ad6e:	4b2f      	ldr	r3, [pc, #188]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d112      	bne.n	800ad9c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ad7e:	4b2b      	ldr	r3, [pc, #172]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad88:	4b28      	ldr	r3, [pc, #160]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff f988 	bl	800a0a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f9ec 	bl	800b172 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ad9a:	e042      	b.n	800ae22 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ad9c:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <USBD_SetConfig+0x144>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d02a      	beq.n	800ae00 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff f976 	bl	800a0a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800adb8:	4b1c      	ldr	r3, [pc, #112]	; (800ae2c <USBD_SetConfig+0x144>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <USBD_SetConfig+0x144>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff f94f 	bl	800a06c <USBD_SetClassConfig>
 800adce:	4603      	mov	r3, r0
 800add0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00f      	beq.n	800adf8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f8fe 	bl	800afdc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff f95b 	bl	800a0a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800adf6:	e014      	b.n	800ae22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f9ba 	bl	800b172 <USBD_CtlSendStatus>
    break;
 800adfe:	e010      	b.n	800ae22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9b6 	bl	800b172 <USBD_CtlSendStatus>
    break;
 800ae06:	e00c      	b.n	800ae22 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f8e6 	bl	800afdc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae10:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <USBD_SetConfig+0x144>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff f944 	bl	800a0a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae20:	bf00      	nop
  }

  return ret;
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20000263 	.word	0x20000263

0800ae30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	88db      	ldrh	r3, [r3, #6]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d004      	beq.n	800ae4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f8c9 	bl	800afdc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ae4a:	e021      	b.n	800ae90 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	db17      	blt.n	800ae86 <USBD_GetConfig+0x56>
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	dd02      	ble.n	800ae60 <USBD_GetConfig+0x30>
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d00b      	beq.n	800ae76 <USBD_GetConfig+0x46>
 800ae5e:	e012      	b.n	800ae86 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f925 	bl	800b0be <USBD_CtlSendData>
      break;
 800ae74:	e00c      	b.n	800ae90 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f91d 	bl	800b0be <USBD_CtlSendData>
      break;
 800ae84:	e004      	b.n	800ae90 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f8a7 	bl	800afdc <USBD_CtlError>
      break;
 800ae8e:	bf00      	nop
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d81e      	bhi.n	800aeec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d004      	beq.n	800aec0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f88f 	bl	800afdc <USBD_CtlError>
      break;
 800aebe:	e01a      	b.n	800aef6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f043 0202 	orr.w	r2, r3, #2
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	330c      	adds	r3, #12
 800aee0:	2202      	movs	r2, #2
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f8ea 	bl	800b0be <USBD_CtlSendData>
    break;
 800aeea:	e004      	b.n	800aef6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f874 	bl	800afdc <USBD_CtlError>
    break;
 800aef4:	bf00      	nop
  }
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	885b      	ldrh	r3, [r3, #2]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d106      	bne.n	800af1e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f92a 	bl	800b172 <USBD_CtlSendStatus>
  }
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af36:	3b01      	subs	r3, #1
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d80b      	bhi.n	800af54 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	885b      	ldrh	r3, [r3, #2]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d10c      	bne.n	800af5e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f910 	bl	800b172 <USBD_CtlSendStatus>
      }
      break;
 800af52:	e004      	b.n	800af5e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f840 	bl	800afdc <USBD_CtlError>
      break;
 800af5c:	e000      	b.n	800af60 <USBD_ClrFeature+0x3a>
      break;
 800af5e:	bf00      	nop
  }
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	781a      	ldrb	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff fac1 	bl	800a51a <SWAPBYTE>
 800af98:	4603      	mov	r3, r0
 800af9a:	461a      	mov	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3301      	adds	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7ff fab4 	bl	800a51a <SWAPBYTE>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3301      	adds	r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff faa7 	bl	800a51a <SWAPBYTE>
 800afcc:	4603      	mov	r3, r0
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	80da      	strh	r2, [r3, #6]
}
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afe6:	2180      	movs	r1, #128	; 0x80
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fc5d 	bl	800b8a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afee:	2100      	movs	r1, #0
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fc59 	bl	800b8a8 <USBD_LL_StallEP>
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d036      	beq.n	800b082 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b018:	6938      	ldr	r0, [r7, #16]
 800b01a:	f000 f836 	bl	800b08a <USBD_GetLen>
 800b01e:	4603      	mov	r3, r0
 800b020:	3301      	adds	r3, #1
 800b022:	b29b      	uxth	r3, r3
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	4413      	add	r3, r2
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	7812      	ldrb	r2, [r2, #0]
 800b036:	701a      	strb	r2, [r3, #0]
  idx++;
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	3301      	adds	r3, #1
 800b03c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	4413      	add	r3, r2
 800b044:	2203      	movs	r2, #3
 800b046:	701a      	strb	r2, [r3, #0]
  idx++;
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	3301      	adds	r3, #1
 800b04c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b04e:	e013      	b.n	800b078 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	4413      	add	r3, r2
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	7812      	ldrb	r2, [r2, #0]
 800b05a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	3301      	adds	r3, #1
 800b060:	613b      	str	r3, [r7, #16]
    idx++;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	3301      	adds	r3, #1
 800b066:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	4413      	add	r3, r2
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
    idx++;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	3301      	adds	r3, #1
 800b076:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e7      	bne.n	800b050 <USBD_GetString+0x52>
 800b080:	e000      	b.n	800b084 <USBD_GetString+0x86>
    return;
 800b082:	bf00      	nop
  }
}
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b09a:	e005      	b.n	800b0a8 <USBD_GetLen+0x1e>
  {
    len++;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1f5      	bne.n	800b09c <USBD_GetLen+0x12>
  }

  return len;
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fc68 	bl	800b9ba <USBD_LL_Transmit>

  return USBD_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	2100      	movs	r1, #0
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 fc57 	bl	800b9ba <USBD_LL_Transmit>

  return USBD_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2203      	movs	r2, #3
 800b126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	2100      	movs	r1, #0
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 fc5b 	bl	800b9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	2100      	movs	r1, #0
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fc4a 	bl	800b9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2204      	movs	r2, #4
 800b17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b182:	2300      	movs	r3, #0
 800b184:	2200      	movs	r2, #0
 800b186:	2100      	movs	r1, #0
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fc16 	bl	800b9ba <USBD_LL_Transmit>

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2205      	movs	r2, #5
 800b1a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fc24 	bl	800b9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4912      	ldr	r1, [pc, #72]	; (800b210 <MX_USB_DEVICE_Init+0x50>)
 800b1c8:	4812      	ldr	r0, [pc, #72]	; (800b214 <MX_USB_DEVICE_Init+0x54>)
 800b1ca:	f7fe febb 	bl	8009f44 <USBD_Init>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1d4:	f7f7 fbd8 	bl	8002988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800b1d8:	490f      	ldr	r1, [pc, #60]	; (800b218 <MX_USB_DEVICE_Init+0x58>)
 800b1da:	480e      	ldr	r0, [pc, #56]	; (800b214 <MX_USB_DEVICE_Init+0x54>)
 800b1dc:	f7fe fee8 	bl	8009fb0 <USBD_RegisterClass>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1e6:	f7f7 fbcf 	bl	8002988 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800b1ea:	490c      	ldr	r1, [pc, #48]	; (800b21c <MX_USB_DEVICE_Init+0x5c>)
 800b1ec:	4809      	ldr	r0, [pc, #36]	; (800b214 <MX_USB_DEVICE_Init+0x54>)
 800b1ee:	f7fe fb43 	bl	8009878 <USBD_DFU_RegisterMedia>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1f8:	f7f7 fbc6 	bl	8002988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1fc:	4805      	ldr	r0, [pc, #20]	; (800b214 <MX_USB_DEVICE_Init+0x54>)
 800b1fe:	f7fe fef8 	bl	8009ff2 <USBD_Start>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b208:	f7f7 fbbe 	bl	8002988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b20c:	bf00      	nop
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000070 	.word	0x20000070
 800b214:	20000820 	.word	0x20000820
 800b218:	2000000c 	.word	0x2000000c
 800b21c:	200000c0 	.word	0x200000c0

0800b220 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2212      	movs	r2, #18
 800b230:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	2000008c 	.word	0x2000008c

0800b244 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2204      	movs	r2, #4
 800b254:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b256:	4b03      	ldr	r3, [pc, #12]	; (800b264 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	200000a0 	.word	0x200000a0

0800b268 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4907      	ldr	r1, [pc, #28]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
 800b27e:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b280:	f7ff febd 	bl	800affe <USBD_GetString>
 800b284:	e004      	b.n	800b290 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4904      	ldr	r1, [pc, #16]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
 800b28a:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b28c:	f7ff feb7 	bl	800affe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20000af0 	.word	0x20000af0
 800b2a0:	0800bca8 	.word	0x0800bca8

0800b2a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	4904      	ldr	r1, [pc, #16]	; (800b2c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2b4:	4804      	ldr	r0, [pc, #16]	; (800b2c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2b6:	f7ff fea2 	bl	800affe <USBD_GetString>
  return USBD_StrDesc;
 800b2ba:	4b02      	ldr	r3, [pc, #8]	; (800b2c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000af0 	.word	0x20000af0
 800b2c8:	0800bcc8 	.word	0x0800bcc8

0800b2cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	221a      	movs	r2, #26
 800b2dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2de:	f000 f843 	bl	800b368 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2e2:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	200000a4 	.word	0x200000a4

0800b2f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d105      	bne.n	800b30e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	4907      	ldr	r1, [pc, #28]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b306:	4808      	ldr	r0, [pc, #32]	; (800b328 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b308:	f7ff fe79 	bl	800affe <USBD_GetString>
 800b30c:	e004      	b.n	800b318 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b312:	4805      	ldr	r0, [pc, #20]	; (800b328 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b314:	f7ff fe73 	bl	800affe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000af0 	.word	0x20000af0
 800b328:	0800bcdc 	.word	0x0800bcdc

0800b32c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	6039      	str	r1, [r7, #0]
 800b336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	4907      	ldr	r1, [pc, #28]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b342:	4808      	ldr	r0, [pc, #32]	; (800b364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b344:	f7ff fe5b 	bl	800affe <USBD_GetString>
 800b348:	e004      	b.n	800b354 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4904      	ldr	r1, [pc, #16]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b34e:	4805      	ldr	r0, [pc, #20]	; (800b364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b350:	f7ff fe55 	bl	800affe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000af0 	.word	0x20000af0
 800b364:	0800bce8 	.word	0x0800bce8

0800b368 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <Get_SerialNum+0x44>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b374:	4b0e      	ldr	r3, [pc, #56]	; (800b3b0 <Get_SerialNum+0x48>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b37a:	4b0e      	ldr	r3, [pc, #56]	; (800b3b4 <Get_SerialNum+0x4c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4413      	add	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d009      	beq.n	800b3a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b38e:	2208      	movs	r2, #8
 800b390:	4909      	ldr	r1, [pc, #36]	; (800b3b8 <Get_SerialNum+0x50>)
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 f814 	bl	800b3c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b398:	2204      	movs	r2, #4
 800b39a:	4908      	ldr	r1, [pc, #32]	; (800b3bc <Get_SerialNum+0x54>)
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f000 f80f 	bl	800b3c0 <IntToUnicode>
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	1fff7a10 	.word	0x1fff7a10
 800b3b0:	1fff7a14 	.word	0x1fff7a14
 800b3b4:	1fff7a18 	.word	0x1fff7a18
 800b3b8:	200000a6 	.word	0x200000a6
 800b3bc:	200000b6 	.word	0x200000b6

0800b3c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
 800b3d6:	e027      	b.n	800b428 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	0f1b      	lsrs	r3, r3, #28
 800b3dc:	2b09      	cmp	r3, #9
 800b3de:	d80b      	bhi.n	800b3f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	0f1b      	lsrs	r3, r3, #28
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	440b      	add	r3, r1
 800b3f0:	3230      	adds	r2, #48	; 0x30
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	e00a      	b.n	800b40e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	0f1b      	lsrs	r3, r3, #28
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	4619      	mov	r1, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	440b      	add	r3, r1
 800b408:	3237      	adds	r2, #55	; 0x37
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	3301      	adds	r3, #1
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	4413      	add	r3, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	7dfa      	ldrb	r2, [r7, #23]
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3d3      	bcc.n	800b3d8 <IntToUnicode+0x18>
  }
}
 800b430:	bf00      	nop
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800b440:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b442:	4618      	mov	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800b450:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b452:	4618      	mov	r0, r3
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800b464:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800b47e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800b498:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d000      	beq.n	800b4bc <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800b4ba:	e000      	b.n	800b4be <MEM_If_GetStatus_FS+0x18>
    break;
 800b4bc:	bf00      	nop
  }
  return (USBD_OK);
 800b4be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d4:	f107 0314 	add.w	r3, r7, #20
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	605a      	str	r2, [r3, #4]
 800b4de:	609a      	str	r2, [r3, #8]
 800b4e0:	60da      	str	r2, [r3, #12]
 800b4e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4ec:	d13a      	bne.n	800b564 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	613b      	str	r3, [r7, #16]
 800b4f2:	4b1e      	ldr	r3, [pc, #120]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	4a1d      	ldr	r2, [pc, #116]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b4f8:	f043 0301 	orr.w	r3, r3, #1
 800b4fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b4fe:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b50a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b50e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b510:	2302      	movs	r3, #2
 800b512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b514:	2300      	movs	r3, #0
 800b516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b518:	2303      	movs	r3, #3
 800b51a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b51c:	230a      	movs	r3, #10
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b520:	f107 0314 	add.w	r3, r7, #20
 800b524:	4619      	mov	r1, r3
 800b526:	4812      	ldr	r0, [pc, #72]	; (800b570 <HAL_PCD_MspInit+0xa4>)
 800b528:	f7f8 fdb0 	bl	800408c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b52c:	4b0f      	ldr	r3, [pc, #60]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b530:	4a0e      	ldr	r2, [pc, #56]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b536:	6353      	str	r3, [r2, #52]	; 0x34
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b540:	4a0a      	ldr	r2, [pc, #40]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b546:	6453      	str	r3, [r2, #68]	; 0x44
 800b548:	4b08      	ldr	r3, [pc, #32]	; (800b56c <HAL_PCD_MspInit+0xa0>)
 800b54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	2043      	movs	r0, #67	; 0x43
 800b55a:	f7f8 fa5c 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b55e:	2043      	movs	r0, #67	; 0x43
 800b560:	f7f8 fa75 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b564:	bf00      	nop
 800b566:	3728      	adds	r7, #40	; 0x28
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	40023800 	.word	0x40023800
 800b570:	40020000 	.word	0x40020000

0800b574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7fe fda2 	bl	800a0d4 <USBD_LL_SetupStage>
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	f7fe fdda 	bl	800a17a <USBD_LL_DataOutStage>
}
 800b5c6:	bf00      	nop
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3348      	adds	r3, #72	; 0x48
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f7fe fe23 	bl	800a240 <USBD_LL_DataInStage>
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe ff27 	bl	800a464 <USBD_LL_SOF>
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b626:	2301      	movs	r3, #1
 800b628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]
 800b636:	e008      	b.n	800b64a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d102      	bne.n	800b646 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
 800b644:	e001      	b.n	800b64a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b646:	f7f7 f99f 	bl	8002988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b650:	7bfa      	ldrb	r2, [r7, #15]
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe feca 	bl	800a3ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fe83 	bl	800a36c <USBD_LL_Reset>
}
 800b666:	bf00      	nop
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fec5 	bl	800a40e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6812      	ldr	r2, [r2, #0]
 800b692:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <HAL_PCD_SuspendCallback+0x48>)
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	4a03      	ldr	r2, [pc, #12]	; (800b6b8 <HAL_PCD_SuspendCallback+0x48>)
 800b6aa:	f043 0306 	orr.w	r3, r3, #6
 800b6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	e000ed00 	.word	0xe000ed00

0800b6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe feb4 	bl	800a438 <USBD_LL_Resume>
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fedf 	bl	800a4b2 <USBD_LL_IsoOUTIncomplete>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b70e:	78fa      	ldrb	r2, [r7, #3]
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fec0 	bl	800a498 <USBD_LL_IsoINIncomplete>
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fecc 	bl	800a4cc <USBD_LL_DevConnected>
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fec9 	bl	800a4e2 <USBD_LL_DevDisconnected>
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d13c      	bne.n	800b7e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b768:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <USBD_LL_Init+0x94>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <USBD_LL_Init+0x94>)
 800b774:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <USBD_LL_Init+0x94>)
 800b77a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b77e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b780:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <USBD_LL_Init+0x94>)
 800b782:	2204      	movs	r2, #4
 800b784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <USBD_LL_Init+0x94>)
 800b788:	2202      	movs	r2, #2
 800b78a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b78c:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <USBD_LL_Init+0x94>)
 800b78e:	2200      	movs	r2, #0
 800b790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b792:	4b16      	ldr	r3, [pc, #88]	; (800b7ec <USBD_LL_Init+0x94>)
 800b794:	2202      	movs	r2, #2
 800b796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b798:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <USBD_LL_Init+0x94>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b7a4:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b7aa:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b7b0:	4b0e      	ldr	r3, [pc, #56]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b7b6:	480d      	ldr	r0, [pc, #52]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7b8:	f7f8 ff54 	bl	8004664 <HAL_PCD_Init>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b7c2:	f7f7 f8e1 	bl	8002988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b7c6:	2180      	movs	r1, #128	; 0x80
 800b7c8:	4808      	ldr	r0, [pc, #32]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7ca:	f7fa f880 	bl	80058ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b7ce:	2240      	movs	r2, #64	; 0x40
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4806      	ldr	r0, [pc, #24]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7d4:	f7fa f834 	bl	8005840 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b7d8:	2280      	movs	r2, #128	; 0x80
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4803      	ldr	r0, [pc, #12]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7de:	f7fa f82f 	bl	8005840 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20000cf0 	.word	0x20000cf0

0800b7f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b806:	4618      	mov	r0, r3
 800b808:	f7f9 f849 	bl	800489e <HAL_PCD_Start>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b810:	7bfb      	ldrb	r3, [r7, #15]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f914 	bl	800ba40 <USBD_Get_USB_Status>
 800b818:	4603      	mov	r3, r0
 800b81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f9 f861 	bl	8004904 <HAL_PCD_Stop>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f8f9 	bl	800ba40 <USBD_Get_USB_Status>
 800b84e:	4603      	mov	r3, r0
 800b850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b852:	7bbb      	ldrb	r3, [r7, #14]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	4608      	mov	r0, r1
 800b866:	4611      	mov	r1, r2
 800b868:	461a      	mov	r2, r3
 800b86a:	4603      	mov	r3, r0
 800b86c:	70fb      	strb	r3, [r7, #3]
 800b86e:	460b      	mov	r3, r1
 800b870:	70bb      	strb	r3, [r7, #2]
 800b872:	4613      	mov	r3, r2
 800b874:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b884:	78bb      	ldrb	r3, [r7, #2]
 800b886:	883a      	ldrh	r2, [r7, #0]
 800b888:	78f9      	ldrb	r1, [r7, #3]
 800b88a:	f7f9 fc42 	bl	8005112 <HAL_PCD_EP_Open>
 800b88e:	4603      	mov	r3, r0
 800b890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b892:	7bfb      	ldrb	r3, [r7, #15]
 800b894:	4618      	mov	r0, r3
 800b896:	f000 f8d3 	bl	800ba40 <USBD_Get_USB_Status>
 800b89a:	4603      	mov	r3, r0
 800b89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8c2:	78fa      	ldrb	r2, [r7, #3]
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7f9 fd20 	bl	800530c <HAL_PCD_EP_SetStall>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 f8b4 	bl	800ba40 <USBD_Get_USB_Status>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b900:	78fa      	ldrb	r2, [r7, #3]
 800b902:	4611      	mov	r1, r2
 800b904:	4618      	mov	r0, r3
 800b906:	f7f9 fd65 	bl	80053d4 <HAL_PCD_EP_ClrStall>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
 800b910:	4618      	mov	r0, r3
 800b912:	f000 f895 	bl	800ba40 <USBD_Get_USB_Status>
 800b916:	4603      	mov	r3, r0
 800b918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da0b      	bge.n	800b958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b946:	68f9      	ldr	r1, [r7, #12]
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	333e      	adds	r3, #62	; 0x3e
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	e00b      	b.n	800b970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b95e:	68f9      	ldr	r1, [r7, #12]
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	1a9b      	subs	r3, r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	440b      	add	r3, r1
 800b96a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b96e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b996:	78fa      	ldrb	r2, [r7, #3]
 800b998:	4611      	mov	r1, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f9 fb94 	bl	80050c8 <HAL_PCD_SetAddress>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 f84a 	bl	800ba40 <USBD_Get_USB_Status>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9d8:	7af9      	ldrb	r1, [r7, #11]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	f7f9 fc4b 	bl	8005278 <HAL_PCD_EP_Transmit>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 f829 	bl	800ba40 <USBD_Get_USB_Status>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba1a:	7af9      	ldrb	r1, [r7, #11]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	f7f9 fbdf 	bl	80051e2 <HAL_PCD_EP_Receive>
 800ba24:	4603      	mov	r3, r0
 800ba26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f808 	bl	800ba40 <USBD_Get_USB_Status>
 800ba30:	4603      	mov	r3, r0
 800ba32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba4e:	79fb      	ldrb	r3, [r7, #7]
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d817      	bhi.n	800ba84 <USBD_Get_USB_Status+0x44>
 800ba54:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <USBD_Get_USB_Status+0x1c>)
 800ba56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5a:	bf00      	nop
 800ba5c:	0800ba6d 	.word	0x0800ba6d
 800ba60:	0800ba73 	.word	0x0800ba73
 800ba64:	0800ba79 	.word	0x0800ba79
 800ba68:	0800ba7f 	.word	0x0800ba7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	e00b      	b.n	800ba8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba72:	2303      	movs	r3, #3
 800ba74:	73fb      	strb	r3, [r7, #15]
    break;
 800ba76:	e008      	b.n	800ba8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	e005      	b.n	800ba8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	73fb      	strb	r3, [r7, #15]
    break;
 800ba82:	e002      	b.n	800ba8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	73fb      	strb	r3, [r7, #15]
    break;
 800ba88:	bf00      	nop
  }
  return usb_status;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <__errno>:
 800ba98:	4b01      	ldr	r3, [pc, #4]	; (800baa0 <__errno+0x8>)
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	200000dc 	.word	0x200000dc

0800baa4 <__libc_init_array>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	4e0d      	ldr	r6, [pc, #52]	; (800badc <__libc_init_array+0x38>)
 800baa8:	4c0d      	ldr	r4, [pc, #52]	; (800bae0 <__libc_init_array+0x3c>)
 800baaa:	1ba4      	subs	r4, r4, r6
 800baac:	10a4      	asrs	r4, r4, #2
 800baae:	2500      	movs	r5, #0
 800bab0:	42a5      	cmp	r5, r4
 800bab2:	d109      	bne.n	800bac8 <__libc_init_array+0x24>
 800bab4:	4e0b      	ldr	r6, [pc, #44]	; (800bae4 <__libc_init_array+0x40>)
 800bab6:	4c0c      	ldr	r4, [pc, #48]	; (800bae8 <__libc_init_array+0x44>)
 800bab8:	f000 f8ea 	bl	800bc90 <_init>
 800babc:	1ba4      	subs	r4, r4, r6
 800babe:	10a4      	asrs	r4, r4, #2
 800bac0:	2500      	movs	r5, #0
 800bac2:	42a5      	cmp	r5, r4
 800bac4:	d105      	bne.n	800bad2 <__libc_init_array+0x2e>
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bacc:	4798      	blx	r3
 800bace:	3501      	adds	r5, #1
 800bad0:	e7ee      	b.n	800bab0 <__libc_init_array+0xc>
 800bad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bad6:	4798      	blx	r3
 800bad8:	3501      	adds	r5, #1
 800bada:	e7f2      	b.n	800bac2 <__libc_init_array+0x1e>
 800badc:	0800bd80 	.word	0x0800bd80
 800bae0:	0800bd80 	.word	0x0800bd80
 800bae4:	0800bd80 	.word	0x0800bd80
 800bae8:	0800bd84 	.word	0x0800bd84

0800baec <malloc>:
 800baec:	4b02      	ldr	r3, [pc, #8]	; (800baf8 <malloc+0xc>)
 800baee:	4601      	mov	r1, r0
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	f000 b861 	b.w	800bbb8 <_malloc_r>
 800baf6:	bf00      	nop
 800baf8:	200000dc 	.word	0x200000dc

0800bafc <free>:
 800bafc:	4b02      	ldr	r3, [pc, #8]	; (800bb08 <free+0xc>)
 800bafe:	4601      	mov	r1, r0
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	f000 b80b 	b.w	800bb1c <_free_r>
 800bb06:	bf00      	nop
 800bb08:	200000dc 	.word	0x200000dc

0800bb0c <memset>:
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d100      	bne.n	800bb16 <memset+0xa>
 800bb14:	4770      	bx	lr
 800bb16:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1a:	e7f9      	b.n	800bb10 <memset+0x4>

0800bb1c <_free_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4605      	mov	r5, r0
 800bb20:	2900      	cmp	r1, #0
 800bb22:	d045      	beq.n	800bbb0 <_free_r+0x94>
 800bb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb28:	1f0c      	subs	r4, r1, #4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfb8      	it	lt
 800bb2e:	18e4      	addlt	r4, r4, r3
 800bb30:	f000 f8ac 	bl	800bc8c <__malloc_lock>
 800bb34:	4a1f      	ldr	r2, [pc, #124]	; (800bbb4 <_free_r+0x98>)
 800bb36:	6813      	ldr	r3, [r2, #0]
 800bb38:	4610      	mov	r0, r2
 800bb3a:	b933      	cbnz	r3, 800bb4a <_free_r+0x2e>
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	6014      	str	r4, [r2, #0]
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb46:	f000 b8a2 	b.w	800bc8e <__malloc_unlock>
 800bb4a:	42a3      	cmp	r3, r4
 800bb4c:	d90c      	bls.n	800bb68 <_free_r+0x4c>
 800bb4e:	6821      	ldr	r1, [r4, #0]
 800bb50:	1862      	adds	r2, r4, r1
 800bb52:	4293      	cmp	r3, r2
 800bb54:	bf04      	itt	eq
 800bb56:	681a      	ldreq	r2, [r3, #0]
 800bb58:	685b      	ldreq	r3, [r3, #4]
 800bb5a:	6063      	str	r3, [r4, #4]
 800bb5c:	bf04      	itt	eq
 800bb5e:	1852      	addeq	r2, r2, r1
 800bb60:	6022      	streq	r2, [r4, #0]
 800bb62:	6004      	str	r4, [r0, #0]
 800bb64:	e7ec      	b.n	800bb40 <_free_r+0x24>
 800bb66:	4613      	mov	r3, r2
 800bb68:	685a      	ldr	r2, [r3, #4]
 800bb6a:	b10a      	cbz	r2, 800bb70 <_free_r+0x54>
 800bb6c:	42a2      	cmp	r2, r4
 800bb6e:	d9fa      	bls.n	800bb66 <_free_r+0x4a>
 800bb70:	6819      	ldr	r1, [r3, #0]
 800bb72:	1858      	adds	r0, r3, r1
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d10b      	bne.n	800bb90 <_free_r+0x74>
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	4401      	add	r1, r0
 800bb7c:	1858      	adds	r0, r3, r1
 800bb7e:	4282      	cmp	r2, r0
 800bb80:	6019      	str	r1, [r3, #0]
 800bb82:	d1dd      	bne.n	800bb40 <_free_r+0x24>
 800bb84:	6810      	ldr	r0, [r2, #0]
 800bb86:	6852      	ldr	r2, [r2, #4]
 800bb88:	605a      	str	r2, [r3, #4]
 800bb8a:	4401      	add	r1, r0
 800bb8c:	6019      	str	r1, [r3, #0]
 800bb8e:	e7d7      	b.n	800bb40 <_free_r+0x24>
 800bb90:	d902      	bls.n	800bb98 <_free_r+0x7c>
 800bb92:	230c      	movs	r3, #12
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	e7d3      	b.n	800bb40 <_free_r+0x24>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	1821      	adds	r1, r4, r0
 800bb9c:	428a      	cmp	r2, r1
 800bb9e:	bf04      	itt	eq
 800bba0:	6811      	ldreq	r1, [r2, #0]
 800bba2:	6852      	ldreq	r2, [r2, #4]
 800bba4:	6062      	str	r2, [r4, #4]
 800bba6:	bf04      	itt	eq
 800bba8:	1809      	addeq	r1, r1, r0
 800bbaa:	6021      	streq	r1, [r4, #0]
 800bbac:	605c      	str	r4, [r3, #4]
 800bbae:	e7c7      	b.n	800bb40 <_free_r+0x24>
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000264 	.word	0x20000264

0800bbb8 <_malloc_r>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	1ccd      	adds	r5, r1, #3
 800bbbc:	f025 0503 	bic.w	r5, r5, #3
 800bbc0:	3508      	adds	r5, #8
 800bbc2:	2d0c      	cmp	r5, #12
 800bbc4:	bf38      	it	cc
 800bbc6:	250c      	movcc	r5, #12
 800bbc8:	2d00      	cmp	r5, #0
 800bbca:	4606      	mov	r6, r0
 800bbcc:	db01      	blt.n	800bbd2 <_malloc_r+0x1a>
 800bbce:	42a9      	cmp	r1, r5
 800bbd0:	d903      	bls.n	800bbda <_malloc_r+0x22>
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	6033      	str	r3, [r6, #0]
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
 800bbda:	f000 f857 	bl	800bc8c <__malloc_lock>
 800bbde:	4a21      	ldr	r2, [pc, #132]	; (800bc64 <_malloc_r+0xac>)
 800bbe0:	6814      	ldr	r4, [r2, #0]
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	b991      	cbnz	r1, 800bc0c <_malloc_r+0x54>
 800bbe6:	4c20      	ldr	r4, [pc, #128]	; (800bc68 <_malloc_r+0xb0>)
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	b91b      	cbnz	r3, 800bbf4 <_malloc_r+0x3c>
 800bbec:	4630      	mov	r0, r6
 800bbee:	f000 f83d 	bl	800bc6c <_sbrk_r>
 800bbf2:	6020      	str	r0, [r4, #0]
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f000 f838 	bl	800bc6c <_sbrk_r>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d124      	bne.n	800bc4a <_malloc_r+0x92>
 800bc00:	230c      	movs	r3, #12
 800bc02:	6033      	str	r3, [r6, #0]
 800bc04:	4630      	mov	r0, r6
 800bc06:	f000 f842 	bl	800bc8e <__malloc_unlock>
 800bc0a:	e7e4      	b.n	800bbd6 <_malloc_r+0x1e>
 800bc0c:	680b      	ldr	r3, [r1, #0]
 800bc0e:	1b5b      	subs	r3, r3, r5
 800bc10:	d418      	bmi.n	800bc44 <_malloc_r+0x8c>
 800bc12:	2b0b      	cmp	r3, #11
 800bc14:	d90f      	bls.n	800bc36 <_malloc_r+0x7e>
 800bc16:	600b      	str	r3, [r1, #0]
 800bc18:	50cd      	str	r5, [r1, r3]
 800bc1a:	18cc      	adds	r4, r1, r3
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f836 	bl	800bc8e <__malloc_unlock>
 800bc22:	f104 000b 	add.w	r0, r4, #11
 800bc26:	1d23      	adds	r3, r4, #4
 800bc28:	f020 0007 	bic.w	r0, r0, #7
 800bc2c:	1ac3      	subs	r3, r0, r3
 800bc2e:	d0d3      	beq.n	800bbd8 <_malloc_r+0x20>
 800bc30:	425a      	negs	r2, r3
 800bc32:	50e2      	str	r2, [r4, r3]
 800bc34:	e7d0      	b.n	800bbd8 <_malloc_r+0x20>
 800bc36:	428c      	cmp	r4, r1
 800bc38:	684b      	ldr	r3, [r1, #4]
 800bc3a:	bf16      	itet	ne
 800bc3c:	6063      	strne	r3, [r4, #4]
 800bc3e:	6013      	streq	r3, [r2, #0]
 800bc40:	460c      	movne	r4, r1
 800bc42:	e7eb      	b.n	800bc1c <_malloc_r+0x64>
 800bc44:	460c      	mov	r4, r1
 800bc46:	6849      	ldr	r1, [r1, #4]
 800bc48:	e7cc      	b.n	800bbe4 <_malloc_r+0x2c>
 800bc4a:	1cc4      	adds	r4, r0, #3
 800bc4c:	f024 0403 	bic.w	r4, r4, #3
 800bc50:	42a0      	cmp	r0, r4
 800bc52:	d005      	beq.n	800bc60 <_malloc_r+0xa8>
 800bc54:	1a21      	subs	r1, r4, r0
 800bc56:	4630      	mov	r0, r6
 800bc58:	f000 f808 	bl	800bc6c <_sbrk_r>
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d0cf      	beq.n	800bc00 <_malloc_r+0x48>
 800bc60:	6025      	str	r5, [r4, #0]
 800bc62:	e7db      	b.n	800bc1c <_malloc_r+0x64>
 800bc64:	20000264 	.word	0x20000264
 800bc68:	20000268 	.word	0x20000268

0800bc6c <_sbrk_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4c06      	ldr	r4, [pc, #24]	; (800bc88 <_sbrk_r+0x1c>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4605      	mov	r5, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	f7f7 fa86 	bl	8003188 <_sbrk>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_sbrk_r+0x1a>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_sbrk_r+0x1a>
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	200010f8 	.word	0x200010f8

0800bc8c <__malloc_lock>:
 800bc8c:	4770      	bx	lr

0800bc8e <__malloc_unlock>:
 800bc8e:	4770      	bx	lr

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
