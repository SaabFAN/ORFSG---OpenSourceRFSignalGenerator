
ARSG_MkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08009c70  08009c70  00019c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d40  08009d40  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d48  08009d48  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08009d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e8c  20000140  08009e90  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fcc  08009e90  00020fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9ec  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ea8  00000000  00000000  0003eb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a0  00000000  00000000  00042a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e8  00000000  00000000  000443a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000065bf  00000000  00000000  00045b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016a8b  00000000  00000000  0004c14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8870  00000000  00000000  00062bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e18  00000000  00000000  0013b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000140 	.word	0x20000140
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c58 	.word	0x08009c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000144 	.word	0x20000144
 80001c4:	08009c58 	.word	0x08009c58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f8c0 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f840 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fb00 	bl	8000ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 faa0 	bl	8000a1c <MX_DMA_Init>
  MX_CRC_Init();
 80004dc:	f000 f918 	bl	8000710 <MX_CRC_Init>
  MX_I2C1_Init();
 80004e0:	f000 f92a 	bl	8000738 <MX_I2C1_Init>
  MX_RNG_Init();
 80004e4:	f000 f956 	bl	8000794 <MX_RNG_Init>
  MX_SPI1_Init();
 80004e8:	f000 f968 	bl	80007bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 fa6c 	bl	80009c8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f008 fe4a 	bl	8009188 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80004f4:	f000 f998 	bl	8000828 <MX_SPI2_Init>
  MX_TIM3_Init();
 80004f8:	f000 f9cc 	bl	8000894 <MX_TIM3_Init>
  MX_ADC1_Init();
 80004fc:	f000 f89a 	bl	8000634 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(AD9957_CS_GPIO_Port, AD9957_CS_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4811      	ldr	r0, [pc, #68]	; (800054c <main+0x84>)
 8000508:	f002 f948 	bl	800279c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0x88>)
 8000514:	f002 f942 	bl	800279c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	480c      	ldr	r0, [pc, #48]	; (8000550 <main+0x88>)
 8000520:	f002 f93c 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052a:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x84>)
 800052c:	f002 f936 	bl	800279c <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x88>)
 8000538:	f002 f930 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <main+0x84>)
 8000544:	f002 f92a 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000548:	e7e6      	b.n	8000518 <main+0x50>
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40020800 	.word	0x40020800

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 fab6 	bl	8009ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <SystemClock_Config+0xd8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a2a      	ldr	r2, [pc, #168]	; (800062c <SystemClock_Config+0xd8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xd8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xdc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a24      	ldr	r2, [pc, #144]	; (8000630 <SystemClock_Config+0xdc>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c8:	23a8      	movs	r3, #168	; 0xa8
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fb83 	bl	8003ce4 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 fbbe 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2105      	movs	r1, #5
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fddc 	bl	80041c4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 fba7 	bl	8000d64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 8000616:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800061a:	2100      	movs	r1, #0
 800061c:	2001      	movs	r0, #1
 800061e:	f003 feb7 	bl	8004390 <HAL_RCC_MCOConfig>
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <MX_ADC1_Init+0xd4>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC1_Init+0xd0>)
 800064e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC1_Init+0xd0>)
 800065c:	2201      	movs	r2, #1
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000662:	2201      	movs	r2, #1
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000676:	4a25      	ldr	r2, [pc, #148]	; (800070c <MX_ADC1_Init+0xd8>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_ADC1_Init+0xd0>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000682:	2203      	movs	r2, #3
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000690:	2201      	movs	r2, #1
 8000692:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_ADC1_Init+0xd0>)
 8000696:	f001 f86f 	bl	8001778 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a0:	f000 fb60 	bl	8000d64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006a4:	2310      	movs	r3, #16
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006ac:	2307      	movs	r3, #7
 80006ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <MX_ADC1_Init+0xd0>)
 80006b6:	f001 f8a3 	bl	8001800 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c0:	f000 fb50 	bl	8000d64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80006c4:	2311      	movs	r3, #17
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ADC1_Init+0xd0>)
 80006d2:	f001 f895 	bl	8001800 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006dc:	f000 fb42 	bl	8000d64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80006e0:	2312      	movs	r3, #18
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0xd0>)
 80006ee:	f001 f887 	bl	8001800 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006f8:	f000 fb34 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000041c 	.word	0x2000041c
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_CRC_Init+0x20>)
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <MX_CRC_Init+0x24>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_CRC_Init+0x20>)
 800071c:	f001 fb9f 	bl	8001e5e <HAL_CRC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000726:	f000 fb1d 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000374 	.word	0x20000374
 8000734:	40023000 	.word	0x40023000

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f002 f82b 	bl	80027d0 <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 faf0 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000320 	.word	0x20000320
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_RNG_Init+0x20>)
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <MX_RNG_Init+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_RNG_Init+0x20>)
 80007a0:	f003 ff6a 	bl	8004678 <HAL_RNG_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007aa:	f000 fadb 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000564 	.word	0x20000564
 80007b8:	50060800 	.word	0x50060800

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_SPI1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SPI1_Init+0x64>)
 800080e:	f003 ff5d 	bl	80046cc <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 faa4 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000574 	.word	0x20000574
 8000824:	40013000 	.word	0x40013000

08000828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI2_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI2_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI2_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI2_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI2_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI2_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI2_Init+0x64>)
 800087a:	f003 ff27 	bl	80046cc <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 fa6e 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000268 	.word	0x20000268
 8000890:	40003800 	.word	0x40003800

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008d4:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <MX_TIM3_Init+0x130>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80008fa:	f003 ff4b 	bl	8004794 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000904:	f000 fa2e 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000912:	4619      	mov	r1, r3
 8000914:	482a      	ldr	r0, [pc, #168]	; (80009c0 <MX_TIM3_Init+0x12c>)
 8000916:	f004 f935 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 fa20 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000924:	4826      	ldr	r0, [pc, #152]	; (80009c0 <MX_TIM3_Init+0x12c>)
 8000926:	f003 ff60 	bl	80047ea <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000930:	f000 fa18 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000934:	4822      	ldr	r0, [pc, #136]	; (80009c0 <MX_TIM3_Init+0x12c>)
 8000936:	f003 ff8d 	bl	8004854 <HAL_TIM_IC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000940:	f000 fa10 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000950:	4619      	mov	r1, r3
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_TIM3_Init+0x12c>)
 8000954:	f004 fde2 	bl	800551c <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800095e:	f000 fa01 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2360      	movs	r3, #96	; 0x60
 8000964:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2208      	movs	r2, #8
 8000978:	4619      	mov	r1, r3
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_TIM3_Init+0x12c>)
 800097c:	f004 f83c 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000986:	f000 f9ed 	bl	8000d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800098e:	2301      	movs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	220c      	movs	r2, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80009a2:	f003 ff8c 	bl	80048be <HAL_TIM_IC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80009ac:	f000 f9da 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM3_Init+0x12c>)
 80009b2:	f000 fcd7 	bl	8001364 <HAL_TIM_MspPostInit>

}
 80009b6:	bf00      	nop
 80009b8:	3748      	adds	r7, #72	; 0x48
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003dc 	.word	0x200003dc
 80009c4:	40000400 	.word	0x40000400

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f004 fe08 	bl	8005614 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f9ab 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000464 	.word	0x20000464
 8000a18:	40011000 	.word	0x40011000

08000a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_DMA_Init+0xb8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	200b      	movs	r0, #11
 8000a60:	f001 f9c7 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a64:	200b      	movs	r0, #11
 8000a66:	f001 f9e0 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200e      	movs	r0, #14
 8000a70:	f001 f9bf 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a74:	200e      	movs	r0, #14
 8000a76:	f001 f9d8 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f001 f9b7 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f001 f9d0 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2011      	movs	r0, #17
 8000a90:	f001 f9af 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a94:	2011      	movs	r0, #17
 8000a96:	f001 f9c8 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2038      	movs	r0, #56	; 0x38
 8000aa0:	f001 f9a7 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa4:	2038      	movs	r0, #56	; 0x38
 8000aa6:	f001 f9c0 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	203b      	movs	r0, #59	; 0x3b
 8000ab0:	f001 f99f 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ab4:	203b      	movs	r0, #59	; 0x3b
 8000ab6:	f001 f9b8 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	203c      	movs	r0, #60	; 0x3c
 8000ac0:	f001 f997 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ac4:	203c      	movs	r0, #60	; 0x3c
 8000ac6:	f001 f9b0 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4b96      	ldr	r3, [pc, #600]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a95      	ldr	r2, [pc, #596]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b93      	ldr	r3, [pc, #588]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b8f      	ldr	r3, [pc, #572]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a8e      	ldr	r2, [pc, #568]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b8c      	ldr	r3, [pc, #560]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b88      	ldr	r3, [pc, #544]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a87      	ldr	r2, [pc, #540]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b85      	ldr	r3, [pc, #532]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b81      	ldr	r3, [pc, #516]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a80      	ldr	r2, [pc, #512]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b7e      	ldr	r3, [pc, #504]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b7a      	ldr	r3, [pc, #488]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a79      	ldr	r2, [pc, #484]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b77      	ldr	r3, [pc, #476]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b73      	ldr	r3, [pc, #460]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a72      	ldr	r2, [pc, #456]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b70      	ldr	r3, [pc, #448]	; (8000d4c <MX_GPIO_Init+0x274>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 8000b96:	2200      	movs	r2, #0
 8000b98:	f640 4177 	movw	r1, #3191	; 0xc77
 8000b9c:	486c      	ldr	r0, [pc, #432]	; (8000d50 <MX_GPIO_Init+0x278>)
 8000b9e:	f001 fdfd 	bl	800279c <HAL_GPIO_WritePin>
                          |AD9957_RESET_Pin|AD9957_IORESET_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8000ba8:	486a      	ldr	r0, [pc, #424]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000baa:	f001 fdf7 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2116      	movs	r1, #22
 8000bb2:	4869      	ldr	r0, [pc, #420]	; (8000d58 <MX_GPIO_Init+0x280>)
 8000bb4:	f001 fdf2 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD9957_IOUP_Pin|AD9957_CS_Pin|ADF4355_CS_Pin|ADF4355_LE_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8000bbe:	4864      	ldr	r0, [pc, #400]	; (8000d50 <MX_GPIO_Init+0x278>)
 8000bc0:	f001 fdec 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_C_GPIO_Port, SEL_PAATTEN_C_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	4864      	ldr	r0, [pc, #400]	; (8000d5c <MX_GPIO_Init+0x284>)
 8000bcc:	f001 fde6 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEL_PAATTEN_D_Pin|MAX10_CS_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000bd6:	4861      	ldr	r0, [pc, #388]	; (8000d5c <MX_GPIO_Init+0x284>)
 8000bd8:	f001 fde0 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SEL_PAATTEN_A_Pin|ATTEN_0_Pin|ATTEN_1_Pin|ATTEN_2_Pin
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000be2:	485f      	ldr	r0, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x288>)
 8000be4:	f001 fdda 	bl	800279c <HAL_GPIO_WritePin>
                          |ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin|ATTEN_6_Pin
                          |ATTEN_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_B_GPIO_Port, SEL_PAATTEN_B_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	485c      	ldr	r0, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x288>)
 8000bf0:	f001 fdd4 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_FILTERSEL_V3_Pin RF_FILTERSEL_V4_Pin RF_FILTERSEL_V5_Pin RF_FILTERSEL_V6_Pin
                           AD9957_IOUP_Pin AD9957_CS_Pin AD9957_RESET_Pin AD9957_IORESET_Pin
                           ADF4355_CS_Pin ADF4355_LE_Pin RF_FILTERSEL_V1_Pin RF_FILTERSEL_V2_Pin */
  GPIO_InitStruct.Pin = RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 8000bf4:	f646 7377 	movw	r3, #28535	; 0x6f77
 8000bf8:	61fb      	str	r3, [r7, #28]
                          |AD9957_IOUP_Pin|AD9957_CS_Pin|AD9957_RESET_Pin|AD9957_IORESET_Pin
                          |ADF4355_CS_Pin|ADF4355_LE_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4850      	ldr	r0, [pc, #320]	; (8000d50 <MX_GPIO_Init+0x278>)
 8000c0e:	f001 fc2b 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484a      	ldr	r0, [pc, #296]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000c2c:	f001 fc1c 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBD_IRQ_Pin TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = KEYBD_IRQ_Pin|TOUCH_IRQ_Pin;
 8000c30:	2303      	movs	r3, #3
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4844      	ldr	r0, [pc, #272]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000c44:	f001 fc10 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : REF_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = REF_PLL_LOCK_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(REF_PLL_LOCK_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	483e      	ldr	r0, [pc, #248]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000c5c:	f001 fc04 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin;
 8000c60:	2316      	movs	r3, #22
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4838      	ldr	r0, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x280>)
 8000c78:	f001 fbf6 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 ADF4355_MUX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|ADF4355_MUX_Pin;
 8000c7c:	f248 0380 	movw	r3, #32896	; 0x8080
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482f      	ldr	r0, [pc, #188]	; (8000d50 <MX_GPIO_Init+0x278>)
 8000c92:	f001 fbe9 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9957_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = AD9957_PLL_LOCK_Pin;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD9957_PLL_LOCK_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <MX_GPIO_Init+0x278>)
 8000cac:	f001 fbdc 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_C_Pin SEL_PAATTEN_D_Pin MAX10_CS_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_C_Pin|SEL_PAATTEN_D_Pin|MAX10_CS_Pin;
 8000cb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4824      	ldr	r0, [pc, #144]	; (8000d5c <MX_GPIO_Init+0x284>)
 8000cca:	f001 fbcd 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_A_Pin SEL_PAATTEN_B_Pin ATTEN_0_Pin ATTEN_1_Pin
                           ATTEN_2_Pin ATTEN_3_Pin ATTEN_4_Pin ATTEN_5_Pin
                           ATTEN_6_Pin ATTEN_7_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_A_Pin|SEL_PAATTEN_B_Pin|ATTEN_0_Pin|ATTEN_1_Pin
 8000cce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000cd2:	61fb      	str	r3, [r7, #28]
                          |ATTEN_2_Pin|ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin
                          |ATTEN_6_Pin|ATTEN_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481e      	ldr	r0, [pc, #120]	; (8000d60 <MX_GPIO_Init+0x288>)
 8000ce8:	f001 fbbe 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_SIGSRC_B_Pin SEL_SIGSRC_A_Pin */
  GPIO_InitStruct.Pin = SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin;
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000d04:	f001 fbb0 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <MX_GPIO_Init+0x27c>)
 8000d26:	f001 fb9f 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : VUSB_SENSE_Pin */
  GPIO_InitStruct.Pin = VUSB_SENSE_Pin;
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VUSB_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_GPIO_Init+0x280>)
 8000d40:	f001 fb92 	bl	8002468 <HAL_GPIO_Init>

}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <HAL_ADC_MspInit+0x94>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d13c      	bne.n	8000e50 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <HAL_ADC_MspInit+0x98>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_ADC_MspInit+0x98>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_ADC_MspInit+0x98>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_ADC_MspInit+0xa0>)
 8000df6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e36:	f001 f82f 	bl	8001e98 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8000e40:	f7ff ff90 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <HAL_ADC_MspInit+0x9c>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	200004a4 	.word	0x200004a4
 8000e64:	40026470 	.word	0x40026470

08000e68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_CRC_MspInit+0x3c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10d      	bne.n	8000e96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023000 	.word	0x40023000
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a47      	ldr	r2, [pc, #284]	; (8000fe8 <HAL_I2C_MspInit+0x13c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	f040 8088 	bne.w	8000fe0 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eec:	23c0      	movs	r3, #192	; 0xc0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efc:	2304      	movs	r3, #4
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <HAL_I2C_MspInit+0x144>)
 8000f08:	f001 faae 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a35      	ldr	r2, [pc, #212]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_I2C_MspInit+0x140>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f2a:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <HAL_I2C_MspInit+0x14c>)
 8000f2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f34:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f38:	2240      	movs	r2, #64	; 0x40
 8000f3a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f68:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f6a:	f000 ff95 	bl	8001e98 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000f74:	f7ff fef6 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_I2C_MspInit+0x148>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_I2C_MspInit+0x154>)
 8000f88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f90:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fc6:	f000 ff67 	bl	8001e98 <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8000fd0:	f7ff fec8 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_I2C_MspInit+0x150>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	200002c0 	.word	0x200002c0
 8000ff8:	400260a0 	.word	0x400260a0
 8000ffc:	20000504 	.word	0x20000504
 8001000:	40026010 	.word	0x40026010

08001004 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_RNG_MspInit+0x3c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10d      	bne.n	8001032 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_RNG_MspInit+0x40>)
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_RNG_MspInit+0x40>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	6353      	str	r3, [r2, #52]	; 0x34
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_RNG_MspInit+0x40>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	50060800 	.word	0x50060800
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a8e      	ldr	r2, [pc, #568]	; (80012a0 <HAL_SPI_MspInit+0x258>)
 8001066:	4293      	cmp	r3, r2
 8001068:	f040 8089 	bne.w	800117e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	4a8b      	ldr	r2, [pc, #556]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 8001076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107a:	6453      	str	r3, [r2, #68]	; 0x44
 800107c:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	4b85      	ldr	r3, [pc, #532]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a84      	ldr	r2, [pc, #528]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 80010a4:	23e0      	movs	r3, #224	; 0xe0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b4:	2305      	movs	r3, #5
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	487a      	ldr	r0, [pc, #488]	; (80012a8 <HAL_SPI_MspInit+0x260>)
 80010c0:	f001 f9d2 	bl	8002468 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80010c4:	4b79      	ldr	r3, [pc, #484]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010c6:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <HAL_SPI_MspInit+0x268>)
 80010c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010ca:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b74      	ldr	r3, [pc, #464]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e6:	4b71      	ldr	r3, [pc, #452]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ec:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HAL_SPI_MspInit+0x264>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <HAL_SPI_MspInit+0x264>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001104:	4869      	ldr	r0, [pc, #420]	; (80012ac <HAL_SPI_MspInit+0x264>)
 8001106:	f000 fec7 	bl	8001e98 <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001110:	f7ff fe28 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_SPI_MspInit+0x264>)
 8001118:	64da      	str	r2, [r3, #76]	; 0x4c
 800111a:	4a64      	ldr	r2, [pc, #400]	; (80012ac <HAL_SPI_MspInit+0x264>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001120:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001122:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <HAL_SPI_MspInit+0x270>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001128:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800112c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001130:	2240      	movs	r2, #64	; 0x40
 8001132:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b5f      	ldr	r3, [pc, #380]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800114e:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001160:	4854      	ldr	r0, [pc, #336]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001162:	f000 fe99 	bl	8001e98 <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800116c:	f7ff fdfa 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001174:	649a      	str	r2, [r3, #72]	; 0x48
 8001176:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_SPI_MspInit+0x26c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800117c:	e08c      	b.n	8001298 <HAL_SPI_MspInit+0x250>
  else if(hspi->Instance==SPI2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a4e      	ldr	r2, [pc, #312]	; (80012bc <HAL_SPI_MspInit+0x274>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f040 8087 	bne.w	8001298 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_SPI_MspInit+0x25c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d4:	2305      	movs	r3, #5
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4838      	ldr	r0, [pc, #224]	; (80012c0 <HAL_SPI_MspInit+0x278>)
 80011e0:	f001 f942 	bl	8002468 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 80011e6:	4a38      	ldr	r2, [pc, #224]	; (80012c8 <HAL_SPI_MspInit+0x280>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001202:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001222:	4828      	ldr	r0, [pc, #160]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 8001224:	f000 fe38 	bl	8001e98 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 800122e:	f7ff fd99 	bl	8000d64 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 8001236:	64da      	str	r2, [r3, #76]	; 0x4c
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <HAL_SPI_MspInit+0x27c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001240:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_SPI_MspInit+0x288>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_SPI_MspInit+0x284>)
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_SPI_MspInit+0x284>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <HAL_SPI_MspInit+0x284>)
 800127e:	f000 fe0b 	bl	8001e98 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8001288:	f7ff fd6c 	bl	8000d64 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001290:	649a      	str	r2, [r3, #72]	; 0x48
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_SPI_MspInit+0x284>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	200005cc 	.word	0x200005cc
 80012b0:	40026410 	.word	0x40026410
 80012b4:	2000068c 	.word	0x2000068c
 80012b8:	40026458 	.word	0x40026458
 80012bc:	40003800 	.word	0x40003800
 80012c0:	40020400 	.word	0x40020400
 80012c4:	2000037c 	.word	0x2000037c
 80012c8:	40026058 	.word	0x40026058
 80012cc:	2000062c 	.word	0x2000062c
 80012d0:	40026070 	.word	0x40026070

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_TIM_Base_MspInit+0x84>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12b      	bne.n	800134e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_TIM_Base_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = FAN_RPM_Pin;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800133e:	2302      	movs	r3, #2
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_RPM_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_TIM_Base_MspInit+0x8c>)
 800134a:	f001 f88d 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40000400 	.word	0x40000400
 800135c:	40023800 	.word	0x40023800
 8001360:	40020400 	.word	0x40020400

08001364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_TIM_MspPostInit+0x68>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11d      	bne.n	80013c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 80013be:	f001 f853 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_UART_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12c      	bne.n	8001454 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_UART_MspInit+0x88>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001432:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_UART_MspInit+0x8c>)
 8001450:	f001 f80a 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40011000 	.word	0x40011000
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f91a 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ca:	f000 fd93 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000504 	.word	0x20000504

080014d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <DMA1_Stream3_IRQHandler+0x10>)
 80014de:	f000 fd89 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000037c 	.word	0x2000037c

080014ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Stream4_IRQHandler+0x10>)
 80014f2:	f000 fd7f 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000062c 	.word	0x2000062c

08001500 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA1_Stream6_IRQHandler+0x10>)
 8001506:	f000 fd75 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002c0 	.word	0x200002c0

08001514 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA2_Stream0_IRQHandler+0x10>)
 800151a:	f000 fd6b 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200005cc 	.word	0x200005cc

08001528 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2_Stream3_IRQHandler+0x10>)
 800152e:	f000 fd61 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000068c 	.word	0x2000068c

0800153c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream4_IRQHandler+0x10>)
 8001542:	f000 fd57 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200004a4 	.word	0x200004a4

08001550 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <OTG_FS_IRQHandler+0x10>)
 8001556:	f001 fbf3 	bl	8002d40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000bc0 	.word	0x20000bc0

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f008 fa64 	bl	8009a60 <__errno>
 8001598:	4602      	mov	r2, r0
 800159a:	230c      	movs	r3, #12
 800159c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	2000015c 	.word	0x2000015c
 80015cc:	20000fd0 	.word	0x20000fd0

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <SystemInit+0x28>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <SystemInit+0x28>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SystemInit+0x28>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	609a      	str	r2, [r3, #8]
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001600:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001602:	e003      	b.n	800160c <LoopCopyDataInit>

08001604 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001606:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001608:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800160a:	3104      	adds	r1, #4

0800160c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001610:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001612:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001614:	d3f6      	bcc.n	8001604 <CopyDataInit>
  ldr  r2, =_sbss
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001618:	e002      	b.n	8001620 <LoopFillZerobss>

0800161a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800161a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800161c:	f842 3b04 	str.w	r3, [r2], #4

08001620 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001624:	d3f9      	bcc.n	800161a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001626:	f7ff ffd3 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f008 fa1f 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7fe ff4b 	bl	80004c8 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001634:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001638:	08009d50 	.word	0x08009d50
  ldr  r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001640:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8001644:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8001648:	20000fcc 	.word	0x20000fcc

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_Init+0x40>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_Init+0x40>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x40>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 fbaf 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fb76 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fbc7 	bl	8001e46 <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 fb8f 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	200006ec 	.word	0x200006ec

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200006ec 	.word	0x200006ec

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_Delay+0x40>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e033      	b.n	80017f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fb14 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017be:	f023 0302 	bic.w	r3, r3, #2
 80017c2:	f043 0202 	orr.w	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f93a 	bl	8001a44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
 80017e6:	e001      	b.n	80017ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1c>
 8001818:	2302      	movs	r3, #2
 800181a:	e105      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x228>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d925      	bls.n	8001878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	3b1e      	subs	r3, #30
 8001842:	2207      	movs	r2, #7
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43da      	mvns	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	400a      	ands	r2, r1
 8001850:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68d9      	ldr	r1, [r3, #12]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	4603      	mov	r3, r0
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4403      	add	r3, r0
 800186a:	3b1e      	subs	r3, #30
 800186c:	409a      	lsls	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e022      	b.n	80018be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6919      	ldr	r1, [r3, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	2207      	movs	r2, #7
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	400a      	ands	r2, r1
 800189a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4403      	add	r3, r0
 80018b4:	409a      	lsls	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d824      	bhi.n	8001910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	3b05      	subs	r3, #5
 80018d8:	221f      	movs	r2, #31
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	400a      	ands	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	3b05      	subs	r3, #5
 8001902:	fa00 f203 	lsl.w	r2, r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
 800190e:	e04c      	b.n	80019aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d824      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b23      	subs	r3, #35	; 0x23
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b23      	subs	r3, #35	; 0x23
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
 8001960:	e023      	b.n	80019aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b41      	subs	r3, #65	; 0x41
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b41      	subs	r3, #65	; 0x41
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_ADC_ConfigChannel+0x234>)
 80019ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_ADC_ConfigChannel+0x238>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1cc>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b12      	cmp	r3, #18
 80019be:	d105      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_ADC_ConfigChannel+0x238>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d123      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x21e>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d003      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x1e6>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b11      	cmp	r3, #17
 80019e4:	d11b      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d111      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_ADC_ConfigChannel+0x23c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_ADC_ConfigChannel+0x240>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	0c9a      	lsrs	r2, r3, #18
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40012300 	.word	0x40012300
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4c:	4b79      	ldr	r3, [pc, #484]	; (8001c34 <ADC_Init+0x1f0>)
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	021a      	lsls	r2, r3, #8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <ADC_Init+0x1f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e00f      	b.n	8001b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0202 	bic.w	r2, r2, #2
 8001b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
 8001b5c:	005a      	lsls	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	035a      	lsls	r2, r3, #13
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e007      	b.n	8001bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051a      	lsls	r2, r3, #20
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfa:	025a      	lsls	r2, r3, #9
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	029a      	lsls	r2, r3, #10
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40012300 	.word	0x40012300
 8001c38:	0f000001 	.word	0x0f000001

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e00e      	b.n	8001e8e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	795b      	ldrb	r3, [r3, #5]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fff1 	bl	8000e68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fc3a 	bl	800171c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e099      	b.n	8001fe8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed4:	e00f      	b.n	8001ef6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed6:	f7ff fc21 	bl	800171c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d908      	bls.n	8001ef6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2203      	movs	r2, #3
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e078      	b.n	8001fe8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e8      	bne.n	8001ed6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_DMA_Init+0x158>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d107      	bne.n	8001f60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f023 0307 	bic.w	r3, r3, #7
 8001f76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d117      	bne.n	8001fba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f9e9 	bl	8002374 <DMA_CheckFifoParam>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e016      	b.n	8001fe8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f9a0 	bl	8002308 <DMA_CalcBaseAndBitshift>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	223f      	movs	r2, #63	; 0x3f
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	f010803f 	.word	0xf010803f

08001ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002000:	4b92      	ldr	r3, [pc, #584]	; (800224c <HAL_DMA_IRQHandler+0x258>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a92      	ldr	r2, [pc, #584]	; (8002250 <HAL_DMA_IRQHandler+0x25c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a9b      	lsrs	r3, r3, #10
 800200c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2208      	movs	r2, #8
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2208      	movs	r2, #8
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2204      	movs	r2, #4
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2210      	movs	r2, #16
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2210      	movs	r2, #16
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e01f      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	e016      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2220      	movs	r2, #32
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 808e 	beq.w	8002292 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8086 	beq.w	8002292 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2220      	movs	r2, #32
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d136      	bne.n	800220c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_IRQHandler+0x1da>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	223f      	movs	r2, #63	; 0x3f
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d07d      	beq.n	80022fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
        }
        return;
 800220a:	e078      	b.n	80022fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	2b00      	cmp	r3, #0
 800222e:	d030      	beq.n	8002292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e02b      	b.n	8002292 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d027      	beq.n	8002292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e022      	b.n	8002292 <HAL_DMA_IRQHandler+0x29e>
 800224c:	20000000 	.word	0x20000000
 8002250:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0210 	bic.w	r2, r2, #16
 8002270:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d032      	beq.n	8002300 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d022      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2205      	movs	r2, #5
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d307      	bcc.n	80022da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f2      	bne.n	80022be <HAL_DMA_IRQHandler+0x2ca>
 80022d8:	e000      	b.n	80022dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e000      	b.n	8002300 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022fe:	bf00      	nop
    }
  }
}
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop

08002308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3b10      	subs	r3, #16
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <DMA_CalcBaseAndBitshift+0x64>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <DMA_CalcBaseAndBitshift+0x68>)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d909      	bls.n	800234a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	; 0x58
 8002348:	e007      	b.n	800235a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	aaaaaaab 	.word	0xaaaaaaab
 8002370:	08009d38 	.word	0x08009d38

08002374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11f      	bne.n	80023ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d855      	bhi.n	8002440 <DMA_CheckFifoParam+0xcc>
 8002394:	a201      	add	r2, pc, #4	; (adr r2, 800239c <DMA_CheckFifoParam+0x28>)
 8002396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239a:	bf00      	nop
 800239c:	080023ad 	.word	0x080023ad
 80023a0:	080023bf 	.word	0x080023bf
 80023a4:	080023ad 	.word	0x080023ad
 80023a8:	08002441 	.word	0x08002441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d045      	beq.n	8002444 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e042      	b.n	8002444 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c6:	d13f      	bne.n	8002448 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023cc:	e03c      	b.n	8002448 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	d121      	bne.n	800241c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d836      	bhi.n	800244c <DMA_CheckFifoParam+0xd8>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <DMA_CheckFifoParam+0x70>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	080023fb 	.word	0x080023fb
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	0800240d 	.word	0x0800240d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      break;
 80023f8:	e02f      	b.n	800245a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240a:	e021      	b.n	8002450 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002414:	d11e      	bne.n	8002454 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241a:	e01b      	b.n	8002454 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <DMA_CheckFifoParam+0xb4>
 8002422:	2b03      	cmp	r3, #3
 8002424:	d003      	beq.n	800242e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002426:	e018      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e015      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      break;
 800243e:	e00b      	b.n	8002458 <DMA_CheckFifoParam+0xe4>
      break;
 8002440:	bf00      	nop
 8002442:	e00a      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 8002444:	bf00      	nop
 8002446:	e008      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 8002448:	bf00      	nop
 800244a:	e006      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 800244c:	bf00      	nop
 800244e:	e004      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 8002450:	bf00      	nop
 8002452:	e002      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;   
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 8002458:	bf00      	nop
    }
  } 
  
  return status; 
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e16b      	b.n	800275c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 815a 	bne.w	8002756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00b      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b6:	2b11      	cmp	r3, #17
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b12      	cmp	r3, #18
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0xfc>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b4 	beq.w	8002756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_GPIO_Init+0x308>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <HAL_GPIO_Init+0x308>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_GPIO_Init+0x308>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_GPIO_Init+0x30c>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x226>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a50      	ldr	r2, [pc, #320]	; (800277c <HAL_GPIO_Init+0x314>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x222>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	; (8002780 <HAL_GPIO_Init+0x318>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x21e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_Init+0x31c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x21a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x320>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x216>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_GPIO_Init+0x324>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x212>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_GPIO_Init+0x328>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x20a>
 800266e:	2307      	movs	r3, #7
 8002670:	e00e      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002672:	2308      	movs	r3, #8
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002676:	2306      	movs	r3, #6
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_GPIO_Init+0x30c>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d2:	4a31      	ldr	r2, [pc, #196]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_GPIO_Init+0x330>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f ae90 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3724      	adds	r7, #36	; 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e11f      	b.n	8002a22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fb58 	bl	8000eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002834:	f001 fef8 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a7b      	ldr	r2, [pc, #492]	; (8002a2c <HAL_I2C_Init+0x25c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d807      	bhi.n	8002854 <HAL_I2C_Init+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_I2C_Init+0x260>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e006      	b.n	8002862 <HAL_I2C_Init+0x92>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a77      	ldr	r2, [pc, #476]	; (8002a34 <HAL_I2C_Init+0x264>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0db      	b.n	8002a22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a72      	ldr	r2, [pc, #456]	; (8002a38 <HAL_I2C_Init+0x268>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a64      	ldr	r2, [pc, #400]	; (8002a2c <HAL_I2C_Init+0x25c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d802      	bhi.n	80028a4 <HAL_I2C_Init+0xd4>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3301      	adds	r3, #1
 80028a2:	e009      	b.n	80028b8 <HAL_I2C_Init+0xe8>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	4a63      	ldr	r2, [pc, #396]	; (8002a3c <HAL_I2C_Init+0x26c>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	3301      	adds	r3, #1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4956      	ldr	r1, [pc, #344]	; (8002a2c <HAL_I2C_Init+0x25c>)
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d80d      	bhi.n	80028f4 <HAL_I2C_Init+0x124>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e59      	subs	r1, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	bf38      	it	cc
 80028f0:	2304      	movcc	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1c4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x150>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x176>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x17e>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1c4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1a4>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1c4>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b08f      	sub	sp, #60	; 0x3c
 8002a44:	af0a      	add	r7, sp, #40	; 0x28
 8002a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e10f      	b.n	8002c72 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d106      	bne.n	8002a72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f006 fd11 	bl	8009494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 fa9e 	bl	8005fd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	687e      	ldr	r6, [r7, #4]
 8002a9e:	466d      	mov	r5, sp
 8002aa0:	f106 0410 	add.w	r4, r6, #16
 8002aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ab0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab4:	1d33      	adds	r3, r6, #4
 8002ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab8:	6838      	ldr	r0, [r7, #0]
 8002aba:	f003 f975 	bl	8005da8 <USB_CoreInit>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d0      	b.n	8002c72 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fa8c 	bl	8005ff4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e04a      	b.n	8002b78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	333d      	adds	r3, #61	; 0x3d
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	333c      	adds	r3, #60	; 0x3c
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	b298      	uxth	r0, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3342      	adds	r3, #66	; 0x42
 8002b1e:	4602      	mov	r2, r0
 8002b20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	333f      	adds	r3, #63	; 0x3f
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3344      	adds	r3, #68	; 0x44
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3348      	adds	r3, #72	; 0x48
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3350      	adds	r3, #80	; 0x50
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3301      	adds	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3af      	bcc.n	8002ae2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e044      	b.n	8002c12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3b5      	bcc.n	8002b88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	687e      	ldr	r6, [r7, #4]
 8002c24:	466d      	mov	r5, sp
 8002c26:	f106 0410 	add.w	r4, r6, #16
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c3a:	1d33      	adds	r3, r6, #4
 8002c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3e:	6838      	ldr	r0, [r7, #0]
 8002c40:	f003 fa02 	bl	8006048 <USB_DevInit>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00d      	b.n	8002c72 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 f9b4 	bl	8006fd8 <USB_DevDisconnect>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_PCD_Start+0x1c>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e020      	b.n	8002cd8 <HAL_PCD_Start+0x5e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d109      	bne.n	8002cba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 f972 	bl	8006fa8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f971 	bl	8005fb0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_PCD_Stop+0x16>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e020      	b.n	8002d38 <HAL_PCD_Stop+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 f965 	bl	8005fd2 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 f8d6 	bl	8006ebe <USB_StopDevice>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f955 	bl	8006fd8 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b08d      	sub	sp, #52	; 0x34
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 f9e9 	bl	800712e <USB_GetMode>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 839d 	bne.w	800349e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 f94d 	bl	8007008 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8393 	beq.w	800349c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f944 	bl	8007008 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d107      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f002 0202 	and.w	r2, r2, #2
 8002d98:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f932 	bl	8007008 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d161      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0210 	bic.w	r2, r2, #16
 8002dbc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	0c5b      	lsrs	r3, r3, #17
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d124      	bne.n	8002e34 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d035      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	6a38      	ldr	r0, [r7, #32]
 8002e0a:	f003 ff5b 	bl	8006cc4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e1a:	441a      	add	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2c:	441a      	add	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e016      	b.n	8002e62 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	0c5b      	lsrs	r3, r3, #17
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d110      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e46:	2208      	movs	r2, #8
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6a38      	ldr	r0, [r7, #32]
 8002e4c:	f003 ff3a 	bl	8006cc4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e5c:	441a      	add	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0210 	orr.w	r2, r2, #16
 8002e70:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 f8c6 	bl	8007008 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e86:	d16e      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 f8cc 	bl	800702e <USB_ReadDevAllOutEpInterrupt>
 8002e96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e98:	e062      	b.n	8002f60 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d057      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 f8f1 	bl	8007096 <USB_ReadDevOutEPInterrupt>
 8002eb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fd4f 	bl	8003978 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fe49 	bl	8003b90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	2310      	movs	r3, #16
 8002f18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2320      	movs	r3, #32
 8002f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	3301      	adds	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d199      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f004 f84c 	bl	8007008 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f7a:	f040 80c0 	bne.w	80030fe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 f86d 	bl	8007062 <USB_ReadDevAllInEpInterrupt>
 8002f88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f8e:	e0b2      	b.n	80030f6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a7 	beq.w	80030ea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 f893 	bl	80070d2 <USB_ReadDevInEPInterrupt>
 8002fac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d057      	beq.n	8003068 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd8:	4013      	ands	r3, r2
 8002fda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d132      	bne.n	800305c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4403      	add	r3, r0
 8003016:	3344      	adds	r3, #68	; 0x44
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4419      	add	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d113      	bne.n	800305c <HAL_PCD_IRQHandler+0x31c>
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3350      	adds	r3, #80	; 0x50
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003054:	461a      	mov	r2, r3
 8003056:	2101      	movs	r1, #1
 8003058:	f004 f89a 	bl	8007190 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f006 fa97 	bl	8009596 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307e:	461a      	mov	r2, r3
 8003080:	2308      	movs	r3, #8
 8003082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	461a      	mov	r2, r3
 800309c:	2310      	movs	r3, #16
 800309e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b6:	461a      	mov	r2, r3
 80030b8:	2340      	movs	r3, #64	; 0x40
 80030ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	2302      	movs	r3, #2
 80030d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fbb9 	bl	800385c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	3301      	adds	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f47f af49 	bne.w	8002f90 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 ff80 	bl	8007008 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800310e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003112:	d122      	bne.n	800315a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800313a:	2100      	movs	r1, #0
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fdc5 	bl	8003ccc <HAL_PCDEx_LPM_Callback>
 8003142:	e002      	b.n	800314a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f006 fa9d 	bl	8009684 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f003 ff52 	bl	8007008 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d112      	bne.n	8003196 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f006 fa59 	bl	8009638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003194:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f003 ff34 	bl	8007008 <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	f040 80c7 	bne.w	800333c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2110      	movs	r1, #16
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 f8a1 	bl	8006310 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d2:	e056      	b.n	8003282 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003206:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	0151      	lsls	r1, r2, #5
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	440a      	add	r2, r1
 800321e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003226:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	440a      	add	r2, r1
 8003252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003256:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800325a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800327a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	3301      	adds	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d3a3      	bcc.n	80031d4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800329e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d016      	beq.n	80032d6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b8:	f043 030b 	orr.w	r3, r3, #11
 80032bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ce:	f043 030b 	orr.w	r3, r3, #11
 80032d2:	6453      	str	r3, [r2, #68]	; 0x44
 80032d4:	e015      	b.n	8003302 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f043 030b 	orr.w	r3, r3, #11
 8003300:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003310:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003314:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003326:	461a      	mov	r2, r3
 8003328:	f003 ff32 	bl	8007190 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800333a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fe61 	bl	8007008 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d124      	bne.n	800339c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fef7 	bl	800714a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 f836 	bl	80063d2 <USB_GetDevSpeed>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681c      	ldr	r4, [r3, #0]
 8003372:	f001 f94d 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8003376:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4620      	mov	r0, r4
 8003382:	f002 fd73 	bl	8005e6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f006 f92d 	bl	80095e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800339a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f003 fe31 	bl	8007008 <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10a      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f006 f90a 	bl	80095ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 0208 	and.w	r2, r2, #8
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fe1c 	bl	8007008 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033da:	d10f      	bne.n	80033fc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f006 f96c 	bl	80096c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fe01 	bl	8007008 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003410:	d10f      	bne.n	8003432 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f006 f93f 	bl	80096a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fde6 	bl	8007008 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d10a      	bne.n	800345e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f006 f94d 	bl	80096e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 fdd0 	bl	8007008 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d115      	bne.n	800349e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f006 f93d 	bl	8009704 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e000      	b.n	800349e <HAL_PCD_IRQHandler+0x75e>
      return;
 800349c:	bf00      	nop
    }
  }
}
 800349e:	3734      	adds	r7, #52	; 0x34
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}

080034a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_SetAddress+0x1a>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e013      	b.n	80034e6 <HAL_PCD_SetAddress+0x42>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fd40 	bl	8006f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	461a      	mov	r2, r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	70fb      	strb	r3, [r7, #3]
 8003500:	460b      	mov	r3, r1
 8003502:	803b      	strh	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0f      	bge.n	8003534 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3338      	adds	r3, #56	; 0x38
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00f      	b.n	8003554 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003560:	883a      	ldrh	r2, [r7, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	78ba      	ldrb	r2, [r7, #2]
 800356a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800357e:	78bb      	ldrb	r3, [r7, #2]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d102      	bne.n	800358a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_EP_Open+0xaa>
 8003594:	2302      	movs	r3, #2
 8003596:	e00e      	b.n	80035b6 <HAL_PCD_EP_Open+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f002 ff38 	bl	800641c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035b4:	7afb      	ldrb	r3, [r7, #11]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	460b      	mov	r3, r1
 80035cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	b2da      	uxtb	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361a:	7afb      	ldrb	r3, [r7, #11]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	f003 f9bf 	bl	80069b4 <USB_EP0StartXfer>
 8003636:	e008      	b.n	800364a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	f002 ff71 	bl	800652c <USB_EPStartXfer>
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	7afb      	ldrb	r3, [r7, #11]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	3338      	adds	r3, #56	; 0x38
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2201      	movs	r2, #1
 8003692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	b2da      	uxtb	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	f003 f975 	bl	80069b4 <USB_EP0StartXfer>
 80036ca:	e008      	b.n	80036de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	f002 ff27 	bl	800652c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d901      	bls.n	8003706 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e050      	b.n	80037a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370a:	2b00      	cmp	r3, #0
 800370c:	da0f      	bge.n	800372e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	705a      	strb	r2, [r3, #1]
 800372c:	e00d      	b.n	800374a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	b2da      	uxtb	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_PCD_EP_SetStall+0x82>
 8003766:	2302      	movs	r3, #2
 8003768:	e01e      	b.n	80037a8 <HAL_PCD_EP_SetStall+0xc0>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 facc 	bl	8006d16 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	b2d9      	uxtb	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003798:	461a      	mov	r2, r3
 800379a:	f003 fcf9 	bl	8007190 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 020f 	and.w	r2, r3, #15
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d901      	bls.n	80037ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e042      	b.n	8003854 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0f      	bge.n	80037f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3338      	adds	r3, #56	; 0x38
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	3304      	adds	r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	705a      	strb	r2, [r3, #1]
 80037f4:	e00f      	b.n	8003816 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_ClrStall+0x86>
 8003832:	2302      	movs	r3, #2
 8003834:	e00e      	b.n	8003854 <HAL_PCD_EP_ClrStall+0xa4>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fad4 	bl	8006df2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	3338      	adds	r3, #56	; 0x38
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	d901      	bls.n	8003894 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e06c      	b.n	800396e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d902      	bls.n	80038b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3303      	adds	r3, #3
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038b8:	e02b      	b.n	8003912 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d902      	bls.n	80038d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3303      	adds	r3, #3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68d9      	ldr	r1, [r3, #12]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4603      	mov	r3, r0
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f003 f9b0 	bl	8006c5a <USB_WritePacket>

    ep->xfer_buff  += len;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	b29b      	uxth	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	d809      	bhi.n	800393c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003930:	429a      	cmp	r2, r3
 8003932:	d203      	bcs.n	800393c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1be      	bne.n	80038ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	d811      	bhi.n	800396c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	43db      	mvns	r3, r3
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003968:	4013      	ands	r3, r2
 800396a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	333c      	adds	r3, #60	; 0x3c
 8003990:	3304      	adds	r3, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f040 80a0 	bne.w	8003af0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a72      	ldr	r2, [pc, #456]	; (8003b88 <PCD_EP_OutXfrComplete_int+0x210>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	f240 80dd 	bls.w	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80d7 	beq.w	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	e0cb      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	2320      	movs	r3, #32
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	e0bc      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 80b7 	bne.w	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d90f      	bls.n	8003a38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	e0a2      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	0159      	lsls	r1, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4403      	add	r3, r0
 8003a6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4403      	add	r3, r0
 8003a96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4419      	add	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4403      	add	r3, r0
 8003aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ab0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d114      	bne.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ada:	461a      	mov	r2, r3
 8003adc:	2101      	movs	r1, #1
 8003ade:	f003 fb57 	bl	8007190 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f005 fd39 	bl	8009560 <HAL_PCD_DataOutStageCallback>
 8003aee:	e046      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <PCD_EP_OutXfrComplete_int+0x214>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d124      	bne.n	8003b42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b14:	6093      	str	r3, [r2, #8]
 8003b16:	e032      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2320      	movs	r3, #32
 8003b32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f005 fd10 	bl	8009560 <HAL_PCD_DataOutStageCallback>
 8003b40:	e01d      	b.n	8003b7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d114      	bne.n	8003b72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f003 fb0f 	bl	8007190 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f005 fcf1 	bl	8009560 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	4f54300a 	.word	0x4f54300a
 8003b8c:	4f54310a 	.word	0x4f54310a

08003b90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	333c      	adds	r3, #60	; 0x3c
 8003ba8:	3304      	adds	r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d90e      	bls.n	8003be4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f005 fca9 	bl	800953c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d90c      	bls.n	8003c0c <PCD_EP_OutSetupPacket_int+0x7c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c04:	461a      	mov	r2, r3
 8003c06:	2101      	movs	r1, #1
 8003c08:	f003 fac2 	bl	8007190 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	4f54300a 	.word	0x4f54300a

08003c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c3a:	883b      	ldrh	r3, [r7, #0]
 8003c3c:	0419      	lsls	r1, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
 8003c48:	e028      	b.n	8003c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e00d      	b.n	8003c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3340      	adds	r3, #64	; 0x40
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	3301      	adds	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3ec      	bcc.n	8003c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c84:	883b      	ldrh	r3, [r7, #0]
 8003c86:	0418      	lsls	r0, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4302      	orrs	r2, r0
 8003c94:	3340      	adds	r3, #64	; 0x40
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e25b      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d075      	beq.n	8003dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d02:	4ba3      	ldr	r3, [pc, #652]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d00c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0e:	4ba0      	ldr	r3, [pc, #640]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d112      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1a:	4b9d      	ldr	r3, [pc, #628]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d26:	d10b      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d28:	4b99      	ldr	r3, [pc, #612]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05b      	beq.n	8003dec <HAL_RCC_OscConfig+0x108>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d157      	bne.n	8003dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e236      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCC_OscConfig+0x74>
 8003d4a:	4b91      	ldr	r3, [pc, #580]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a90      	ldr	r2, [pc, #576]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xb0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x98>
 8003d62:	4b8b      	ldr	r3, [pc, #556]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a8a      	ldr	r2, [pc, #552]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a87      	ldr	r2, [pc, #540]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	4b84      	ldr	r3, [pc, #528]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a80      	ldr	r2, [pc, #512]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fcbe 	bl	800171c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fd fcba 	bl	800171c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e1fb      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xc0>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fcaa 	bl	800171c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fca6 	bl	800171c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e1e7      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0xe8>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e06:	4b62      	ldr	r3, [pc, #392]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x152>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1bb      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4952      	ldr	r1, [pc, #328]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e03a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <HAL_RCC_OscConfig+0x2b0>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fc5f 	bl	800171c <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fd fc5b 	bl	800171c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e19c      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4940      	ldr	r1, [pc, #256]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e96:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <HAL_RCC_OscConfig+0x2b0>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fc3e 	bl	800171c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fc3a 	bl	800171c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e17b      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d030      	beq.n	8003f30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x2b4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd fc1e 	bl	800171c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fc1a 	bl	800171c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e15b      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x200>
 8003f02:	e015      	b.n	8003f30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_RCC_OscConfig+0x2b4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0a:	f7fd fc07 	bl	800171c <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f12:	f7fd fc03 	bl	800171c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e144      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a0 	beq.w	800407e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x2b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d121      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCC_OscConfig+0x2b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_RCC_OscConfig+0x2b8>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f86:	f7fd fbc9 	bl	800171c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	e011      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2ce>
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	42470000 	.word	0x42470000
 8003f98:	42470e80 	.word	0x42470e80
 8003f9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa0:	f7fd fbbc 	bl	800171c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0fd      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2f0>
 8003fc6:	4b7d      	ldr	r3, [pc, #500]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a7c      	ldr	r2, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	e01c      	b.n	800400e <HAL_RCC_OscConfig+0x32a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x312>
 8003fdc:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a76      	ldr	r2, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe8:	4b74      	ldr	r3, [pc, #464]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e00b      	b.n	800400e <HAL_RCC_OscConfig+0x32a>
 8003ff6:	4b71      	ldr	r3, [pc, #452]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a70      	ldr	r2, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	4b6e      	ldr	r3, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a6d      	ldr	r2, [pc, #436]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d015      	beq.n	8004042 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fd fb81 	bl	800171c <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fb7d 	bl	800171c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0bc      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCC_OscConfig+0x33a>
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fd fb6b 	bl	800171c <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fb67 	bl	800171c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0a6      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004060:	4b56      	ldr	r3, [pc, #344]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ee      	bne.n	800404a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b52      	ldr	r3, [pc, #328]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a51      	ldr	r2, [pc, #324]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8092 	beq.w	80041ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004088:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d05c      	beq.n	800414e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d141      	bne.n	8004120 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCC_OscConfig+0x4dc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd fb3b 	bl	800171c <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fb37 	bl	800171c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e078      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	3b01      	subs	r3, #1
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	061b      	lsls	r3, r3, #24
 80040ec:	4933      	ldr	r1, [pc, #204]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f2:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <HAL_RCC_OscConfig+0x4dc>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd fb10 	bl	800171c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd fb0c 	bl	800171c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e04d      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x41c>
 800411e:	e045      	b.n	80041ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x4dc>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd faf9 	bl	800171c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd faf5 	bl	800171c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e036      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x44a>
 800414c:	e02e      	b.n	80041ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e029      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <HAL_RCC_OscConfig+0x4d8>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	429a      	cmp	r2, r3
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d115      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004182:	4013      	ands	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000
 80041bc:	40023800 	.word	0x40023800
 80041c0:	42470060 	.word	0x42470060

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd fa32 	bl	800171c <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fa2e 	bl	800171c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f889 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800434e:	4601      	mov	r1, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	fa21 f303 	lsr.w	r3, r1, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd f992 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	08009d20 	.word	0x08009d20
 8004388:	20000000 	.word	0x20000000
 800438c:	20000004 	.word	0x20000004

08004390 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d129      	bne.n	80043f6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6313      	str	r3, [r2, #48]	; 0x30
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80043be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c4:	2302      	movs	r3, #2
 80043c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80043d4:	f107 031c 	add.w	r3, r7, #28
 80043d8:	4619      	mov	r1, r3
 80043da:	481f      	ldr	r0, [pc, #124]	; (8004458 <HAL_RCC_MCOConfig+0xc8>)
 80043dc:	f7fe f844 	bl	8002468 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	4919      	ldr	r1, [pc, #100]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80043f4:	e029      	b.n	800444a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441c:	2303      	movs	r3, #3
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	4619      	mov	r1, r3
 800442e:	480b      	ldr	r0, [pc, #44]	; (800445c <HAL_RCC_MCOConfig+0xcc>)
 8004430:	f7fe f81a 	bl	8002468 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	00d9      	lsls	r1, r3, #3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	430b      	orrs	r3, r1
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_MCOConfig+0xc4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
}
 800444a:	bf00      	nop
 800444c:	3730      	adds	r7, #48	; 0x30
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	40020000 	.word	0x40020000
 800445c:	40020800 	.word	0x40020800

08004460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	2300      	movs	r3, #0
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b04      	cmp	r3, #4
 8004480:	d007      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x32>
 8004482:	2b08      	cmp	r3, #8
 8004484:	d008      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x38>
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 80b4 	bne.w	80045f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800448e:	60bb      	str	r3, [r7, #8]
       break;
 8004490:	e0b3      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004494:	60bb      	str	r3, [r7, #8]
      break;
 8004496:	e0b0      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04a      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b55      	ldr	r3, [pc, #340]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	ea03 0501 	and.w	r5, r3, r1
 80044c4:	ea04 0602 	and.w	r6, r4, r2
 80044c8:	4629      	mov	r1, r5
 80044ca:	4632      	mov	r2, r6
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	0154      	lsls	r4, r2, #5
 80044d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044da:	014b      	lsls	r3, r1, #5
 80044dc:	4619      	mov	r1, r3
 80044de:	4622      	mov	r2, r4
 80044e0:	1b49      	subs	r1, r1, r5
 80044e2:	eb62 0206 	sbc.w	r2, r2, r6
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	f04f 0400 	mov.w	r4, #0
 80044ee:	0194      	lsls	r4, r2, #6
 80044f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044f4:	018b      	lsls	r3, r1, #6
 80044f6:	1a5b      	subs	r3, r3, r1
 80044f8:	eb64 0402 	sbc.w	r4, r4, r2
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	00e2      	lsls	r2, r4, #3
 8004506:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800450a:	00d9      	lsls	r1, r3, #3
 800450c:	460b      	mov	r3, r1
 800450e:	4614      	mov	r4, r2
 8004510:	195b      	adds	r3, r3, r5
 8004512:	eb44 0406 	adc.w	r4, r4, r6
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	0262      	lsls	r2, r4, #9
 8004520:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004524:	0259      	lsls	r1, r3, #9
 8004526:	460b      	mov	r3, r1
 8004528:	4614      	mov	r4, r2
 800452a:	4618      	mov	r0, r3
 800452c:	4621      	mov	r1, r4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	461a      	mov	r2, r3
 8004536:	4623      	mov	r3, r4
 8004538:	f7fb fe46 	bl	80001c8 <__aeabi_uldivmod>
 800453c:	4603      	mov	r3, r0
 800453e:	460c      	mov	r4, r1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e049      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004544:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	ea03 0501 	and.w	r5, r3, r1
 800455a:	ea04 0602 	and.w	r6, r4, r2
 800455e:	4629      	mov	r1, r5
 8004560:	4632      	mov	r2, r6
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	0154      	lsls	r4, r2, #5
 800456c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004570:	014b      	lsls	r3, r1, #5
 8004572:	4619      	mov	r1, r3
 8004574:	4622      	mov	r2, r4
 8004576:	1b49      	subs	r1, r1, r5
 8004578:	eb62 0206 	sbc.w	r2, r2, r6
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f04f 0400 	mov.w	r4, #0
 8004584:	0194      	lsls	r4, r2, #6
 8004586:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800458a:	018b      	lsls	r3, r1, #6
 800458c:	1a5b      	subs	r3, r3, r1
 800458e:	eb64 0402 	sbc.w	r4, r4, r2
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	00e2      	lsls	r2, r4, #3
 800459c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045a0:	00d9      	lsls	r1, r3, #3
 80045a2:	460b      	mov	r3, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	195b      	adds	r3, r3, r5
 80045a8:	eb44 0406 	adc.w	r4, r4, r6
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	02a2      	lsls	r2, r4, #10
 80045b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045ba:	0299      	lsls	r1, r3, #10
 80045bc:	460b      	mov	r3, r1
 80045be:	4614      	mov	r4, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	4621      	mov	r1, r4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	461a      	mov	r2, r3
 80045cc:	4623      	mov	r3, r4
 80045ce:	f7fb fdfb 	bl	80001c8 <__aeabi_uldivmod>
 80045d2:	4603      	mov	r3, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
      break;
 80045f2:	e002      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045f6:	60bb      	str	r3, [r7, #8]
      break;
 80045f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fa:	68bb      	ldr	r3, [r7, #8]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	00f42400 	.word	0x00f42400
 800460c:	007a1200 	.word	0x007a1200

08004610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4601      	mov	r1, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4a03      	ldr	r2, [pc, #12]	; (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	08009d30 	.word	0x08009d30

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004654:	f7ff ffdc 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004658:	4601      	mov	r1, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4a03      	ldr	r2, [pc, #12]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08009d30 	.word	0x08009d30

08004678 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01c      	b.n	80046c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fcb2 	bl	8001004 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0204 	orr.w	r2, r2, #4
 80046b4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e056      	b.n	800478c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fca5 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004714:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0104 	and.w	r1, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e01d      	b.n	80047e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fd8a 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fa8e 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e01d      	b.n	8004838 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f815 	bl	8004840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 fa63 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e01d      	b.n	80048a2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f815 	bl	80048aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f000 fa2e 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e08a      	b.n	80049ee <HAL_TIM_IC_ConfigChannel+0x130>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d11b      	bne.n	8004926 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f000 fc49 	bl	8005194 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 020c 	bic.w	r2, r2, #12
 8004910:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6999      	ldr	r1, [r3, #24]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	619a      	str	r2, [r3, #24]
 8004924:	e05a      	b.n	80049dc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d11c      	bne.n	8004966 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f000 fccd 	bl	80052da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800494e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	619a      	str	r2, [r3, #24]
 8004964:	e03a      	b.n	80049dc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f000 fd1a 	bl	80053b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020c 	bic.w	r2, r2, #12
 800498e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69d9      	ldr	r1, [r3, #28]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]
 80049a2:	e01b      	b.n	80049dc <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f000 fd3a 	bl	800542c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69d9      	ldr	r1, [r3, #28]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0b4      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	f200 809f 	bhi.w	8004b68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004b69 	.word	0x08004b69
 8004a38:	08004b69 	.word	0x08004b69
 8004a3c:	08004b69 	.word	0x08004b69
 8004a40:	08004aa5 	.word	0x08004aa5
 8004a44:	08004b69 	.word	0x08004b69
 8004a48:	08004b69 	.word	0x08004b69
 8004a4c:	08004b69 	.word	0x08004b69
 8004a50:	08004ae7 	.word	0x08004ae7
 8004a54:	08004b69 	.word	0x08004b69
 8004a58:	08004b69 	.word	0x08004b69
 8004a5c:	08004b69 	.word	0x08004b69
 8004a60:	08004b27 	.word	0x08004b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f9e2 	bl	8004e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0204 	bic.w	r2, r2, #4
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	619a      	str	r2, [r3, #24]
      break;
 8004aa2:	e062      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fa32 	bl	8004f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
      break;
 8004ae4:	e041      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fa87 	bl	8005000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0208 	orr.w	r2, r2, #8
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      break;
 8004b24:	e021      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fadb 	bl	80050e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
      break;
 8004b66:	e000      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_ConfigClockSource+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e0a6      	b.n	8004cea <HAL_TIM_ConfigClockSource+0x166>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d067      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0x120>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d80b      	bhi.n	8004bf0 <HAL_TIM_ConfigClockSource+0x6c>
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d073      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x140>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d802      	bhi.n	8004be6 <HAL_TIM_ConfigClockSource+0x62>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d06f      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004be4:	e078      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d06c      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x140>
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d06a      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bee:	e073      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bf0:	2b70      	cmp	r3, #112	; 0x70
 8004bf2:	d00d      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x8c>
 8004bf4:	2b70      	cmp	r3, #112	; 0x70
 8004bf6:	d804      	bhi.n	8004c02 <HAL_TIM_ConfigClockSource+0x7e>
 8004bf8:	2b50      	cmp	r3, #80	; 0x50
 8004bfa:	d033      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xe0>
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d041      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c00:	e06a      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d066      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x152>
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	d017      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c0e:	e063      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f000 fc5c 	bl	80054dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e04c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f000 fc45 	bl	80054dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e039      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f000 fb03 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2150      	movs	r1, #80	; 0x50
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fc12 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004c82:	e029      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	461a      	mov	r2, r3
 8004c92:	f000 fb5f 	bl	8005354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2160      	movs	r1, #96	; 0x60
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fc02 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004ca2:	e019      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f000 fae3 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2140      	movs	r1, #64	; 0x40
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fbf2 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004cc2:	e009      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fbe9 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a40      	ldr	r2, [pc, #256]	; (8004e08 <TIM_Base_SetConfig+0x114>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3d      	ldr	r2, [pc, #244]	; (8004e0c <TIM_Base_SetConfig+0x118>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3c      	ldr	r2, [pc, #240]	; (8004e10 <TIM_Base_SetConfig+0x11c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3b      	ldr	r2, [pc, #236]	; (8004e14 <TIM_Base_SetConfig+0x120>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3a      	ldr	r2, [pc, #232]	; (8004e18 <TIM_Base_SetConfig+0x124>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <TIM_Base_SetConfig+0x114>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d027      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <TIM_Base_SetConfig+0x118>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d023      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <TIM_Base_SetConfig+0x11c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01f      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <TIM_Base_SetConfig+0x120>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <TIM_Base_SetConfig+0x124>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a28      	ldr	r2, [pc, #160]	; (8004e1c <TIM_Base_SetConfig+0x128>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <TIM_Base_SetConfig+0x12c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <TIM_Base_SetConfig+0x130>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <TIM_Base_SetConfig+0x134>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <TIM_Base_SetConfig+0x138>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <TIM_Base_SetConfig+0x13c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <TIM_Base_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0xf8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	40001800 	.word	0x40001800
 8004e2c:	40001c00 	.word	0x40001c00
 8004e30:	40002000 	.word	0x40002000

08004e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0302 	bic.w	r3, r3, #2
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <TIM_OC1_SetConfig+0xd8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC1_SetConfig+0x64>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <TIM_OC1_SetConfig+0xdc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10c      	bne.n	8004eb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0308 	bic.w	r3, r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_OC1_SetConfig+0xd8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_OC1_SetConfig+0x8e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <TIM_OC1_SetConfig+0xdc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d111      	bne.n	8004ee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400

08004f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0210 	bic.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0320 	bic.w	r3, r3, #32
 8004f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <TIM_OC2_SetConfig+0xe4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC2_SetConfig+0x68>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <TIM_OC2_SetConfig+0xe8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10d      	bne.n	8004f98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <TIM_OC2_SetConfig+0xe4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC2_SetConfig+0x94>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <TIM_OC2_SetConfig+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d113      	bne.n	8004fd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40010400 	.word	0x40010400

08005000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <TIM_OC3_SetConfig+0xe0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC3_SetConfig+0x66>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <TIM_OC3_SetConfig+0xe4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10d      	bne.n	8005082 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <TIM_OC3_SetConfig+0xe0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <TIM_OC3_SetConfig+0x92>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <TIM_OC3_SetConfig+0xe4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d113      	bne.n	80050ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40010400 	.word	0x40010400

080050e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <TIM_OC4_SetConfig+0xa4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_OC4_SetConfig+0x68>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <TIM_OC4_SetConfig+0xa8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d109      	bne.n	8005164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40010400 	.word	0x40010400

08005194 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <TIM_TI1_SetConfig+0xcc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01b      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d017      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <TIM_TI1_SetConfig+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a24      	ldr	r2, [pc, #144]	; (8005268 <TIM_TI1_SetConfig+0xd4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a23      	ldr	r2, [pc, #140]	; (800526c <TIM_TI1_SetConfig+0xd8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <TIM_TI1_SetConfig+0xdc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a21      	ldr	r2, [pc, #132]	; (8005274 <TIM_TI1_SetConfig+0xe0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_TI1_SetConfig+0x66>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <TIM_TI1_SetConfig+0xe4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <TIM_TI1_SetConfig+0x6a>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <TIM_TI1_SetConfig+0x6c>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e003      	b.n	800521e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	b2db      	uxtb	r3, r3
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f023 030a 	bic.w	r3, r3, #10
 8005238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 030a 	and.w	r3, r3, #10
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40010400 	.word	0x40010400
 8005274:	40014000 	.word	0x40014000
 8005278:	40001800 	.word	0x40001800

0800527c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 030a 	bic.w	r3, r3, #10
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f023 0210 	bic.w	r2, r3, #16
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	b29b      	uxth	r3, r3
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800532c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800537e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	031b      	lsls	r3, r3, #12
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 0303 	bic.w	r3, r3, #3
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005404:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800546a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	031b      	lsls	r3, r3, #12
 8005470:	b29b      	uxth	r3, r3
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800547e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 0307 	orr.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	431a      	orrs	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005530:	2302      	movs	r3, #2
 8005532:	e05a      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d01d      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a17      	ldr	r2, [pc, #92]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40001800 	.word	0x40001800

08005614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e03f      	b.n	80056a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fecc 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f829 	bl	80056b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800568c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056f2:	f023 030c 	bic.w	r3, r3, #12
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571e:	f040 818b 	bne.w	8005a38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4ac1      	ldr	r2, [pc, #772]	; (8005a2c <UART_SetConfig+0x37c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d005      	beq.n	8005738 <UART_SetConfig+0x88>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4abf      	ldr	r2, [pc, #764]	; (8005a30 <UART_SetConfig+0x380>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f040 80bd 	bne.w	80058b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe ff8a 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 800573c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	461d      	mov	r5, r3
 8005742:	f04f 0600 	mov.w	r6, #0
 8005746:	46a8      	mov	r8, r5
 8005748:	46b1      	mov	r9, r6
 800574a:	eb18 0308 	adds.w	r3, r8, r8
 800574e:	eb49 0409 	adc.w	r4, r9, r9
 8005752:	4698      	mov	r8, r3
 8005754:	46a1      	mov	r9, r4
 8005756:	eb18 0805 	adds.w	r8, r8, r5
 800575a:	eb49 0906 	adc.w	r9, r9, r6
 800575e:	f04f 0100 	mov.w	r1, #0
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800576a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800576e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005772:	4688      	mov	r8, r1
 8005774:	4691      	mov	r9, r2
 8005776:	eb18 0005 	adds.w	r0, r8, r5
 800577a:	eb49 0106 	adc.w	r1, r9, r6
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	461d      	mov	r5, r3
 8005784:	f04f 0600 	mov.w	r6, #0
 8005788:	196b      	adds	r3, r5, r5
 800578a:	eb46 0406 	adc.w	r4, r6, r6
 800578e:	461a      	mov	r2, r3
 8005790:	4623      	mov	r3, r4
 8005792:	f7fa fd19 	bl	80001c8 <__aeabi_uldivmod>
 8005796:	4603      	mov	r3, r0
 8005798:	460c      	mov	r4, r1
 800579a:	461a      	mov	r2, r3
 800579c:	4ba5      	ldr	r3, [pc, #660]	; (8005a34 <UART_SetConfig+0x384>)
 800579e:	fba3 2302 	umull	r2, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	461d      	mov	r5, r3
 80057ac:	f04f 0600 	mov.w	r6, #0
 80057b0:	46a9      	mov	r9, r5
 80057b2:	46b2      	mov	sl, r6
 80057b4:	eb19 0309 	adds.w	r3, r9, r9
 80057b8:	eb4a 040a 	adc.w	r4, sl, sl
 80057bc:	4699      	mov	r9, r3
 80057be:	46a2      	mov	sl, r4
 80057c0:	eb19 0905 	adds.w	r9, r9, r5
 80057c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057dc:	4689      	mov	r9, r1
 80057de:	4692      	mov	sl, r2
 80057e0:	eb19 0005 	adds.w	r0, r9, r5
 80057e4:	eb4a 0106 	adc.w	r1, sl, r6
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	461d      	mov	r5, r3
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	196b      	adds	r3, r5, r5
 80057f4:	eb46 0406 	adc.w	r4, r6, r6
 80057f8:	461a      	mov	r2, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	f7fa fce4 	bl	80001c8 <__aeabi_uldivmod>
 8005800:	4603      	mov	r3, r0
 8005802:	460c      	mov	r4, r1
 8005804:	461a      	mov	r2, r3
 8005806:	4b8b      	ldr	r3, [pc, #556]	; (8005a34 <UART_SetConfig+0x384>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a86      	ldr	r2, [pc, #536]	; (8005a34 <UART_SetConfig+0x384>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005828:	4498      	add	r8, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	461d      	mov	r5, r3
 800582e:	f04f 0600 	mov.w	r6, #0
 8005832:	46a9      	mov	r9, r5
 8005834:	46b2      	mov	sl, r6
 8005836:	eb19 0309 	adds.w	r3, r9, r9
 800583a:	eb4a 040a 	adc.w	r4, sl, sl
 800583e:	4699      	mov	r9, r3
 8005840:	46a2      	mov	sl, r4
 8005842:	eb19 0905 	adds.w	r9, r9, r5
 8005846:	eb4a 0a06 	adc.w	sl, sl, r6
 800584a:	f04f 0100 	mov.w	r1, #0
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800585a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800585e:	4689      	mov	r9, r1
 8005860:	4692      	mov	sl, r2
 8005862:	eb19 0005 	adds.w	r0, r9, r5
 8005866:	eb4a 0106 	adc.w	r1, sl, r6
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	461d      	mov	r5, r3
 8005870:	f04f 0600 	mov.w	r6, #0
 8005874:	196b      	adds	r3, r5, r5
 8005876:	eb46 0406 	adc.w	r4, r6, r6
 800587a:	461a      	mov	r2, r3
 800587c:	4623      	mov	r3, r4
 800587e:	f7fa fca3 	bl	80001c8 <__aeabi_uldivmod>
 8005882:	4603      	mov	r3, r0
 8005884:	460c      	mov	r4, r1
 8005886:	461a      	mov	r2, r3
 8005888:	4b6a      	ldr	r3, [pc, #424]	; (8005a34 <UART_SetConfig+0x384>)
 800588a:	fba3 1302 	umull	r1, r3, r3, r2
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	2164      	movs	r1, #100	; 0x64
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	3332      	adds	r3, #50	; 0x32
 800589c:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <UART_SetConfig+0x384>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	f003 0207 	and.w	r2, r3, #7
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4442      	add	r2, r8
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	e26f      	b.n	8005d92 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058b2:	f7fe feb9 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80058b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	461d      	mov	r5, r3
 80058bc:	f04f 0600 	mov.w	r6, #0
 80058c0:	46a8      	mov	r8, r5
 80058c2:	46b1      	mov	r9, r6
 80058c4:	eb18 0308 	adds.w	r3, r8, r8
 80058c8:	eb49 0409 	adc.w	r4, r9, r9
 80058cc:	4698      	mov	r8, r3
 80058ce:	46a1      	mov	r9, r4
 80058d0:	eb18 0805 	adds.w	r8, r8, r5
 80058d4:	eb49 0906 	adc.w	r9, r9, r6
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058ec:	4688      	mov	r8, r1
 80058ee:	4691      	mov	r9, r2
 80058f0:	eb18 0005 	adds.w	r0, r8, r5
 80058f4:	eb49 0106 	adc.w	r1, r9, r6
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	461d      	mov	r5, r3
 80058fe:	f04f 0600 	mov.w	r6, #0
 8005902:	196b      	adds	r3, r5, r5
 8005904:	eb46 0406 	adc.w	r4, r6, r6
 8005908:	461a      	mov	r2, r3
 800590a:	4623      	mov	r3, r4
 800590c:	f7fa fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8005910:	4603      	mov	r3, r0
 8005912:	460c      	mov	r4, r1
 8005914:	461a      	mov	r2, r3
 8005916:	4b47      	ldr	r3, [pc, #284]	; (8005a34 <UART_SetConfig+0x384>)
 8005918:	fba3 2302 	umull	r2, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	461d      	mov	r5, r3
 8005926:	f04f 0600 	mov.w	r6, #0
 800592a:	46a9      	mov	r9, r5
 800592c:	46b2      	mov	sl, r6
 800592e:	eb19 0309 	adds.w	r3, r9, r9
 8005932:	eb4a 040a 	adc.w	r4, sl, sl
 8005936:	4699      	mov	r9, r3
 8005938:	46a2      	mov	sl, r4
 800593a:	eb19 0905 	adds.w	r9, r9, r5
 800593e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800594e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005956:	4689      	mov	r9, r1
 8005958:	4692      	mov	sl, r2
 800595a:	eb19 0005 	adds.w	r0, r9, r5
 800595e:	eb4a 0106 	adc.w	r1, sl, r6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	461d      	mov	r5, r3
 8005968:	f04f 0600 	mov.w	r6, #0
 800596c:	196b      	adds	r3, r5, r5
 800596e:	eb46 0406 	adc.w	r4, r6, r6
 8005972:	461a      	mov	r2, r3
 8005974:	4623      	mov	r3, r4
 8005976:	f7fa fc27 	bl	80001c8 <__aeabi_uldivmod>
 800597a:	4603      	mov	r3, r0
 800597c:	460c      	mov	r4, r1
 800597e:	461a      	mov	r2, r3
 8005980:	4b2c      	ldr	r3, [pc, #176]	; (8005a34 <UART_SetConfig+0x384>)
 8005982:	fba3 1302 	umull	r1, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	2164      	movs	r1, #100	; 0x64
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	3332      	adds	r3, #50	; 0x32
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <UART_SetConfig+0x384>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059a2:	4498      	add	r8, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	461d      	mov	r5, r3
 80059a8:	f04f 0600 	mov.w	r6, #0
 80059ac:	46a9      	mov	r9, r5
 80059ae:	46b2      	mov	sl, r6
 80059b0:	eb19 0309 	adds.w	r3, r9, r9
 80059b4:	eb4a 040a 	adc.w	r4, sl, sl
 80059b8:	4699      	mov	r9, r3
 80059ba:	46a2      	mov	sl, r4
 80059bc:	eb19 0905 	adds.w	r9, r9, r5
 80059c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059d8:	4689      	mov	r9, r1
 80059da:	4692      	mov	sl, r2
 80059dc:	eb19 0005 	adds.w	r0, r9, r5
 80059e0:	eb4a 0106 	adc.w	r1, sl, r6
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	461d      	mov	r5, r3
 80059ea:	f04f 0600 	mov.w	r6, #0
 80059ee:	196b      	adds	r3, r5, r5
 80059f0:	eb46 0406 	adc.w	r4, r6, r6
 80059f4:	461a      	mov	r2, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	f7fa fbe6 	bl	80001c8 <__aeabi_uldivmod>
 80059fc:	4603      	mov	r3, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <UART_SetConfig+0x384>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	; 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	3332      	adds	r3, #50	; 0x32
 8005a16:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <UART_SetConfig+0x384>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 0207 	and.w	r2, r3, #7
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4442      	add	r2, r8
 8005a28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a2a:	e1b2      	b.n	8005d92 <UART_SetConfig+0x6e2>
 8005a2c:	40011000 	.word	0x40011000
 8005a30:	40011400 	.word	0x40011400
 8005a34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4ad7      	ldr	r2, [pc, #860]	; (8005d9c <UART_SetConfig+0x6ec>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d005      	beq.n	8005a4e <UART_SetConfig+0x39e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4ad6      	ldr	r2, [pc, #856]	; (8005da0 <UART_SetConfig+0x6f0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	f040 80d1 	bne.w	8005bf0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a4e:	f7fe fdff 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8005a52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	469a      	mov	sl, r3
 8005a58:	f04f 0b00 	mov.w	fp, #0
 8005a5c:	46d0      	mov	r8, sl
 8005a5e:	46d9      	mov	r9, fp
 8005a60:	eb18 0308 	adds.w	r3, r8, r8
 8005a64:	eb49 0409 	adc.w	r4, r9, r9
 8005a68:	4698      	mov	r8, r3
 8005a6a:	46a1      	mov	r9, r4
 8005a6c:	eb18 080a 	adds.w	r8, r8, sl
 8005a70:	eb49 090b 	adc.w	r9, r9, fp
 8005a74:	f04f 0100 	mov.w	r1, #0
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a88:	4688      	mov	r8, r1
 8005a8a:	4691      	mov	r9, r2
 8005a8c:	eb1a 0508 	adds.w	r5, sl, r8
 8005a90:	eb4b 0609 	adc.w	r6, fp, r9
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	f04f 0400 	mov.w	r4, #0
 8005aa6:	0094      	lsls	r4, r2, #2
 8005aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005aac:	008b      	lsls	r3, r1, #2
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	f7fa fb87 	bl	80001c8 <__aeabi_uldivmod>
 8005aba:	4603      	mov	r3, r0
 8005abc:	460c      	mov	r4, r1
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4bb8      	ldr	r3, [pc, #736]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	469b      	mov	fp, r3
 8005ad0:	f04f 0c00 	mov.w	ip, #0
 8005ad4:	46d9      	mov	r9, fp
 8005ad6:	46e2      	mov	sl, ip
 8005ad8:	eb19 0309 	adds.w	r3, r9, r9
 8005adc:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	46a2      	mov	sl, r4
 8005ae4:	eb19 090b 	adds.w	r9, r9, fp
 8005ae8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b00:	4689      	mov	r9, r1
 8005b02:	4692      	mov	sl, r2
 8005b04:	eb1b 0509 	adds.w	r5, fp, r9
 8005b08:	eb4c 060a 	adc.w	r6, ip, sl
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	0094      	lsls	r4, r2, #2
 8005b20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b24:	008b      	lsls	r3, r1, #2
 8005b26:	461a      	mov	r2, r3
 8005b28:	4623      	mov	r3, r4
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	f7fa fb4b 	bl	80001c8 <__aeabi_uldivmod>
 8005b32:	4603      	mov	r3, r0
 8005b34:	460c      	mov	r4, r1
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b9a      	ldr	r3, [pc, #616]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2164      	movs	r1, #100	; 0x64
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	3332      	adds	r3, #50	; 0x32
 8005b4c:	4a95      	ldr	r2, [pc, #596]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b58:	4498      	add	r8, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	469b      	mov	fp, r3
 8005b5e:	f04f 0c00 	mov.w	ip, #0
 8005b62:	46d9      	mov	r9, fp
 8005b64:	46e2      	mov	sl, ip
 8005b66:	eb19 0309 	adds.w	r3, r9, r9
 8005b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b6e:	4699      	mov	r9, r3
 8005b70:	46a2      	mov	sl, r4
 8005b72:	eb19 090b 	adds.w	r9, r9, fp
 8005b76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b8e:	4689      	mov	r9, r1
 8005b90:	4692      	mov	sl, r2
 8005b92:	eb1b 0509 	adds.w	r5, fp, r9
 8005b96:	eb4c 060a 	adc.w	r6, ip, sl
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f04f 0400 	mov.w	r4, #0
 8005bac:	0094      	lsls	r4, r2, #2
 8005bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb2:	008b      	lsls	r3, r1, #2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	4631      	mov	r1, r6
 8005bbc:	f7fa fb04 	bl	80001c8 <__aeabi_uldivmod>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b77      	ldr	r3, [pc, #476]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	; 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	3332      	adds	r3, #50	; 0x32
 8005bda:	4a72      	ldr	r2, [pc, #456]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4442      	add	r2, r8
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	e0d0      	b.n	8005d92 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe fd1a 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	469a      	mov	sl, r3
 8005bfa:	f04f 0b00 	mov.w	fp, #0
 8005bfe:	46d0      	mov	r8, sl
 8005c00:	46d9      	mov	r9, fp
 8005c02:	eb18 0308 	adds.w	r3, r8, r8
 8005c06:	eb49 0409 	adc.w	r4, r9, r9
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	46a1      	mov	r9, r4
 8005c0e:	eb18 080a 	adds.w	r8, r8, sl
 8005c12:	eb49 090b 	adc.w	r9, r9, fp
 8005c16:	f04f 0100 	mov.w	r1, #0
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c2a:	4688      	mov	r8, r1
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	eb1a 0508 	adds.w	r5, sl, r8
 8005c32:	eb4b 0609 	adc.w	r6, fp, r9
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	f04f 0400 	mov.w	r4, #0
 8005c48:	0094      	lsls	r4, r2, #2
 8005c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c4e:	008b      	lsls	r3, r1, #2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	4628      	mov	r0, r5
 8005c56:	4631      	mov	r1, r6
 8005c58:	f7fa fab6 	bl	80001c8 <__aeabi_uldivmod>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	461a      	mov	r2, r3
 8005c62:	4b50      	ldr	r3, [pc, #320]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005c64:	fba3 2302 	umull	r2, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	469b      	mov	fp, r3
 8005c72:	f04f 0c00 	mov.w	ip, #0
 8005c76:	46d9      	mov	r9, fp
 8005c78:	46e2      	mov	sl, ip
 8005c7a:	eb19 0309 	adds.w	r3, r9, r9
 8005c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c82:	4699      	mov	r9, r3
 8005c84:	46a2      	mov	sl, r4
 8005c86:	eb19 090b 	adds.w	r9, r9, fp
 8005c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c8e:	f04f 0100 	mov.w	r1, #0
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	4692      	mov	sl, r2
 8005ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8005caa:	eb4c 060a 	adc.w	r6, ip, sl
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	f04f 0400 	mov.w	r4, #0
 8005cc0:	0094      	lsls	r4, r2, #2
 8005cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cc6:	008b      	lsls	r3, r1, #2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4623      	mov	r3, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	4631      	mov	r1, r6
 8005cd0:	f7fa fa7a 	bl	80001c8 <__aeabi_uldivmod>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b32      	ldr	r3, [pc, #200]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a2d      	ldr	r2, [pc, #180]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cfa:	4498      	add	r8, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	469b      	mov	fp, r3
 8005d00:	f04f 0c00 	mov.w	ip, #0
 8005d04:	46d9      	mov	r9, fp
 8005d06:	46e2      	mov	sl, ip
 8005d08:	eb19 0309 	adds.w	r3, r9, r9
 8005d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d10:	4699      	mov	r9, r3
 8005d12:	46a2      	mov	sl, r4
 8005d14:	eb19 090b 	adds.w	r9, r9, fp
 8005d18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d30:	4689      	mov	r9, r1
 8005d32:	4692      	mov	sl, r2
 8005d34:	eb1b 0509 	adds.w	r5, fp, r9
 8005d38:	eb4c 060a 	adc.w	r6, ip, sl
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4619      	mov	r1, r3
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	0094      	lsls	r4, r2, #2
 8005d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d54:	008b      	lsls	r3, r1, #2
 8005d56:	461a      	mov	r2, r3
 8005d58:	4623      	mov	r3, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	f7fa fa33 	bl	80001c8 <__aeabi_uldivmod>
 8005d62:	4603      	mov	r3, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	2164      	movs	r1, #100	; 0x64
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	3332      	adds	r3, #50	; 0x32
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <UART_SetConfig+0x6f4>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4442      	add	r2, r8
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	e7ff      	b.n	8005d92 <UART_SetConfig+0x6e2>
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40011400 	.word	0x40011400
 8005da4:	51eb851f 	.word	0x51eb851f

08005da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005da8:	b084      	sub	sp, #16
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	f107 001c 	add.w	r0, r7, #28
 8005db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d122      	bne.n	8005e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fa26 	bl	800724c <USB_CoreReset>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	e01a      	b.n	8005e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 fa1a 	bl	800724c <USB_CoreReset>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2e:	e005      	b.n	8005e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10b      	bne.n	8005e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f043 0206 	orr.w	r2, r3, #6
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e66:	b004      	add	sp, #16
 8005e68:	4770      	bx	lr
	...

08005e6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d165      	bne.n	8005f4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a41      	ldr	r2, [pc, #260]	; (8005f88 <USB_SetTurnaroundTime+0x11c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d906      	bls.n	8005e96 <USB_SetTurnaroundTime+0x2a>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4a40      	ldr	r2, [pc, #256]	; (8005f8c <USB_SetTurnaroundTime+0x120>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d802      	bhi.n	8005e96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e90:	230f      	movs	r3, #15
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e062      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a3c      	ldr	r2, [pc, #240]	; (8005f8c <USB_SetTurnaroundTime+0x120>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d906      	bls.n	8005eac <USB_SetTurnaroundTime+0x40>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4a3b      	ldr	r2, [pc, #236]	; (8005f90 <USB_SetTurnaroundTime+0x124>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d802      	bhi.n	8005eac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ea6:	230e      	movs	r3, #14
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e057      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a38      	ldr	r2, [pc, #224]	; (8005f90 <USB_SetTurnaroundTime+0x124>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d906      	bls.n	8005ec2 <USB_SetTurnaroundTime+0x56>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <USB_SetTurnaroundTime+0x128>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d802      	bhi.n	8005ec2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e04c      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <USB_SetTurnaroundTime+0x128>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d906      	bls.n	8005ed8 <USB_SetTurnaroundTime+0x6c>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <USB_SetTurnaroundTime+0x12c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d802      	bhi.n	8005ed8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e041      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <USB_SetTurnaroundTime+0x12c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d906      	bls.n	8005eee <USB_SetTurnaroundTime+0x82>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4a2e      	ldr	r2, [pc, #184]	; (8005f9c <USB_SetTurnaroundTime+0x130>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d802      	bhi.n	8005eee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ee8:	230b      	movs	r3, #11
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e036      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <USB_SetTurnaroundTime+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d906      	bls.n	8005f04 <USB_SetTurnaroundTime+0x98>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <USB_SetTurnaroundTime+0x134>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d802      	bhi.n	8005f04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005efe:	230a      	movs	r3, #10
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e02b      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a26      	ldr	r2, [pc, #152]	; (8005fa0 <USB_SetTurnaroundTime+0x134>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d906      	bls.n	8005f1a <USB_SetTurnaroundTime+0xae>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <USB_SetTurnaroundTime+0x138>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d802      	bhi.n	8005f1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f14:	2309      	movs	r3, #9
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e020      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <USB_SetTurnaroundTime+0x138>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d906      	bls.n	8005f30 <USB_SetTurnaroundTime+0xc4>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <USB_SetTurnaroundTime+0x13c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d802      	bhi.n	8005f30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e015      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <USB_SetTurnaroundTime+0x13c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d906      	bls.n	8005f46 <USB_SetTurnaroundTime+0xda>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <USB_SetTurnaroundTime+0x140>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d802      	bhi.n	8005f46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f40:	2307      	movs	r3, #7
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e00a      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f46:	2306      	movs	r3, #6
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e007      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f52:	2309      	movs	r3, #9
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e001      	b.n	8005f5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f58:	2309      	movs	r3, #9
 8005f5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	029b      	lsls	r3, r3, #10
 8005f70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	00d8acbf 	.word	0x00d8acbf
 8005f8c:	00e4e1bf 	.word	0x00e4e1bf
 8005f90:	00f423ff 	.word	0x00f423ff
 8005f94:	0106737f 	.word	0x0106737f
 8005f98:	011a499f 	.word	0x011a499f
 8005f9c:	01312cff 	.word	0x01312cff
 8005fa0:	014ca43f 	.word	0x014ca43f
 8005fa4:	016e35ff 	.word	0x016e35ff
 8005fa8:	01a6ab1f 	.word	0x01a6ab1f
 8005fac:	01e847ff 	.word	0x01e847ff

08005fb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f043 0201 	orr.w	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d106      	bne.n	8006020 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	e00b      	b.n	8006038 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	e001      	b.n	8006038 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e003      	b.n	8006040 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006038:	2032      	movs	r0, #50	; 0x32
 800603a:	f7fb fb7b 	bl	8001734 <HAL_Delay>

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006048:	b084      	sub	sp, #16
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e009      	b.n	800607c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	3340      	adds	r3, #64	; 0x40
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	2200      	movs	r2, #0
 8006074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3301      	adds	r3, #1
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b0e      	cmp	r3, #14
 8006080:	d9f2      	bls.n	8006068 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11c      	bne.n	80060c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f043 0302 	orr.w	r3, r3, #2
 800609a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
 80060c0:	e00b      	b.n	80060da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	4619      	mov	r1, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f4:	461a      	mov	r2, r3
 80060f6:	680b      	ldr	r3, [r1, #0]
 80060f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10c      	bne.n	800611a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006106:	2100      	movs	r1, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f949 	bl	80063a0 <USB_SetDevSpeed>
 800610e:	e008      	b.n	8006122 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006110:	2101      	movs	r1, #1
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f944 	bl	80063a0 <USB_SetDevSpeed>
 8006118:	e003      	b.n	8006122 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800611a:	2103      	movs	r1, #3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f93f 	bl	80063a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006122:	2110      	movs	r1, #16
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f8f3 	bl	8006310 <USB_FlushTxFifo>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f911 	bl	800635c <USB_FlushRxFifo>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	461a      	mov	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	461a      	mov	r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	461a      	mov	r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e043      	b.n	80061f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006184:	d118      	bne.n	80061b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	461a      	mov	r2, r3
 800619a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	e013      	b.n	80061ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	461a      	mov	r2, r3
 80061b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e008      	b.n	80061ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	461a      	mov	r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	461a      	mov	r2, r3
 80061ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d3b7      	bcc.n	800616e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e043      	b.n	800628c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621a:	d118      	bne.n	800624e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	461a      	mov	r2, r3
 8006230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e013      	b.n	8006260 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	461a      	mov	r2, r3
 8006246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e008      	b.n	8006260 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	2300      	movs	r3, #0
 8006270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	461a      	mov	r2, r3
 8006280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	429a      	cmp	r2, r3
 8006292:	d3b7      	bcc.n	8006204 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f043 0210 	orr.w	r2, r3, #16
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <USB_DevInit+0x2c4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f043 0208 	orr.w	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d107      	bne.n	80062fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f4:	f043 0304 	orr.w	r3, r3, #4
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006308:	b004      	add	sp, #16
 800630a:	4770      	bx	lr
 800630c:	803c3800 	.word	0x803c3800

08006310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <USB_FlushTxFifo+0x48>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e006      	b.n	800634a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b20      	cmp	r3, #32
 8006346:	d0f0      	beq.n	800632a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	00030d40 	.word	0x00030d40

0800635c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2210      	movs	r2, #16
 800636c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <USB_FlushRxFifo+0x40>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b10      	cmp	r3, #16
 800638a:	d0f0      	beq.n	800636e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	00030d40 	.word	0x00030d40

080063a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c0:	4313      	orrs	r3, r2
 80063c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0306 	and.w	r3, r3, #6
 80063ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
 80063f6:	e00a      	b.n	800640e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d002      	beq.n	8006404 <USB_GetDevSpeed+0x32>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b06      	cmp	r3, #6
 8006402:	d102      	bne.n	800640a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006404:	2302      	movs	r3, #2
 8006406:	75fb      	strb	r3, [r7, #23]
 8006408:	e001      	b.n	800640e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800640a:	230f      	movs	r3, #15
 800640c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d13a      	bne.n	80064ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	b29b      	uxth	r3, r3
 8006450:	68f9      	ldr	r1, [r7, #12]
 8006452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006456:	4313      	orrs	r3, r2
 8006458:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d155      	bne.n	800651c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800648c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	059b      	lsls	r3, r3, #22
 8006492:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006494:	4313      	orrs	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e036      	b.n	800651c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d11a      	bne.n	800651c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	78db      	ldrb	r3, [r3, #3]
 8006500:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006502:	430b      	orrs	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 815c 	bne.w	8006806 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d132      	bne.n	80065bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b4:	0cdb      	lsrs	r3, r3, #19
 80065b6:	04db      	lsls	r3, r3, #19
 80065b8:	6113      	str	r3, [r2, #16]
 80065ba:	e074      	b.n	80066a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	0cdb      	lsrs	r3, r3, #19
 80065d8:	04db      	lsls	r3, r3, #19
 80065da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	440b      	add	r3, r1
 8006618:	1e59      	subs	r1, r3, #1
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006622:	04d9      	lsls	r1, r3, #19
 8006624:	4b9d      	ldr	r3, [pc, #628]	; (800689c <USB_EPStartXfer+0x370>)
 8006626:	400b      	ands	r3, r1
 8006628:	69b9      	ldr	r1, [r7, #24]
 800662a:	0148      	lsls	r0, r1, #5
 800662c:	69f9      	ldr	r1, [r7, #28]
 800662e:	4401      	add	r1, r0
 8006630:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006634:	4313      	orrs	r3, r2
 8006636:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664e:	69b9      	ldr	r1, [r7, #24]
 8006650:	0148      	lsls	r0, r1, #5
 8006652:	69f9      	ldr	r1, [r7, #28]
 8006654:	4401      	add	r1, r0
 8006656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800665a:	4313      	orrs	r3, r2
 800665c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	78db      	ldrb	r3, [r3, #3]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d11f      	bne.n	80066a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006684:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d14b      	bne.n	8006744 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	461a      	mov	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d128      	bne.n	8006722 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d110      	bne.n	8006702 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e00f      	b.n	8006722 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006720:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e12f      	b.n	80069a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006762:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	78db      	ldrb	r3, [r3, #3]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d015      	beq.n	8006798 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8117 	beq.w	80069a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	2101      	movs	r1, #1
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	69f9      	ldr	r1, [r7, #28]
 800678e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006792:	4313      	orrs	r3, r2
 8006794:	634b      	str	r3, [r1, #52]	; 0x34
 8006796:	e105      	b.n	80069a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e00f      	b.n	80067ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68d9      	ldr	r1, [r3, #12]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	b298      	uxth	r0, r3
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa2b 	bl	8006c5a <USB_WritePacket>
 8006804:	e0ce      	b.n	80069a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006820:	0cdb      	lsrs	r3, r3, #19
 8006822:	04db      	lsls	r3, r3, #19
 8006824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006840:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006844:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006848:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d126      	bne.n	80068a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006868:	69b9      	ldr	r1, [r7, #24]
 800686a:	0148      	lsls	r0, r1, #5
 800686c:	69f9      	ldr	r1, [r7, #28]
 800686e:	4401      	add	r1, r0
 8006870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006874:	4313      	orrs	r3, r2
 8006876:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006896:	6113      	str	r3, [r2, #16]
 8006898:	e036      	b.n	8006908 <USB_EPStartXfer+0x3dc>
 800689a:	bf00      	nop
 800689c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4413      	add	r3, r2
 80068aa:	1e5a      	subs	r2, r3, #1
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	8afb      	ldrh	r3, [r7, #22]
 80068c6:	04d9      	lsls	r1, r3, #19
 80068c8:	4b39      	ldr	r3, [pc, #228]	; (80069b0 <USB_EPStartXfer+0x484>)
 80068ca:	400b      	ands	r3, r1
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	0148      	lsls	r0, r1, #5
 80068d0:	69f9      	ldr	r1, [r7, #28]
 80068d2:	4401      	add	r1, r0
 80068d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068d8:	4313      	orrs	r3, r2
 80068da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	8af9      	ldrh	r1, [r7, #22]
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f8:	69b9      	ldr	r1, [r7, #24]
 80068fa:	0148      	lsls	r0, r1, #5
 80068fc:	69f9      	ldr	r1, [r7, #28]
 80068fe:	4401      	add	r1, r0
 8006900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006904:	4313      	orrs	r3, r2
 8006906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d10d      	bne.n	800692a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	68d9      	ldr	r1, [r3, #12]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	460a      	mov	r2, r1
 8006928:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	78db      	ldrb	r3, [r3, #3]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d128      	bne.n	8006984 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d110      	bne.n	8006964 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e00f      	b.n	8006984 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006982:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	1ff80000 	.word	0x1ff80000

080069b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	f040 80cd 	bne.w	8006b70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d132      	bne.n	8006a44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	0cdb      	lsrs	r3, r3, #19
 8006a3e:	04db      	lsls	r3, r3, #19
 8006a40:	6113      	str	r3, [r2, #16]
 8006a42:	e04e      	b.n	8006ae2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5e:	0cdb      	lsrs	r3, r3, #19
 8006a60:	04db      	lsls	r3, r3, #19
 8006a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d903      	bls.n	8006a9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ad2:	6939      	ldr	r1, [r7, #16]
 8006ad4:	0148      	lsls	r0, r1, #5
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	4401      	add	r1, r0
 8006ada:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d11e      	bne.n	8006b26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	461a      	mov	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e092      	b.n	8006c4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d07e      	beq.n	8006c4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	2101      	movs	r1, #1
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8006b6e:	e06d      	b.n	8006c4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8a:	0cdb      	lsrs	r3, r3, #19
 8006b8c:	04db      	lsls	r3, r3, #19
 8006b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bfa:	6939      	ldr	r1, [r7, #16]
 8006bfc:	0148      	lsls	r0, r1, #5
 8006bfe:	6979      	ldr	r1, [r7, #20]
 8006c00:	4401      	add	r1, r0
 8006c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c06:	4313      	orrs	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10d      	bne.n	8006c2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	460a      	mov	r2, r1
 8006c2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b089      	sub	sp, #36	; 0x24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	4611      	mov	r1, r2
 8006c66:	461a      	mov	r2, r3
 8006c68:	460b      	mov	r3, r1
 8006c6a:	71fb      	strb	r3, [r7, #7]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006c78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11a      	bne.n	8006cb6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c80:	88bb      	ldrh	r3, [r7, #4]
 8006c82:	3303      	adds	r3, #3
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e00f      	b.n	8006cae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	031a      	lsls	r2, r3, #12
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d3eb      	bcc.n	8006c8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3724      	adds	r7, #36	; 0x24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	3303      	adds	r3, #3
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e00b      	b.n	8006d00 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d3ef      	bcc.n	8006ce8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006d08:	69fb      	ldr	r3, [r7, #28]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	; 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d12c      	bne.n	8006d8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	db12      	blt.n	8006d6a <USB_EPSetStall+0x54>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e02b      	b.n	8006de4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	db12      	blt.n	8006dc4 <USB_EPSetStall+0xae>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00f      	beq.n	8006dc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d128      	bne.n	8006e60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	78db      	ldrb	r3, [r3, #3]
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d003      	beq.n	8006e3e <USB_EPClearStall+0x4c>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	78db      	ldrb	r3, [r3, #3]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d138      	bne.n	8006eb0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e027      	b.n	8006eb0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	78db      	ldrb	r3, [r3, #3]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d003      	beq.n	8006e90 <USB_EPClearStall+0x9e>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	78db      	ldrb	r3, [r3, #3]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d10f      	bne.n	8006eb0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e016      	b.n	8006efe <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ee2:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3301      	adds	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b0e      	cmp	r3, #14
 8006f02:	d9e5      	bls.n	8006ed0 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fa17 	bl	800635c <USB_FlushRxFifo>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <USB_StopDevice+0x7e>
  {
    return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	e00b      	b.n	8006f54 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8006f3c:	2110      	movs	r1, #16
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f9e6 	bl	8006310 <USB_FlushTxFifo>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USB_StopDevice+0x94>
  {
    return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	e000      	b.n	8006f54 <USB_StopDevice+0x96>
  }

  return ret;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f90:	68f9      	ldr	r1, [r7, #12]
 8006f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f96:	4313      	orrs	r3, r2
 8006f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f023 0302 	bic.w	r3, r3, #2
 8006fc6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006fc8:	2003      	movs	r0, #3
 8006fca:	f7fa fbb3 	bl	8001734 <HAL_Delay>

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	f7fa fb9b 	bl	8001734 <HAL_Delay>

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4013      	ands	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	0c1b      	lsrs	r3, r3, #16
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4013      	ands	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	b29b      	uxth	r3, r3
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4013      	ands	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070c4:	68bb      	ldr	r3, [r7, #8]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	01db      	lsls	r3, r3, #7
 8007104:	b2db      	uxtb	r3, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4013      	ands	r3, r2
 800711e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007120:	68bb      	ldr	r3, [r7, #8]
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f003 0301 	and.w	r3, r3, #1
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	460b      	mov	r3, r1
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	333c      	adds	r3, #60	; 0x3c
 80071a6:	3304      	adds	r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4a26      	ldr	r2, [pc, #152]	; (8007248 <USB_EP0_OutStart+0xb8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d90a      	bls.n	80071ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c4:	d101      	bne.n	80071ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e037      	b.n	800723a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f8:	f043 0318 	orr.w	r3, r3, #24
 80071fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007210:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10f      	bne.n	8007238 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007232:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	4f54300a 	.word	0x4f54300a

0800724c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <USB_CoreReset+0x64>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e01b      	b.n	80072a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	daf2      	bge.n	8007258 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f043 0201 	orr.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <USB_CoreReset+0x64>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e006      	b.n	80072a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d0f0      	beq.n	8007282 <USB_CoreReset+0x36>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	00030d40 	.word	0x00030d40

080072b4 <__NVIC_SystemReset>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80072b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <__NVIC_SystemReset+0x20>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072c4:	4903      	ldr	r1, [pc, #12]	; (80072d4 <__NVIC_SystemReset+0x20>)
 80072c6:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <__NVIC_SystemReset+0x24>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60cb      	str	r3, [r1, #12]
 80072cc:	f3bf 8f4f 	dsb	sy
    __NOP();
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <__NVIC_SystemReset+0x1c>
 80072d4:	e000ed00 	.word	0xe000ed00
 80072d8:	05fa0004 	.word	0x05fa0004

080072dc <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80072e8:	f240 401c 	movw	r0, #1052	; 0x41c
 80072ec:	f002 fbe2 	bl	8009ab4 <malloc>
 80072f0:	4603      	mov	r3, r0
 80072f2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007302:	2302      	movs	r3, #2
 8007304:	e03f      	b.n	8007386 <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800731c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e000      	b.n	8007386 <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80073a4:	2302      	movs	r3, #2
 80073a6:	e027      	b.n	80073f8 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ae:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e8:	4618      	mov	r0, r3
 80073ea:	f002 fb6b 	bl	8009ac4 <free>
  pdev->pClassData = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007410:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03f      	beq.n	80074ae <USBD_DFU_Setup+0xae>
 800742e:	2b20      	cmp	r3, #32
 8007430:	f040 80c3 	bne.w	80075ba <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d830      	bhi.n	800749e <USBD_DFU_Setup+0x9e>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBD_DFU_Setup+0x44>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007495 	.word	0x08007495
 8007448:	08007461 	.word	0x08007461
 800744c:	0800746b 	.word	0x0800746b
 8007450:	08007475 	.word	0x08007475
 8007454:	0800747d 	.word	0x0800747d
 8007458:	08007485 	.word	0x08007485
 800745c:	0800748d 	.word	0x0800748d
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa62 	bl	800792c <DFU_Download>
      break;
 8007468:	e020      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fac7 	bl	8007a00 <DFU_Upload>
      break;
 8007472:	e01b      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb9b 	bl	8007bb0 <DFU_GetStatus>
      break;
 800747a:	e017      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc49 	bl	8007d14 <DFU_ClearStatus>
      break;
 8007482:	e013      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc95 	bl	8007db4 <DFU_GetState>
      break;
 800748a:	e00f      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fca5 	bl	8007ddc <DFU_Abort>
      break;
 8007492:	e00b      	b.n	80074ac <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9e8 	bl	800786c <DFU_Detach>
      break;
 800749c:	e006      	b.n	80074ac <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fd7f 	bl	8008fa4 <USBD_CtlError>
      ret = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	77fb      	strb	r3, [r7, #31]
      break;
 80074aa:	bf00      	nop
    }
    break;
 80074ac:	e08c      	b.n	80075c8 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b0b      	cmp	r3, #11
 80074b4:	d878      	bhi.n	80075a8 <USBD_DFU_Setup+0x1a8>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBD_DFU_Setup+0xbc>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074ed 	.word	0x080074ed
 80074c0:	080075b7 	.word	0x080075b7
 80074c4:	080075a9 	.word	0x080075a9
 80074c8:	080075a9 	.word	0x080075a9
 80074cc:	080075a9 	.word	0x080075a9
 80074d0:	080075a9 	.word	0x080075a9
 80074d4:	08007515 	.word	0x08007515
 80074d8:	080075a9 	.word	0x080075a9
 80074dc:	080075a9 	.word	0x080075a9
 80074e0:	080075a9 	.word	0x080075a9
 80074e4:	0800753f 	.word	0x0800753f
 80074e8:	08007569 	.word	0x08007569
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d107      	bne.n	8007506 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074f6:	f107 030e 	add.w	r3, r7, #14
 80074fa:	2202      	movs	r2, #2
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 fdc1 	bl	8009086 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007504:	e058      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fd4b 	bl	8008fa4 <USBD_CtlError>
        ret = USBD_FAIL;
 800750e:	2303      	movs	r3, #3
 8007510:	77fb      	strb	r3, [r7, #31]
      break;
 8007512:	e051      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	885b      	ldrh	r3, [r3, #2]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b21      	cmp	r3, #33	; 0x21
 800751e:	d107      	bne.n	8007530 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007520:	4b2c      	ldr	r3, [pc, #176]	; (80075d4 <USBD_DFU_Setup+0x1d4>)
 8007522:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	88db      	ldrh	r3, [r3, #6]
 8007528:	2b09      	cmp	r3, #9
 800752a:	bf28      	it	cs
 800752c:	2309      	movcs	r3, #9
 800752e:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007530:	8afb      	ldrh	r3, [r7, #22]
 8007532:	461a      	mov	r2, r3
 8007534:	69b9      	ldr	r1, [r7, #24]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fda5 	bl	8009086 <USBD_CtlSendData>
      break;
 800753c:	e03c      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	2b03      	cmp	r3, #3
 8007546:	d108      	bne.n	800755a <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800754e:	2201      	movs	r2, #1
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fd97 	bl	8009086 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007558:	e02e      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fd21 	bl	8008fa4 <USBD_CtlError>
        ret = USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	77fb      	strb	r3, [r7, #31]
      break;
 8007566:	e027      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	885b      	ldrh	r3, [r3, #2]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d113      	bne.n	800759a <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	2b03      	cmp	r3, #3
 800757a:	d107      	bne.n	800758c <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	885b      	ldrh	r3, [r3, #2]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800758a:	e015      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fd08 	bl	8008fa4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	77fb      	strb	r3, [r7, #31]
      break;
 8007598:	e00e      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fd01 	bl	8008fa4 <USBD_CtlError>
        ret = USBD_FAIL;
 80075a2:	2303      	movs	r3, #3
 80075a4:	77fb      	strb	r3, [r7, #31]
      break;
 80075a6:	e007      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fcfa 	bl	8008fa4 <USBD_CtlError>
      ret = USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	77fb      	strb	r3, [r7, #31]
      break;
 80075b4:	e000      	b.n	80075b8 <USBD_DFU_Setup+0x1b8>
      break;
 80075b6:	bf00      	nop
    }
    break;
 80075b8:	e006      	b.n	80075c8 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fcf1 	bl	8008fa4 <USBD_CtlError>
    ret = USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	77fb      	strb	r3, [r7, #31]
    break;
 80075c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80075c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	2000005a 	.word	0x2000005a

080075d8 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	221b      	movs	r2, #27
 80075e4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000048 	.word	0x20000048

080075f8 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761e:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007626:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800762e:	2b04      	cmp	r3, #4
 8007630:	f040 80bc 	bne.w	80077ac <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800763a:	2b00      	cmp	r3, #0
 800763c:	d17a      	bne.n	8007734 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007644:	2b01      	cmp	r3, #1
 8007646:	f000 8092 	beq.w	800776e <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007650:	2b05      	cmp	r3, #5
 8007652:	d15c      	bne.n	800770e <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b21      	cmp	r3, #33	; 0x21
 800765a:	d124      	bne.n	80076a6 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	461a      	mov	r2, r3
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	441a      	add	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	78db      	ldrb	r3, [r3, #3]
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	441a      	add	r2, r3
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	791b      	ldrb	r3, [r3, #4]
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	441a      	add	r2, r3
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80076a4:	e063      	b.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b41      	cmp	r3, #65	; 0x41
 80076ac:	d15f      	bne.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	461a      	mov	r2, r3
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	441a      	add	r2, r3
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	441a      	add	r2, r3
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	791b      	ldrb	r3, [r3, #4]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	441a      	add	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d031      	beq.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	e057      	b.n	80077be <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8007722:	2301      	movs	r3, #1
 8007724:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8007726:	f107 030c 	add.w	r3, r7, #12
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fc39 	bl	8008fa4 <USBD_CtlError>
 8007732:	e01c      	b.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800773a:	2b01      	cmp	r3, #1
 800773c:	d917      	bls.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007744:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <USBD_DFU_EP0_TxReady+0x1b8>)
 8007746:	4413      	add	r3, r2
 8007748:	029a      	lsls	r2, r3, #10
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	69f8      	ldr	r0, [r7, #28]
 800775a:	6979      	ldr	r1, [r7, #20]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8007762:	4798      	blx	r3
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	e027      	b.n	80077be <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2203      	movs	r2, #3
 8007782:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80077aa:	e007      	b.n	80077bc <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80077b2:	2b07      	cmp	r3, #7
 80077b4:	d102      	bne.n	80077bc <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fb5e 	bl	8007e78 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	003ffffe 	.word	0x003ffffe

080077cc <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220a      	movs	r2, #10
 80077f0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80077f2:	4b03      	ldr	r3, [pc, #12]	; (8007800 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000064 	.word	0x20000064

08007804 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	460b      	mov	r3, r1
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007818:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b06      	cmp	r3, #6
 800781e:	d808      	bhi.n	8007832 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4905      	ldr	r1, [pc, #20]	; (800783c <USBD_DFU_GetUsrStringDesc+0x38>)
 8007828:	4618      	mov	r0, r3
 800782a:	f001 fbcc 	bl	8008fc6 <USBD_GetString>
    return USBD_StrDesc;
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <USBD_DFU_GetUsrStringDesc+0x38>)
 8007830:	e000      	b.n	8007834 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8007832:	2300      	movs	r3, #0
  }
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000160 	.word	0x20000160

08007840 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e004      	b.n	800785e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800787c:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007884:	2b02      	cmp	r3, #2
 8007886:	d013      	beq.n	80078b0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800788e:	2b03      	cmp	r3, #3
 8007890:	d00e      	beq.n	80078b0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007898:	2b05      	cmp	r3, #5
 800789a:	d009      	beq.n	80078b0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d004      	beq.n	80078b0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d125      	bne.n	80078fc <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <DFU_Detach+0xbc>)
 80078fe:	7d5b      	ldrb	r3, [r3, #21]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fb62 	bl	8007fd2 <USBD_Stop>
    (void)USBD_Start(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fb53 	bl	8007fba <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8007914:	e004      	b.n	8007920 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	885b      	ldrh	r3, [r3, #2]
 800791a:	4618      	mov	r0, r3
 800791c:	f7f9 ff0a 	bl	8001734 <HAL_Delay>
}
 8007920:	bf00      	nop
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000048 	.word	0x20000048

0800792c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88db      	ldrh	r3, [r3, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d02d      	beq.n	80079a2 <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800794c:	2b02      	cmp	r3, #2
 800794e:	d004      	beq.n	800795a <DFU_Download+0x2e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007956:	2b05      	cmp	r3, #5
 8007958:	d11e      	bne.n	8007998 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	88db      	ldrh	r3, [r3, #6]
 800796a:	461a      	mov	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798e:	461a      	mov	r2, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fba4 	bl	80090de <USBD_CtlPrepareRx>
 8007996:	e02e      	b.n	80079f6 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fb02 	bl	8008fa4 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80079a0:	e029      	b.n	80079f6 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80079a8:	2b05      	cmp	r3, #5
 80079aa:	d004      	beq.n	80079b6 <DFU_Download+0x8a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d11a      	bne.n	80079ec <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2206      	movs	r2, #6
 80079c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80079ea:	e004      	b.n	80079f6 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fad8 	bl	8008fa4 <USBD_CtlError>
}
 80079f4:	e7ff      	b.n	80079f6 <DFU_Download+0xca>
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a10:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a18:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80a9 	beq.w	8007b76 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d005      	beq.n	8007a3a <DFU_Upload+0x3a>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	f040 8091 	bne.w	8007b5c <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	88db      	ldrh	r3, [r3, #6]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d12c      	bne.n	8007ab6 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d901      	bls.n	8007a6a <DFU_Upload+0x6a>
 8007a66:	2202      	movs	r2, #2
 8007a68:	e000      	b.n	8007a6c <DFU_Upload+0x6c>
 8007a6a:	2209      	movs	r2, #9
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2221      	movs	r2, #33	; 0x21
 8007aa0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2241      	movs	r2, #65	; 0x41
 8007aa6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fae9 	bl	8009086 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007ab4:	e076      	b.n	8007ba4 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d932      	bls.n	8007b26 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2209      	movs	r2, #9
 8007ac4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007af2:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <DFU_Upload+0x1ac>)
 8007af4:	4413      	add	r3, r2
 8007af6:	029a      	lsls	r2, r3, #10
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007afe:	4413      	add	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	6979      	ldr	r1, [r7, #20]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8007b10:	4798      	blx	r3
 8007b12:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fab1 	bl	8009086 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007b24:	e03e      	b.n	8007ba4 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	220f      	movs	r2, #15
 8007b2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fa25 	bl	8008fa4 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8007b5a:	e023      	b.n	8007ba4 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fa18 	bl	8008fa4 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8007b74:	e016      	b.n	8007ba4 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8007ba2:	e7ff      	b.n	8007ba4 <DFU_Upload+0x1a4>
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	003ffffe 	.word	0x003ffffe

08007bb0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bbe:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc6:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d002      	beq.n	8007bd8 <DFU_GetStatus+0x28>
 8007bd2:	2b06      	cmp	r3, #6
 8007bd4:	d051      	beq.n	8007c7a <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8007bd6:	e08e      	b.n	8007cf6 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d034      	beq.n	8007c4c <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2204      	movs	r2, #4
 8007be6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10e      	bne.n	8007c36 <DFU_GetStatus+0x86>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b41      	cmp	r3, #65	; 0x41
 8007c1e:	d10a      	bne.n	8007c36 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007c30:	2100      	movs	r1, #0
 8007c32:	4798      	blx	r3
    break;
 8007c34:	e05f      	b.n	8007cf6 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007c46:	2101      	movs	r1, #1
 8007c48:	4798      	blx	r3
    break;
 8007c4a:	e054      	b.n	8007cf6 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2205      	movs	r2, #5
 8007c50:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8007c78:	e03d      	b.n	8007cf6 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d116      	bne.n	8007cb2 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2207      	movs	r2, #7
 8007c88:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8007cb0:	e020      	b.n	8007cf4 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11b      	bne.n	8007cf4 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8007cbc:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <DFU_GetStatus+0x160>)
 8007cbe:	7d1b      	ldrb	r3, [r3, #20]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d015      	beq.n	8007cf4 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8007cf4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8007cfc:	2206      	movs	r2, #6
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f9c0 	bl	8009086 <USBD_CtlSendData>
}
 8007d06:	bf00      	nop
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000048 	.word	0x20000048

08007d14 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d22:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007d2a:	2b0a      	cmp	r3, #10
 8007d2c:	d11e      	bne.n	8007d6c <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 8007d6a:	e01d      	b.n	8007da8 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	220a      	movs	r2, #10
 8007d70:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	220e      	movs	r2, #14
 8007d78:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f959 	bl	8009086 <USBD_CtlSendData>
}
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d013      	beq.n	8007e1e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d00e      	beq.n	8007e1e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	d009      	beq.n	8007e1e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007e10:	2b06      	cmp	r3, #6
 8007e12:	d004      	beq.n	8007e1e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	d125      	bne.n	8007e6a <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e86:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8007e90:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <DFU_Leave+0x90>)
 8007e92:	7d1b      	ldrb	r3, [r3, #20]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d016      	beq.n	8007eca <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8007ec8:	e01a      	b.n	8007f00 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f86b 	bl	8007fd2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8007efc:	f7ff f9da 	bl	80072b4 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000048 	.word	0x20000048

08007f0c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e025      	b.n	8007f70 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	79fa      	ldrb	r2, [r7, #7]
 8007f62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 fbdb 	bl	8009720 <USBD_LL_Init>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e010      	b.n	8007fb2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	f107 020e 	add.w	r2, r7, #14
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	4602      	mov	r2, r0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fbf8 	bl	80097b8 <USBD_LL_Start>
 8007fc8:	4603      	mov	r3, r0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6852      	ldr	r2, [r2, #4]
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fbef 	bl	80097ee <USBD_LL_Stop>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008040:	2303      	movs	r3, #3
 8008042:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	4611      	mov	r1, r2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
  }

  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 ff3e 	bl	8008f30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d00e      	beq.n	80080f6 <USBD_LL_SetupStage+0x5a>
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d302      	bcc.n	80080e2 <USBD_LL_SetupStage+0x46>
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d014      	beq.n	800810a <USBD_LL_SetupStage+0x6e>
 80080e0:	e01d      	b.n	800811e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa18 	bl	8008520 <USBD_StdDevReq>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e020      	b.n	8008138 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa7c 	bl	80085fc <USBD_StdItfReq>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e016      	b.n	8008138 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fab8 	bl	8008688 <USBD_StdEPReq>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
      break;
 800811c:	e00c      	b.n	8008138 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fb9f 	bl	8009870 <USBD_LL_StallEP>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]
      break;
 8008136:	bf00      	nop
  }

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	460b      	mov	r3, r1
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d137      	bne.n	80081c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800815c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008164:	2b03      	cmp	r3, #3
 8008166:	d14a      	bne.n	80081fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	429a      	cmp	r2, r3
 8008172:	d913      	bls.n	800819c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	1ad2      	subs	r2, r2, r3
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	4293      	cmp	r3, r2
 800818c:	bf28      	it	cs
 800818e:	4613      	movcs	r3, r2
 8008190:	461a      	mov	r2, r3
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 ffbf 	bl	8009118 <USBD_CtlContinueRx>
 800819a:	e030      	b.n	80081fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d105      	bne.n	80081be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 ffbb 	bl	800913a <USBD_CtlSendStatus>
 80081c4:	e01b      	b.n	80081fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d013      	beq.n	80081fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d10e      	bne.n	80081fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	7afa      	ldrb	r2, [r7, #11]
 80081e6:	4611      	mov	r1, r2
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	e002      	b.n	8008200 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e000      	b.n	8008200 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	460b      	mov	r3, r1
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d16a      	bne.n	80082f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3314      	adds	r3, #20
 8008220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008228:	2b02      	cmp	r3, #2
 800822a:	d155      	bne.n	80082d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	429a      	cmp	r2, r3
 8008236:	d914      	bls.n	8008262 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	1ad2      	subs	r2, r2, r3
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	461a      	mov	r2, r3
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 ff34 	bl	80090bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	2100      	movs	r1, #0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f001 fbb2 	bl	80099c4 <USBD_LL_PrepareReceive>
 8008260:	e03a      	b.n	80082d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d11c      	bne.n	80082a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008276:	429a      	cmp	r2, r3
 8008278:	d316      	bcc.n	80082a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008284:	429a      	cmp	r2, r3
 8008286:	d20f      	bcs.n	80082a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 ff15 	bl	80090bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829a:	2300      	movs	r3, #0
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 fb8f 	bl	80099c4 <USBD_LL_PrepareReceive>
 80082a6:	e017      	b.n	80082d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d105      	bne.n	80082ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ca:	2180      	movs	r1, #128	; 0x80
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 facf 	bl	8009870 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 ff44 	bl	8009160 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d123      	bne.n	800832a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fe9b 	bl	800801e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082f0:	e01b      	b.n	800832a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d013      	beq.n	8008326 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008304:	2b03      	cmp	r3, #3
 8008306:	d10e      	bne.n	8008326 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	7afa      	ldrb	r2, [r7, #11]
 8008312:	4611      	mov	r1, r2
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	4798      	blx	r3
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	e002      	b.n	800832c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	e000      	b.n	800832c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6852      	ldr	r2, [r2, #4]
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	4611      	mov	r1, r2
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008378:	2340      	movs	r3, #64	; 0x40
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fa50 	bl	8009824 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2240      	movs	r2, #64	; 0x40
 8008390:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	2200      	movs	r2, #0
 8008398:	2180      	movs	r1, #128	; 0x80
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fa42 	bl	8009824 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2240      	movs	r2, #64	; 0x40
 80083aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840e:	2b04      	cmp	r3, #4
 8008410:	d105      	bne.n	800841e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843a:	2b03      	cmp	r3, #3
 800843c:	d10b      	bne.n	8008456 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6852      	ldr	r2, [r2, #4]
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	4611      	mov	r1, r2
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	4798      	blx	r3
  }

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b087      	sub	sp, #28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3301      	adds	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008500:	8a3b      	ldrh	r3, [r7, #16]
 8008502:	021b      	lsls	r3, r3, #8
 8008504:	b21a      	sxth	r2, r3
 8008506:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800850a:	4313      	orrs	r3, r2
 800850c:	b21b      	sxth	r3, r3
 800850e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008510:	89fb      	ldrh	r3, [r7, #14]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008536:	2b20      	cmp	r3, #32
 8008538:	d004      	beq.n	8008544 <USBD_StdDevReq+0x24>
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d002      	beq.n	8008544 <USBD_StdDevReq+0x24>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <USBD_StdDevReq+0x38>
 8008542:	e050      	b.n	80085e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
    break;
 8008556:	e04b      	b.n	80085f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b09      	cmp	r3, #9
 800855e:	d83c      	bhi.n	80085da <USBD_StdDevReq+0xba>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <USBD_StdDevReq+0x48>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	080085bd 	.word	0x080085bd
 800856c:	080085d1 	.word	0x080085d1
 8008570:	080085db 	.word	0x080085db
 8008574:	080085c7 	.word	0x080085c7
 8008578:	080085db 	.word	0x080085db
 800857c:	0800859b 	.word	0x0800859b
 8008580:	08008591 	.word	0x08008591
 8008584:	080085db 	.word	0x080085db
 8008588:	080085b3 	.word	0x080085b3
 800858c:	080085a5 	.word	0x080085a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9ce 	bl	8008934 <USBD_GetDescriptor>
      break;
 8008598:	e024      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fb45 	bl	8008c2c <USBD_SetAddress>
      break;
 80085a2:	e01f      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fb82 	bl	8008cb0 <USBD_SetConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
      break;
 80085b0:	e018      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fc1f 	bl	8008df8 <USBD_GetConfig>
      break;
 80085ba:	e013      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc4e 	bl	8008e60 <USBD_GetStatus>
      break;
 80085c4:	e00e      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc7c 	bl	8008ec6 <USBD_SetFeature>
      break;
 80085ce:	e009      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fc8b 	bl	8008eee <USBD_ClrFeature>
      break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fce1 	bl	8008fa4 <USBD_CtlError>
      break;
 80085e2:	bf00      	nop
    }
    break;
 80085e4:	e004      	b.n	80085f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fcdb 	bl	8008fa4 <USBD_CtlError>
    break;
 80085ee:	bf00      	nop
  }

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop

080085fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008612:	2b20      	cmp	r3, #32
 8008614:	d003      	beq.n	800861e <USBD_StdItfReq+0x22>
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d001      	beq.n	800861e <USBD_StdItfReq+0x22>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12a      	bne.n	8008674 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	3b01      	subs	r3, #1
 8008626:	2b02      	cmp	r3, #2
 8008628:	d81d      	bhi.n	8008666 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	d813      	bhi.n	800865c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d110      	bne.n	8008670 <USBD_StdItfReq+0x74>
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10d      	bne.n	8008670 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fd70 	bl	800913a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800865a:	e009      	b.n	8008670 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fca0 	bl	8008fa4 <USBD_CtlError>
      break;
 8008664:	e004      	b.n	8008670 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc9b 	bl	8008fa4 <USBD_CtlError>
      break;
 800866e:	e000      	b.n	8008672 <USBD_StdItfReq+0x76>
      break;
 8008670:	bf00      	nop
    }
    break;
 8008672:	e004      	b.n	800867e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fc94 	bl	8008fa4 <USBD_CtlError>
    break;
 800867c:	bf00      	nop
  }

  return ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d004      	beq.n	80086b2 <USBD_StdEPReq+0x2a>
 80086a8:	2b40      	cmp	r3, #64	; 0x40
 80086aa:	d002      	beq.n	80086b2 <USBD_StdEPReq+0x2a>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <USBD_StdEPReq+0x3e>
 80086b0:	e135      	b.n	800891e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
    break;
 80086c4:	e130      	b.n	8008928 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d03e      	beq.n	800874c <USBD_StdEPReq+0xc4>
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d002      	beq.n	80086d8 <USBD_StdEPReq+0x50>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d077      	beq.n	80087c6 <USBD_StdEPReq+0x13e>
 80086d6:	e11c      	b.n	8008912 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d002      	beq.n	80086e8 <USBD_StdEPReq+0x60>
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d015      	beq.n	8008712 <USBD_StdEPReq+0x8a>
 80086e6:	e02b      	b.n	8008740 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <USBD_StdEPReq+0x80>
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b80      	cmp	r3, #128	; 0x80
 80086f2:	d009      	beq.n	8008708 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 f8b9 	bl	8009870 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086fe:	2180      	movs	r1, #128	; 0x80
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 f8b5 	bl	8009870 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008706:	e020      	b.n	800874a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc4a 	bl	8008fa4 <USBD_CtlError>
        break;
 8008710:	e01b      	b.n	800874a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	885b      	ldrh	r3, [r3, #2]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10e      	bne.n	8008738 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <USBD_StdEPReq+0xb0>
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d008      	beq.n	8008738 <USBD_StdEPReq+0xb0>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	88db      	ldrh	r3, [r3, #6]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 f89c 	bl	8009870 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fcfe 	bl	800913a <USBD_CtlSendStatus>

        break;
 800873e:	e004      	b.n	800874a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fc2e 	bl	8008fa4 <USBD_CtlError>
        break;
 8008748:	bf00      	nop
      }
      break;
 800874a:	e0e7      	b.n	800891c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	2b02      	cmp	r3, #2
 8008754:	d002      	beq.n	800875c <USBD_StdEPReq+0xd4>
 8008756:	2b03      	cmp	r3, #3
 8008758:	d015      	beq.n	8008786 <USBD_StdEPReq+0xfe>
 800875a:	e02d      	b.n	80087b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <USBD_StdEPReq+0xf4>
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d009      	beq.n	800877c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f87f 	bl	8009870 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f87b 	bl	8009870 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800877a:	e023      	b.n	80087c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fc10 	bl	8008fa4 <USBD_CtlError>
        break;
 8008784:	e01e      	b.n	80087c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d119      	bne.n	80087c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f886 	bl	80098ae <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fcc9 	bl	800913a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
        }
        break;
 80087b6:	e004      	b.n	80087c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fbf2 	bl	8008fa4 <USBD_CtlError>
        break;
 80087c0:	e000      	b.n	80087c4 <USBD_StdEPReq+0x13c>
        break;
 80087c2:	bf00      	nop
      }
      break;
 80087c4:	e0aa      	b.n	800891c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d002      	beq.n	80087d6 <USBD_StdEPReq+0x14e>
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d032      	beq.n	800883a <USBD_StdEPReq+0x1b2>
 80087d4:	e097      	b.n	8008906 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d007      	beq.n	80087ec <USBD_StdEPReq+0x164>
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	2b80      	cmp	r3, #128	; 0x80
 80087e0:	d004      	beq.n	80087ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fbdd 	bl	8008fa4 <USBD_CtlError>
          break;
 80087ea:	e091      	b.n	8008910 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da0b      	bge.n	800880c <USBD_StdEPReq+0x184>
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	3310      	adds	r3, #16
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	4413      	add	r3, r2
 8008808:	3304      	adds	r3, #4
 800880a:	e00b      	b.n	8008824 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	4413      	add	r3, r2
 8008822:	3304      	adds	r3, #4
 8008824:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2202      	movs	r2, #2
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fc27 	bl	8009086 <USBD_CtlSendData>
        break;
 8008838:	e06a      	b.n	8008910 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800883a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883e:	2b00      	cmp	r3, #0
 8008840:	da11      	bge.n	8008866 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3324      	adds	r3, #36	; 0x24
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d117      	bne.n	800888c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fba0 	bl	8008fa4 <USBD_CtlError>
            break;
 8008864:	e054      	b.n	8008910 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d104      	bne.n	800888c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb8d 	bl	8008fa4 <USBD_CtlError>
            break;
 800888a:	e041      	b.n	8008910 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800888c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	da0b      	bge.n	80088ac <USBD_StdEPReq+0x224>
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	3310      	adds	r3, #16
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4413      	add	r3, r2
 80088a8:	3304      	adds	r3, #4
 80088aa:	e00b      	b.n	80088c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	3304      	adds	r3, #4
 80088c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <USBD_StdEPReq+0x24a>
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b80      	cmp	r3, #128	; 0x80
 80088d0:	d103      	bne.n	80088da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e00e      	b.n	80088f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f804 	bl	80098ec <USBD_LL_IsStallEP>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	e002      	b.n	80088f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2202      	movs	r2, #2
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fbc1 	bl	8009086 <USBD_CtlSendData>
          break;
 8008904:	e004      	b.n	8008910 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fb4b 	bl	8008fa4 <USBD_CtlError>
        break;
 800890e:	bf00      	nop
      }
      break;
 8008910:	e004      	b.n	800891c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fb45 	bl	8008fa4 <USBD_CtlError>
      break;
 800891a:	bf00      	nop
    }
    break;
 800891c:	e004      	b.n	8008928 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fb3f 	bl	8008fa4 <USBD_CtlError>
    break;
 8008926:	bf00      	nop
  }

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	2b06      	cmp	r3, #6
 8008956:	f200 813b 	bhi.w	8008bd0 <USBD_GetDescriptor+0x29c>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBD_GetDescriptor+0x2c>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	0800897d 	.word	0x0800897d
 8008964:	08008995 	.word	0x08008995
 8008968:	080089d5 	.word	0x080089d5
 800896c:	08008bd1 	.word	0x08008bd1
 8008970:	08008bd1 	.word	0x08008bd1
 8008974:	08008b71 	.word	0x08008b71
 8008978:	08008b9d 	.word	0x08008b9d
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
    break;
 8008992:	e125      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7c1b      	ldrb	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10d      	bne.n	80089b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	f107 0208 	add.w	r2, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3301      	adds	r3, #1
 80089b2:	2202      	movs	r2, #2
 80089b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80089b6:	e113      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	f107 0208 	add.w	r2, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3301      	adds	r3, #1
 80089ce:	2202      	movs	r2, #2
 80089d0:	701a      	strb	r2, [r3, #0]
    break;
 80089d2:	e105      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	885b      	ldrh	r3, [r3, #2]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b05      	cmp	r3, #5
 80089dc:	f200 80ac 	bhi.w	8008b38 <USBD_GetDescriptor+0x204>
 80089e0:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <USBD_GetDescriptor+0xb4>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	08008a01 	.word	0x08008a01
 80089ec:	08008a35 	.word	0x08008a35
 80089f0:	08008a69 	.word	0x08008a69
 80089f4:	08008a9d 	.word	0x08008a9d
 80089f8:	08008ad1 	.word	0x08008ad1
 80089fc:	08008b05 	.word	0x08008b05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a22:	e0a4      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fabc 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	72fb      	strb	r3, [r7, #11]
      break;
 8008a32:	e09c      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a56:	e08a      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 faa2 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	3301      	adds	r3, #1
 8008a64:	72fb      	strb	r3, [r7, #11]
      break;
 8008a66:	e082      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	7c12      	ldrb	r2, [r2, #16]
 8008a80:	f107 0108 	add.w	r1, r7, #8
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
 8008a88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8a:	e070      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fa88 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	3301      	adds	r3, #1
 8008a98:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9a:	e068      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	7c12      	ldrb	r2, [r2, #16]
 8008ab4:	f107 0108 	add.w	r1, r7, #8
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4798      	blx	r3
 8008abc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008abe:	e056      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa6e 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008ac8:	7afb      	ldrb	r3, [r7, #11]
 8008aca:	3301      	adds	r3, #1
 8008acc:	72fb      	strb	r3, [r7, #11]
      break;
 8008ace:	e04e      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	7c12      	ldrb	r2, [r2, #16]
 8008ae8:	f107 0108 	add.w	r1, r7, #8
 8008aec:	4610      	mov	r0, r2
 8008aee:	4798      	blx	r3
 8008af0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af2:	e03c      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa54 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	3301      	adds	r3, #1
 8008b00:	72fb      	strb	r3, [r7, #11]
      break;
 8008b02:	e034      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7c12      	ldrb	r2, [r2, #16]
 8008b1c:	f107 0108 	add.w	r1, r7, #8
 8008b20:	4610      	mov	r0, r2
 8008b22:	4798      	blx	r3
 8008b24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b26:	e022      	b.n	8008b6e <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa3a 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008b30:	7afb      	ldrb	r3, [r7, #11]
 8008b32:	3301      	adds	r3, #1
 8008b34:	72fb      	strb	r3, [r7, #11]
      break;
 8008b36:	e01a      	b.n	8008b6e <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	8852      	ldrh	r2, [r2, #2]
 8008b50:	b2d1      	uxtb	r1, r2
 8008b52:	f107 0208 	add.w	r2, r7, #8
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
 8008b5a:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 8008b5c:	e006      	b.n	8008b6c <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa1f 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6c:	bf00      	nop
    }
    break;
 8008b6e:	e037      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7c1b      	ldrb	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b80:	f107 0208 	add.w	r2, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b8a:	e029      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa08 	bl	8008fa4 <USBD_CtlError>
      err++;
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	3301      	adds	r3, #1
 8008b98:	72fb      	strb	r3, [r7, #11]
    break;
 8008b9a:	e021      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10d      	bne.n	8008bc0 <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	f107 0208 	add.w	r2, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	2207      	movs	r2, #7
 8008bbc:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008bbe:	e00f      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9ee 	bl	8008fa4 <USBD_CtlError>
      err++;
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	72fb      	strb	r3, [r7, #11]
    break;
 8008bce:	e007      	b.n	8008be0 <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9e6 	bl	8008fa4 <USBD_CtlError>
    err++;
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	72fb      	strb	r3, [r7, #11]
    break;
 8008bde:	bf00      	nop
  }

  if (err != 0U)
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11e      	bne.n	8008c24 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 8008bee:	893b      	ldrh	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	88da      	ldrh	r2, [r3, #6]
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	bf28      	it	cs
 8008bfe:	4613      	movcs	r3, r2
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c04:	893b      	ldrh	r3, [r7, #8]
 8008c06:	461a      	mov	r2, r3
 8008c08:	68f9      	ldr	r1, [r7, #12]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa3b 	bl	8009086 <USBD_CtlSendData>
 8008c10:	e009      	b.n	8008c26 <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9c5 	bl	8008fa4 <USBD_CtlError>
 8008c1a:	e004      	b.n	8008c26 <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fa8c 	bl	800913a <USBD_CtlSendStatus>
 8008c22:	e000      	b.n	8008c26 <USBD_GetDescriptor+0x2f2>
    return;
 8008c24:	bf00      	nop
    }
  }
}
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	889b      	ldrh	r3, [r3, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d130      	bne.n	8008ca0 <USBD_SetAddress+0x74>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d12c      	bne.n	8008ca0 <USBD_SetAddress+0x74>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	885b      	ldrh	r3, [r3, #2]
 8008c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c4c:	d828      	bhi.n	8008ca0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	885b      	ldrh	r3, [r3, #2]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d104      	bne.n	8008c6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f99c 	bl	8008fa4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6c:	e01c      	b.n	8008ca8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7bfa      	ldrb	r2, [r7, #15]
 8008c72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fe62 	bl	8009944 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fa5a 	bl	800913a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	e008      	b.n	8008ca8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9e:	e003      	b.n	8008ca8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f97e 	bl	8008fa4 <USBD_CtlError>
  }
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	885b      	ldrh	r3, [r3, #2]
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	4b4b      	ldr	r3, [pc, #300]	; (8008df4 <USBD_SetConfig+0x144>)
 8008cc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cc8:	4b4a      	ldr	r3, [pc, #296]	; (8008df4 <USBD_SetConfig+0x144>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d905      	bls.n	8008cdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f966 	bl	8008fa4 <USBD_CtlError>
    return USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e087      	b.n	8008dec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d002      	beq.n	8008cec <USBD_SetConfig+0x3c>
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d025      	beq.n	8008d36 <USBD_SetConfig+0x86>
 8008cea:	e071      	b.n	8008dd0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008cec:	4b41      	ldr	r3, [pc, #260]	; (8008df4 <USBD_SetConfig+0x144>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01c      	beq.n	8008d2e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008cf4:	4b3f      	ldr	r3, [pc, #252]	; (8008df4 <USBD_SetConfig+0x144>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cfe:	4b3d      	ldr	r3, [pc, #244]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff f995 	bl	8008034 <USBD_SetClassConfig>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f944 	bl	8008fa4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d1c:	e065      	b.n	8008dea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa0b 	bl	800913a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2203      	movs	r2, #3
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d2c:	e05d      	b.n	8008dea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa03 	bl	800913a <USBD_CtlSendStatus>
    break;
 8008d34:	e059      	b.n	8008dea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d36:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d112      	bne.n	8008d64 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d46:	4b2b      	ldr	r3, [pc, #172]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff f988 	bl	800806c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f9ec 	bl	800913a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d62:	e042      	b.n	8008dea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d64:	4b23      	ldr	r3, [pc, #140]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d02a      	beq.n	8008dc8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff f976 	bl	800806c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d80:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <USBD_SetConfig+0x144>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff f94f 	bl	8008034 <USBD_SetClassConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00f      	beq.n	8008dc0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f8fe 	bl	8008fa4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff f95b 	bl	800806c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008dbe:	e014      	b.n	8008dea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9ba 	bl	800913a <USBD_CtlSendStatus>
    break;
 8008dc6:	e010      	b.n	8008dea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9b6 	bl	800913a <USBD_CtlSendStatus>
    break;
 8008dce:	e00c      	b.n	8008dea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8e6 	bl	8008fa4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dd8:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <USBD_SetConfig+0x144>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff f944 	bl	800806c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008de4:	2303      	movs	r3, #3
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	bf00      	nop
  }

  return ret;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	2000025f 	.word	0x2000025f

08008df8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d004      	beq.n	8008e14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8c9 	bl	8008fa4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008e12:	e021      	b.n	8008e58 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	db17      	blt.n	8008e4e <USBD_GetConfig+0x56>
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	dd02      	ble.n	8008e28 <USBD_GetConfig+0x30>
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d00b      	beq.n	8008e3e <USBD_GetConfig+0x46>
 8008e26:	e012      	b.n	8008e4e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3308      	adds	r3, #8
 8008e32:	2201      	movs	r2, #1
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f925 	bl	8009086 <USBD_CtlSendData>
      break;
 8008e3c:	e00c      	b.n	8008e58 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3304      	adds	r3, #4
 8008e42:	2201      	movs	r2, #1
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f91d 	bl	8009086 <USBD_CtlSendData>
      break;
 8008e4c:	e004      	b.n	8008e58 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8a7 	bl	8008fa4 <USBD_CtlError>
      break;
 8008e56:	bf00      	nop
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e70:	3b01      	subs	r3, #1
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d81e      	bhi.n	8008eb4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d004      	beq.n	8008e88 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f88f 	bl	8008fa4 <USBD_CtlError>
      break;
 8008e86:	e01a      	b.n	8008ebe <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f043 0202 	orr.w	r2, r3, #2
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	330c      	adds	r3, #12
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f8ea 	bl	8009086 <USBD_CtlSendData>
    break;
 8008eb2:	e004      	b.n	8008ebe <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f874 	bl	8008fa4 <USBD_CtlError>
    break;
 8008ebc:	bf00      	nop
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	885b      	ldrh	r3, [r3, #2]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d106      	bne.n	8008ee6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f92a 	bl	800913a <USBD_CtlSendStatus>
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efe:	3b01      	subs	r3, #1
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d80b      	bhi.n	8008f1c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	885b      	ldrh	r3, [r3, #2]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d10c      	bne.n	8008f26 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f910 	bl	800913a <USBD_CtlSendStatus>
      }
      break;
 8008f1a:	e004      	b.n	8008f26 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f840 	bl	8008fa4 <USBD_CtlError>
      break;
 8008f24:	e000      	b.n	8008f28 <USBD_ClrFeature+0x3a>
      break;
 8008f26:	bf00      	nop
  }
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fac1 	bl	80084e2 <SWAPBYTE>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fab4 	bl	80084e2 <SWAPBYTE>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff faa7 	bl	80084e2 <SWAPBYTE>
 8008f94:	4603      	mov	r3, r0
 8008f96:	461a      	mov	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	80da      	strh	r2, [r3, #6]
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fc5d 	bl	8009870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fc59 	bl	8009870 <USBD_LL_StallEP>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d036      	beq.n	800904a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fe0:	6938      	ldr	r0, [r7, #16]
 8008fe2:	f000 f836 	bl	8009052 <USBD_GetLen>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	3301      	adds	r3, #1
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	3301      	adds	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	2203      	movs	r2, #3
 800900e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	3301      	adds	r3, #1
 8009014:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009016:	e013      	b.n	8009040 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	3301      	adds	r3, #1
 8009028:	613b      	str	r3, [r7, #16]
    idx++;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	3301      	adds	r3, #1
 800902e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	4413      	add	r3, r2
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
    idx++;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	3301      	adds	r3, #1
 800903e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e7      	bne.n	8009018 <USBD_GetString+0x52>
 8009048:	e000      	b.n	800904c <USBD_GetString+0x86>
    return;
 800904a:	bf00      	nop
  }
}
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009062:	e005      	b.n	8009070 <USBD_GetLen+0x1e>
  {
    len++;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	3301      	adds	r3, #1
 8009068:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3301      	adds	r3, #1
 800906e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f5      	bne.n	8009064 <USBD_GetLen+0x12>
  }

  return len;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2202      	movs	r2, #2
 8009096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	2100      	movs	r1, #0
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fc68 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	2100      	movs	r1, #0
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fc57 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2203      	movs	r2, #3
 80090ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	2100      	movs	r1, #0
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fc5b 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fc4a 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2204      	movs	r2, #4
 8009146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800914a:	2300      	movs	r3, #0
 800914c:	2200      	movs	r2, #0
 800914e:	2100      	movs	r1, #0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fc16 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2205      	movs	r2, #5
 800916c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc24 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800918c:	2200      	movs	r2, #0
 800918e:	4912      	ldr	r1, [pc, #72]	; (80091d8 <MX_USB_DEVICE_Init+0x50>)
 8009190:	4812      	ldr	r0, [pc, #72]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 8009192:	f7fe febb 	bl	8007f0c <USBD_Init>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800919c:	f7f7 fde2 	bl	8000d64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80091a0:	490f      	ldr	r1, [pc, #60]	; (80091e0 <MX_USB_DEVICE_Init+0x58>)
 80091a2:	480e      	ldr	r0, [pc, #56]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091a4:	f7fe fee8 	bl	8007f78 <USBD_RegisterClass>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091ae:	f7f7 fdd9 	bl	8000d64 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80091b2:	490c      	ldr	r1, [pc, #48]	; (80091e4 <MX_USB_DEVICE_Init+0x5c>)
 80091b4:	4809      	ldr	r0, [pc, #36]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091b6:	f7fe fb43 	bl	8007840 <USBD_DFU_RegisterMedia>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091c0:	f7f7 fdd0 	bl	8000d64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091c4:	4805      	ldr	r0, [pc, #20]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091c6:	f7fe fef8 	bl	8007fba <USBD_Start>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091d0:	f7f7 fdc8 	bl	8000d64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091d4:	bf00      	nop
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000070 	.word	0x20000070
 80091dc:	200006f0 	.word	0x200006f0
 80091e0:	2000000c 	.word	0x2000000c
 80091e4:	200000c0 	.word	0x200000c0

080091e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2212      	movs	r2, #18
 80091f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091fa:	4b03      	ldr	r3, [pc, #12]	; (8009208 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	2000008c 	.word	0x2000008c

0800920c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2204      	movs	r2, #4
 800921c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800921e:	4b03      	ldr	r3, [pc, #12]	; (800922c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	200000a0 	.word	0x200000a0

08009230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4907      	ldr	r1, [pc, #28]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
 8009246:	4808      	ldr	r0, [pc, #32]	; (8009268 <USBD_FS_ProductStrDescriptor+0x38>)
 8009248:	f7ff febd 	bl	8008fc6 <USBD_GetString>
 800924c:	e004      	b.n	8009258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4904      	ldr	r1, [pc, #16]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
 8009252:	4805      	ldr	r0, [pc, #20]	; (8009268 <USBD_FS_ProductStrDescriptor+0x38>)
 8009254:	f7ff feb7 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200009c0 	.word	0x200009c0
 8009268:	08009c70 	.word	0x08009c70

0800926c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800927c:	4804      	ldr	r0, [pc, #16]	; (8009290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800927e:	f7ff fea2 	bl	8008fc6 <USBD_GetString>
  return USBD_StrDesc;
 8009282:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	200009c0 	.word	0x200009c0
 8009290:	08009c90 	.word	0x08009c90

08009294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	221a      	movs	r2, #26
 80092a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092a6:	f000 f843 	bl	8009330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092aa:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200000a4 	.word	0x200000a4

080092b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4907      	ldr	r1, [pc, #28]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ce:	4808      	ldr	r0, [pc, #32]	; (80092f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092d0:	f7ff fe79 	bl	8008fc6 <USBD_GetString>
 80092d4:	e004      	b.n	80092e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4904      	ldr	r1, [pc, #16]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80092da:	4805      	ldr	r0, [pc, #20]	; (80092f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092dc:	f7ff fe73 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200009c0 	.word	0x200009c0
 80092f0:	08009ca4 	.word	0x08009ca4

080092f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4907      	ldr	r1, [pc, #28]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800930a:	4808      	ldr	r0, [pc, #32]	; (800932c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800930c:	f7ff fe5b 	bl	8008fc6 <USBD_GetString>
 8009310:	e004      	b.n	800931c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4904      	ldr	r1, [pc, #16]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009316:	4805      	ldr	r0, [pc, #20]	; (800932c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009318:	f7ff fe55 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200009c0 	.word	0x200009c0
 800932c:	08009cb0 	.word	0x08009cb0

08009330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009336:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <Get_SerialNum+0x44>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <Get_SerialNum+0x48>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <Get_SerialNum+0x4c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009356:	2208      	movs	r2, #8
 8009358:	4909      	ldr	r1, [pc, #36]	; (8009380 <Get_SerialNum+0x50>)
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 f814 	bl	8009388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009360:	2204      	movs	r2, #4
 8009362:	4908      	ldr	r1, [pc, #32]	; (8009384 <Get_SerialNum+0x54>)
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 f80f 	bl	8009388 <IntToUnicode>
  }
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	1fff7a10 	.word	0x1fff7a10
 8009378:	1fff7a14 	.word	0x1fff7a14
 800937c:	1fff7a18 	.word	0x1fff7a18
 8009380:	200000a6 	.word	0x200000a6
 8009384:	200000b6 	.word	0x200000b6

08009388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
 800939e:	e027      	b.n	80093f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0f1b      	lsrs	r3, r3, #28
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	d80b      	bhi.n	80093c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	0f1b      	lsrs	r3, r3, #28
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	4619      	mov	r1, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	440b      	add	r3, r1
 80093b8:	3230      	adds	r2, #48	; 0x30
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	e00a      	b.n	80093d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0f1b      	lsrs	r3, r3, #28
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4619      	mov	r1, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	440b      	add	r3, r1
 80093d0:	3237      	adds	r2, #55	; 0x37
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	3301      	adds	r3, #1
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	4413      	add	r3, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	3301      	adds	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
 80093f0:	7dfa      	ldrb	r2, [r7, #23]
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d3d3      	bcc.n	80093a0 <IntToUnicode+0x18>
  }
}
 80093f8:	bf00      	nop
 80093fa:	371c      	adds	r7, #28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8009408:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8009418:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800941a:	4618      	mov	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800942c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8009446:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8009460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	460b      	mov	r3, r1
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d000      	beq.n	8009484 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8009482:	e000      	b.n	8009486 <MEM_If_GetStatus_FS+0x18>
    break;
 8009484:	bf00      	nop
  }
  return (USBD_OK);
 8009486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08a      	sub	sp, #40	; 0x28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800949c:	f107 0314 	add.w	r3, r7, #20
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	605a      	str	r2, [r3, #4]
 80094a6:	609a      	str	r2, [r3, #8]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b4:	d13a      	bne.n	800952c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	613b      	str	r3, [r7, #16]
 80094ba:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a1d      	ldr	r2, [pc, #116]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 80094c0:	f043 0301 	orr.w	r3, r3, #1
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b1b      	ldr	r3, [pc, #108]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d8:	2302      	movs	r3, #2
 80094da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e0:	2303      	movs	r3, #3
 80094e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094e4:	230a      	movs	r3, #10
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4619      	mov	r1, r3
 80094ee:	4812      	ldr	r0, [pc, #72]	; (8009538 <HAL_PCD_MspInit+0xa4>)
 80094f0:	f7f8 ffba 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	4a0e      	ldr	r2, [pc, #56]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 80094fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fe:	6353      	str	r3, [r2, #52]	; 0x34
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 8009506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009508:	4a0a      	ldr	r2, [pc, #40]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 800950a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800950e:	6453      	str	r3, [r2, #68]	; 0x44
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <HAL_PCD_MspInit+0xa0>)
 8009512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800951c:	2200      	movs	r2, #0
 800951e:	2100      	movs	r1, #0
 8009520:	2043      	movs	r0, #67	; 0x43
 8009522:	f7f8 fc66 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009526:	2043      	movs	r0, #67	; 0x43
 8009528:	f7f8 fc7f 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800952c:	bf00      	nop
 800952e:	3728      	adds	r7, #40	; 0x28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	40023800 	.word	0x40023800
 8009538:	40020000 	.word	0x40020000

0800953c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f7fe fda2 	bl	800809c <USBD_LL_SetupStage>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	1a9b      	subs	r3, r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	4619      	mov	r1, r3
 800958a:	f7fe fdda 	bl	8008142 <USBD_LL_DataOutStage>
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	3348      	adds	r3, #72	; 0x48
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	4619      	mov	r1, r3
 80095be:	f7fe fe23 	bl	8008208 <USBD_LL_DataInStage>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe ff27 	bl	800842c <USBD_LL_SOF>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095ee:	2301      	movs	r3, #1
 80095f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d102      	bne.n	8009600 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
 80095fe:	e008      	b.n	8009612 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d102      	bne.n	800960e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e001      	b.n	8009612 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800960e:	f7f7 fba9 	bl	8000d64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009618:	7bfa      	ldrb	r2, [r7, #15]
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe feca 	bl	80083b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe fe83 	bl	8008334 <USBD_LL_Reset>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fec5 	bl	80083d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	6812      	ldr	r2, [r2, #0]
 800965a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <HAL_PCD_SuspendCallback+0x48>)
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4a03      	ldr	r2, [pc, #12]	; (8009680 <HAL_PCD_SuspendCallback+0x48>)
 8009672:	f043 0306 	orr.w	r3, r3, #6
 8009676:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe feb4 	bl	8008400 <USBD_LL_Resume>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096b2:	78fa      	ldrb	r2, [r7, #3]
 80096b4:	4611      	mov	r1, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fedf 	bl	800847a <USBD_LL_IsoOUTIncomplete>
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096d6:	78fa      	ldrb	r2, [r7, #3]
 80096d8:	4611      	mov	r1, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fec0 	bl	8008460 <USBD_LL_IsoINIncomplete>
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fecc 	bl	8008494 <USBD_LL_DevConnected>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fec9 	bl	80084aa <USBD_LL_DevDisconnected>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d13c      	bne.n	80097aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009730:	4a20      	ldr	r2, [pc, #128]	; (80097b4 <USBD_LL_Init+0x94>)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a1e      	ldr	r2, [pc, #120]	; (80097b4 <USBD_LL_Init+0x94>)
 800973c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009740:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <USBD_LL_Init+0x94>)
 8009742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009746:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009748:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <USBD_LL_Init+0x94>)
 800974a:	2204      	movs	r2, #4
 800974c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800974e:	4b19      	ldr	r3, [pc, #100]	; (80097b4 <USBD_LL_Init+0x94>)
 8009750:	2202      	movs	r2, #2
 8009752:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009754:	4b17      	ldr	r3, [pc, #92]	; (80097b4 <USBD_LL_Init+0x94>)
 8009756:	2200      	movs	r2, #0
 8009758:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800975a:	4b16      	ldr	r3, [pc, #88]	; (80097b4 <USBD_LL_Init+0x94>)
 800975c:	2202      	movs	r2, #2
 800975e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009760:	4b14      	ldr	r3, [pc, #80]	; (80097b4 <USBD_LL_Init+0x94>)
 8009762:	2200      	movs	r2, #0
 8009764:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <USBD_LL_Init+0x94>)
 8009768:	2200      	movs	r2, #0
 800976a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800976c:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <USBD_LL_Init+0x94>)
 800976e:	2200      	movs	r2, #0
 8009770:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <USBD_LL_Init+0x94>)
 8009774:	2200      	movs	r2, #0
 8009776:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009778:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <USBD_LL_Init+0x94>)
 800977a:	2200      	movs	r2, #0
 800977c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800977e:	480d      	ldr	r0, [pc, #52]	; (80097b4 <USBD_LL_Init+0x94>)
 8009780:	f7f9 f95e 	bl	8002a40 <HAL_PCD_Init>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800978a:	f7f7 faeb 	bl	8000d64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800978e:	2180      	movs	r1, #128	; 0x80
 8009790:	4808      	ldr	r0, [pc, #32]	; (80097b4 <USBD_LL_Init+0x94>)
 8009792:	f7fa fa8a 	bl	8003caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009796:	2240      	movs	r2, #64	; 0x40
 8009798:	2100      	movs	r1, #0
 800979a:	4806      	ldr	r0, [pc, #24]	; (80097b4 <USBD_LL_Init+0x94>)
 800979c:	f7fa fa3e 	bl	8003c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	2101      	movs	r1, #1
 80097a4:	4803      	ldr	r0, [pc, #12]	; (80097b4 <USBD_LL_Init+0x94>)
 80097a6:	f7fa fa39 	bl	8003c1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000bc0 	.word	0x20000bc0

080097b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f9 fa53 	bl	8002c7a <HAL_PCD_Start>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f914 	bl	8009a08 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009804:	4618      	mov	r0, r3
 8009806:	f7f9 fa6b 	bl	8002ce0 <HAL_PCD_Stop>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f8f9 	bl	8009a08 <USBD_Get_USB_Status>
 8009816:	4603      	mov	r3, r0
 8009818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981a:	7bbb      	ldrb	r3, [r7, #14]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4608      	mov	r0, r1
 800982e:	4611      	mov	r1, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4603      	mov	r3, r0
 8009834:	70fb      	strb	r3, [r7, #3]
 8009836:	460b      	mov	r3, r1
 8009838:	70bb      	strb	r3, [r7, #2]
 800983a:	4613      	mov	r3, r2
 800983c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800984c:	78bb      	ldrb	r3, [r7, #2]
 800984e:	883a      	ldrh	r2, [r7, #0]
 8009850:	78f9      	ldrb	r1, [r7, #3]
 8009852:	f7f9 fe4c 	bl	80034ee <HAL_PCD_EP_Open>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f8d3 	bl	8009a08 <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009866:	7bbb      	ldrb	r3, [r7, #14]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f9 ff2a 	bl	80036e8 <HAL_PCD_EP_SetStall>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f8b4 	bl	8009a08 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f9 ff6f 	bl	80037b0 <HAL_PCD_EP_ClrStall>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f895 	bl	8009a08 <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da0b      	bge.n	8009920 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	333e      	adds	r3, #62	; 0x3e
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	e00b      	b.n	8009938 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	4613      	mov	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009936:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7f9 fd9e 	bl	80034a4 <HAL_PCD_SetAddress>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f84a 	bl	8009a08 <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009978:	7bbb      	ldrb	r3, [r7, #14]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	460b      	mov	r3, r1
 8009990:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099a0:	7af9      	ldrb	r1, [r7, #11]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f7f9 fe55 	bl	8003654 <HAL_PCD_EP_Transmit>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f829 	bl	8009a08 <USBD_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	460b      	mov	r3, r1
 80099d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099e2:	7af9      	ldrb	r1, [r7, #11]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f7f9 fde9 	bl	80035be <HAL_PCD_EP_Receive>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f808 	bl	8009a08 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d817      	bhi.n	8009a4c <USBD_Get_USB_Status+0x44>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <USBD_Get_USB_Status+0x1c>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a3b 	.word	0x08009a3b
 8009a2c:	08009a41 	.word	0x08009a41
 8009a30:	08009a47 	.word	0x08009a47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]
    break;
 8009a38:	e00b      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a3e:	e008      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a40:	2301      	movs	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
    break;
 8009a44:	e005      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a46:	2303      	movs	r3, #3
 8009a48:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4a:	e002      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a50:	bf00      	nop
  }
  return usb_status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <__errno>:
 8009a60:	4b01      	ldr	r3, [pc, #4]	; (8009a68 <__errno+0x8>)
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	200000dc 	.word	0x200000dc

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0d      	ldr	r6, [pc, #52]	; (8009aa4 <__libc_init_array+0x38>)
 8009a70:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a72:	1ba4      	subs	r4, r4, r6
 8009a74:	10a4      	asrs	r4, r4, #2
 8009a76:	2500      	movs	r5, #0
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	4e0b      	ldr	r6, [pc, #44]	; (8009aac <__libc_init_array+0x40>)
 8009a7e:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <__libc_init_array+0x44>)
 8009a80:	f000 f8ea 	bl	8009c58 <_init>
 8009a84:	1ba4      	subs	r4, r4, r6
 8009a86:	10a4      	asrs	r4, r4, #2
 8009a88:	2500      	movs	r5, #0
 8009a8a:	42a5      	cmp	r5, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a94:	4798      	blx	r3
 8009a96:	3501      	adds	r5, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	08009d48 	.word	0x08009d48
 8009aa8:	08009d48 	.word	0x08009d48
 8009aac:	08009d48 	.word	0x08009d48
 8009ab0:	08009d4c 	.word	0x08009d4c

08009ab4 <malloc>:
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <malloc+0xc>)
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f000 b861 	b.w	8009b80 <_malloc_r>
 8009abe:	bf00      	nop
 8009ac0:	200000dc 	.word	0x200000dc

08009ac4 <free>:
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <free+0xc>)
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	f000 b80b 	b.w	8009ae4 <_free_r>
 8009ace:	bf00      	nop
 8009ad0:	200000dc 	.word	0x200000dc

08009ad4 <memset>:
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <_free_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d045      	beq.n	8009b78 <_free_r+0x94>
 8009aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af0:	1f0c      	subs	r4, r1, #4
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bfb8      	it	lt
 8009af6:	18e4      	addlt	r4, r4, r3
 8009af8:	f000 f8ac 	bl	8009c54 <__malloc_lock>
 8009afc:	4a1f      	ldr	r2, [pc, #124]	; (8009b7c <_free_r+0x98>)
 8009afe:	6813      	ldr	r3, [r2, #0]
 8009b00:	4610      	mov	r0, r2
 8009b02:	b933      	cbnz	r3, 8009b12 <_free_r+0x2e>
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6014      	str	r4, [r2, #0]
 8009b08:	4628      	mov	r0, r5
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f000 b8a2 	b.w	8009c56 <__malloc_unlock>
 8009b12:	42a3      	cmp	r3, r4
 8009b14:	d90c      	bls.n	8009b30 <_free_r+0x4c>
 8009b16:	6821      	ldr	r1, [r4, #0]
 8009b18:	1862      	adds	r2, r4, r1
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	bf04      	itt	eq
 8009b1e:	681a      	ldreq	r2, [r3, #0]
 8009b20:	685b      	ldreq	r3, [r3, #4]
 8009b22:	6063      	str	r3, [r4, #4]
 8009b24:	bf04      	itt	eq
 8009b26:	1852      	addeq	r2, r2, r1
 8009b28:	6022      	streq	r2, [r4, #0]
 8009b2a:	6004      	str	r4, [r0, #0]
 8009b2c:	e7ec      	b.n	8009b08 <_free_r+0x24>
 8009b2e:	4613      	mov	r3, r2
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	b10a      	cbz	r2, 8009b38 <_free_r+0x54>
 8009b34:	42a2      	cmp	r2, r4
 8009b36:	d9fa      	bls.n	8009b2e <_free_r+0x4a>
 8009b38:	6819      	ldr	r1, [r3, #0]
 8009b3a:	1858      	adds	r0, r3, r1
 8009b3c:	42a0      	cmp	r0, r4
 8009b3e:	d10b      	bne.n	8009b58 <_free_r+0x74>
 8009b40:	6820      	ldr	r0, [r4, #0]
 8009b42:	4401      	add	r1, r0
 8009b44:	1858      	adds	r0, r3, r1
 8009b46:	4282      	cmp	r2, r0
 8009b48:	6019      	str	r1, [r3, #0]
 8009b4a:	d1dd      	bne.n	8009b08 <_free_r+0x24>
 8009b4c:	6810      	ldr	r0, [r2, #0]
 8009b4e:	6852      	ldr	r2, [r2, #4]
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	4401      	add	r1, r0
 8009b54:	6019      	str	r1, [r3, #0]
 8009b56:	e7d7      	b.n	8009b08 <_free_r+0x24>
 8009b58:	d902      	bls.n	8009b60 <_free_r+0x7c>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	e7d3      	b.n	8009b08 <_free_r+0x24>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	1821      	adds	r1, r4, r0
 8009b64:	428a      	cmp	r2, r1
 8009b66:	bf04      	itt	eq
 8009b68:	6811      	ldreq	r1, [r2, #0]
 8009b6a:	6852      	ldreq	r2, [r2, #4]
 8009b6c:	6062      	str	r2, [r4, #4]
 8009b6e:	bf04      	itt	eq
 8009b70:	1809      	addeq	r1, r1, r0
 8009b72:	6021      	streq	r1, [r4, #0]
 8009b74:	605c      	str	r4, [r3, #4]
 8009b76:	e7c7      	b.n	8009b08 <_free_r+0x24>
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000260 	.word	0x20000260

08009b80 <_malloc_r>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	1ccd      	adds	r5, r1, #3
 8009b84:	f025 0503 	bic.w	r5, r5, #3
 8009b88:	3508      	adds	r5, #8
 8009b8a:	2d0c      	cmp	r5, #12
 8009b8c:	bf38      	it	cc
 8009b8e:	250c      	movcc	r5, #12
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	4606      	mov	r6, r0
 8009b94:	db01      	blt.n	8009b9a <_malloc_r+0x1a>
 8009b96:	42a9      	cmp	r1, r5
 8009b98:	d903      	bls.n	8009ba2 <_malloc_r+0x22>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6033      	str	r3, [r6, #0]
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
 8009ba2:	f000 f857 	bl	8009c54 <__malloc_lock>
 8009ba6:	4a21      	ldr	r2, [pc, #132]	; (8009c2c <_malloc_r+0xac>)
 8009ba8:	6814      	ldr	r4, [r2, #0]
 8009baa:	4621      	mov	r1, r4
 8009bac:	b991      	cbnz	r1, 8009bd4 <_malloc_r+0x54>
 8009bae:	4c20      	ldr	r4, [pc, #128]	; (8009c30 <_malloc_r+0xb0>)
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	b91b      	cbnz	r3, 8009bbc <_malloc_r+0x3c>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f000 f83d 	bl	8009c34 <_sbrk_r>
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f838 	bl	8009c34 <_sbrk_r>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d124      	bne.n	8009c12 <_malloc_r+0x92>
 8009bc8:	230c      	movs	r3, #12
 8009bca:	6033      	str	r3, [r6, #0]
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f000 f842 	bl	8009c56 <__malloc_unlock>
 8009bd2:	e7e4      	b.n	8009b9e <_malloc_r+0x1e>
 8009bd4:	680b      	ldr	r3, [r1, #0]
 8009bd6:	1b5b      	subs	r3, r3, r5
 8009bd8:	d418      	bmi.n	8009c0c <_malloc_r+0x8c>
 8009bda:	2b0b      	cmp	r3, #11
 8009bdc:	d90f      	bls.n	8009bfe <_malloc_r+0x7e>
 8009bde:	600b      	str	r3, [r1, #0]
 8009be0:	50cd      	str	r5, [r1, r3]
 8009be2:	18cc      	adds	r4, r1, r3
 8009be4:	4630      	mov	r0, r6
 8009be6:	f000 f836 	bl	8009c56 <__malloc_unlock>
 8009bea:	f104 000b 	add.w	r0, r4, #11
 8009bee:	1d23      	adds	r3, r4, #4
 8009bf0:	f020 0007 	bic.w	r0, r0, #7
 8009bf4:	1ac3      	subs	r3, r0, r3
 8009bf6:	d0d3      	beq.n	8009ba0 <_malloc_r+0x20>
 8009bf8:	425a      	negs	r2, r3
 8009bfa:	50e2      	str	r2, [r4, r3]
 8009bfc:	e7d0      	b.n	8009ba0 <_malloc_r+0x20>
 8009bfe:	428c      	cmp	r4, r1
 8009c00:	684b      	ldr	r3, [r1, #4]
 8009c02:	bf16      	itet	ne
 8009c04:	6063      	strne	r3, [r4, #4]
 8009c06:	6013      	streq	r3, [r2, #0]
 8009c08:	460c      	movne	r4, r1
 8009c0a:	e7eb      	b.n	8009be4 <_malloc_r+0x64>
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	6849      	ldr	r1, [r1, #4]
 8009c10:	e7cc      	b.n	8009bac <_malloc_r+0x2c>
 8009c12:	1cc4      	adds	r4, r0, #3
 8009c14:	f024 0403 	bic.w	r4, r4, #3
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d005      	beq.n	8009c28 <_malloc_r+0xa8>
 8009c1c:	1a21      	subs	r1, r4, r0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f808 	bl	8009c34 <_sbrk_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d0cf      	beq.n	8009bc8 <_malloc_r+0x48>
 8009c28:	6025      	str	r5, [r4, #0]
 8009c2a:	e7db      	b.n	8009be4 <_malloc_r+0x64>
 8009c2c:	20000260 	.word	0x20000260
 8009c30:	20000264 	.word	0x20000264

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4c06      	ldr	r4, [pc, #24]	; (8009c50 <_sbrk_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	f7f7 fc90 	bl	8001564 <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	20000fc8 	.word	0x20000fc8

08009c54 <__malloc_lock>:
 8009c54:	4770      	bx	lr

08009c56 <__malloc_unlock>:
 8009c56:	4770      	bx	lr

08009c58 <_init>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr

08009c64 <_fini>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr
