
ARSG_MkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e404  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800e590  0800e590  0001e590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6c8  0800e6c8  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6c8  0800e6c8  0001e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6d0  0800e6d0  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e6d8  0800e6d8  0001e6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800e6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000148  0800e824  00020148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  0800e824  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024852  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004910  00000000  00000000  000449c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b88  00000000  00000000  000492d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b0  00000000  00000000  0004ae60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a41d  00000000  00000000  0004c810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019227  00000000  00000000  00056c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc400  00000000  00000000  0006fe54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aec  00000000  00000000  0014c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000148 	.word	0x20000148
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e574 	.word	0x0800e574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000014c 	.word	0x2000014c
 80001c4:	0800e574 	.word	0x0800e574

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <_ZN13AD9957_DriverC1Ev>:
// Variables
AD9957_CONF ad9957_config;
AD9957_DATA data;
AD9957_REG reg;

AD9957_Driver::AD9957_Driver() {
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <_ZN13AD9957_DriverC1Ev+0x24>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	error = 0x00;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	711a      	strb	r2, [r3, #4]
}
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	0800e648 	.word	0x0800e648

08000e18 <_ZN13AD9957_DriverD1Ev>:

AD9957_Driver::~AD9957_Driver() {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <_ZN13AD9957_DriverD1Ev+0x1c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	0800e648 	.word	0x0800e648

08000e38 <_ZN13AD9957_DriverD0Ev>:
AD9957_Driver::~AD9957_Driver() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
}
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ffe9 	bl	8000e18 <_ZN13AD9957_DriverD1Ev>
 8000e46:	2108      	movs	r1, #8
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f00c fa3d 	bl	800d2c8 <_ZdlPvj>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_ZN13AD9957_Driver5SetupEhlhhh>:

uint8_t AD9957_Driver::Setup(uint8_t startup, long refCLK, uint8_t ctrl_mode,
		uint8_t chip_mode, uint8_t int_RAM_mode) {
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	461a      	mov	r2, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	72fb      	strb	r3, [r7, #11]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	72bb      	strb	r3, [r7, #10]
	error = 0x00;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	711a      	strb	r2, [r3, #4]
	if (startup > 0) {
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <_ZN13AD9957_Driver5SetupEhlhhh+0x30>
		ad9957_config.REFCLK = refCLK;
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff faf7 	bl	800046c <__aeabi_i2d>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460c      	mov	r4, r1
 8000e82:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000e84:	e9c2 3400 	strd	r3, r4, [r2]
	}
	// Setting up the Chip-Configuration
	ad9957_config.CFR1_OP_MODE = chip_mode;
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000e8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8e:	72d3      	strb	r3, [r2, #11]
	ad9957_config.CFR1_SDIO_IN_ONLY = 1;
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	76da      	strb	r2, [r3, #27]
	if (chip_mode == 0xFF) {
 8000e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e9a:	2bff      	cmp	r3, #255	; 0xff
 8000e9c:	d10f      	bne.n	8000ebe <_ZN13AD9957_Driver5SetupEhlhhh+0x66>
		ad9957_config.CFR1_DIGI_PWRDN = 1;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	755a      	strb	r2, [r3, #21]
		ad9957_config.CFR1_DAC_PWRDN = 1;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	759a      	strb	r2, [r3, #22]
		ad9957_config.CFR1_REFCLK_IN_PWRDN = 1;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	75da      	strb	r2, [r3, #23]
		ad9957_config.CFR1_AUXDAC_PWRDN = 1;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	761a      	strb	r2, [r3, #24]
		ad9957_config.CFR1_EXT_PWRDN_MODE = 1;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	765a      	strb	r2, [r3, #25]
 8000ebc:	e00e      	b.n	8000edc <_ZN13AD9957_Driver5SetupEhlhhh+0x84>
	} else {
		ad9957_config.CFR1_DIGI_PWRDN = 0;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	755a      	strb	r2, [r3, #21]
		ad9957_config.CFR1_DAC_PWRDN = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	759a      	strb	r2, [r3, #22]
		ad9957_config.CFR1_REFCLK_IN_PWRDN = 0;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	75da      	strb	r2, [r3, #23]
		ad9957_config.CFR1_AUXDAC_PWRDN = 0;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
		ad9957_config.CFR1_EXT_PWRDN_MODE = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <_ZN13AD9957_Driver5SetupEhlhhh+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	765a      	strb	r2, [r3, #25]
	}
	ST_SetFrequency(5000000.0);
 8000edc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000f10 <_ZN13AD9957_Driver5SetupEhlhhh+0xb8>
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f843 	bl	8000f6c <_ZN13AD9957_Driver15ST_SetFrequencyEd>
	ST_SetAmplitude(1.0);
 8000ee6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000f18 <_ZN13AD9957_Driver5SetupEhlhhh+0xc0>
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f896 	bl	800101c <_ZN13AD9957_Driver15ST_SetAmplitudeEd>
	ST_SetPhase(0.0);
 8000ef0:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000f20 <_ZN13AD9957_Driver5SetupEhlhhh+0xc8>
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 f86b 	bl	8000fd0 <_ZN13AD9957_Driver11ST_SetPhaseEd>
	Generate_Registers(0xFF, PROFILE_0);
 8000efa:	2215      	movs	r2, #21
 8000efc:	21ff      	movs	r1, #255	; 0xff
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 f8ae 	bl	8001060 <_ZN13AD9957_Driver18Generate_RegistersEhh>
	return error;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	791b      	ldrb	r3, [r3, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	00000000 	.word	0x00000000
 8000f14:	415312d0 	.word	0x415312d0
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	3ff00000 	.word	0x3ff00000
	...
 8000f28:	20000168 	.word	0x20000168

08000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fa98 	bl	800046c <__aeabi_i2d>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460d      	mov	r5, r1
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f7ff fa93 	bl	800046c <__aeabi_i2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b11 	vmov	d1, r2, r3
 8000f4e:	ec45 4b10 	vmov	d0, r4, r5
 8000f52:	f00c f9bd 	bl	800d2d0 <pow>
 8000f56:	eeb0 7a40 	vmov.f32	s14, s0
 8000f5a:	eef0 7a60 	vmov.f32	s15, s1
    }
 8000f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f62:	eef0 0a67 	vmov.f32	s1, s15
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bdb0      	pop	{r4, r5, r7, pc}

08000f6c <_ZN13AD9957_Driver15ST_SetFrequencyEd>:
	// Setup a Frequency-Ramp that starts at a specified frequency and moves to the specified stop-frequency in the specified steps and at the specified Samplerate (Up to 125 MS/s)
	return error;
}

// Single Tone Mode-Functions
uint8_t AD9957_Driver::ST_SetFrequency(double frequency) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	ed87 0b00 	vstr	d0, [r7]
	ad9957_config.ST_FTW = (int) (pow(2,32) * (frequency/ad9957_config.REFCLK));
 8000f78:	2120      	movs	r1, #32
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff ffd6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f80:	ec56 5b10 	vmov	r5, r6, d0
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_ZN13AD9957_Driver15ST_SetFrequencyEd+0x5c>)
 8000f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f92:	f7ff fbff 	bl	8000794 <__aeabi_ddiv>
 8000f96:	4603      	mov	r3, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	f7ff facd 	bl	8000540 <__aeabi_dmul>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	f7ff fd77 	bl	8000aa0 <__aeabi_d2iz>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <_ZN13AD9957_Driver15ST_SetFrequencyEd+0x5c>)
 8000fb8:	671a      	str	r2, [r3, #112]	; 0x70
	return error;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000168 	.word	0x20000168
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <_ZN13AD9957_Driver11ST_SetPhaseEd>:

uint8_t AD9957_Driver::ST_SetPhase(double phase) {
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	ed87 0b00 	vstr	d0, [r7]
	// Calculate the Phase Offset Word: 360°/14bit breites Register = 0.022°/LSB
	ad9957_config.ST_POW = (int) (phase / 0.022);
 8000fdc:	a30d      	add	r3, pc, #52	; (adr r3, 8001014 <_ZN13AD9957_Driver11ST_SetPhaseEd+0x44>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe6:	f7ff fbd5 	bl	8000794 <__aeabi_ddiv>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fd55 	bl	8000aa0 <__aeabi_d2iz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <_ZN13AD9957_Driver11ST_SetPhaseEd+0x40>)
 8000ffc:	66da      	str	r2, [r3, #108]	; 0x6c
	return error;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	791b      	ldrb	r3, [r3, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	20000168 	.word	0x20000168
 8001014:	020c49ba 	.word	0x020c49ba
 8001018:	3f96872b 	.word	0x3f96872b

0800101c <_ZN13AD9957_Driver15ST_SetAmplitudeEd>:

uint8_t AD9957_Driver::ST_SetAmplitude(double amplitude) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	ed87 0b00 	vstr	d0, [r7]
	ad9957_config.AMP_ASF = (int) (pow(2,14) * amplitude);
 8001028:	210e      	movs	r1, #14
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff ff7e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001030:	ec51 0b10 	vmov	r0, r1, d0
 8001034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001038:	f7ff fa82 	bl	8000540 <__aeabi_dmul>
 800103c:	4603      	mov	r3, r0
 800103e:	460c      	mov	r4, r1
 8001040:	4618      	mov	r0, r3
 8001042:	4621      	mov	r1, r4
 8001044:	f7ff fd2c 	bl	8000aa0 <__aeabi_d2iz>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <_ZN13AD9957_Driver15ST_SetAmplitudeEd+0x40>)
 800104e:	661a      	str	r2, [r3, #96]	; 0x60
	return error;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	791b      	ldrb	r3, [r3, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	20000168 	.word	0x20000168

08001060 <_ZN13AD9957_Driver18Generate_RegistersEhh>:

uint8_t AD9957_Driver::RAM_Write(uint16_t address, uint32_t word) {
	return error;
}

uint8_t AD9957_Driver::Generate_Registers(uint8_t UpdateMode, uint8_t profile) {
 8001060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	70fb      	strb	r3, [r7, #3]
 800106e:	4613      	mov	r3, r2
 8001070:	70bb      	strb	r3, [r7, #2]
	switch (UpdateMode) {
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	2b01      	cmp	r3, #1
 8001076:	f000 868c 	beq.w	8001d92 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd32>
 800107a:	2b01      	cmp	r3, #1
 800107c:	dc02      	bgt.n	8001084 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x24>
 800107e:	2b00      	cmp	r3, #0
	case 0x01:
		// TODO: Update Only Registers for Single Tone-Mode
		break;
	case 0x00:
		// TODO: Update the Registers necessary for QDUC-Mode
		break;
 8001080:	f000 be8a 	b.w	8001d98 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd38>
	switch (UpdateMode) {
 8001084:	2b10      	cmp	r3, #16
 8001086:	f000 8686 	beq.w	8001d96 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd36>
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	f040 8684 	bne.w	8001d98 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd38>
		reg.REG_CFR1 = (int) ((ad9957_config.CFR1_LSB_FIRST * pow(2, 0)) + (ad9957_config.CFR1_SDIO_IN_ONLY * pow(2,1))+ (ad9957_config.CFR1_AUTO_PWRDN * pow(2,2)) + (ad9957_config.CFR1_EXT_PWRDN_MODE * pow(2,3)) + (ad9957_config.CFR1_AUXDAC_PWRDN * pow(2,4)) + (ad9957_config.CFR1_REFCLK_IN_PWRDN * pow(2,5)) + (ad9957_config.CFR1_DAC_PWRDN * pow(2,6)) + (ad9957_config.CFR1_DIGI_PWRDN * pow(2,7)) + (ad9957_config.CFR1_OSK_AUTO * pow(2,8)) + (ad9957_config.CFR1_OSK_ENABLE * pow(2,9)) + (ad9957_config.CFR1_LOAD_ARR_IOUP * pow(2,10)) + (ad9957_config.CFR1_CLR_PHASE_ACCU * pow(2,11)) + (ad9957_config.CFR1_AUTOCLR_PHASE_ACCU * pow(2, 13)) + (ad9957_config.CFR1_SDIO_IN_ONLY * pow(2, 16)) + (ad9957_config.CFR1_CLEAR_CCI * pow(2,21)) + (ad9957_config.CFR1_INV_SINC_FILT * pow(2,22)) + (ad9957_config.CFR1_MAN_OSK_CTRL * pow(2,23)) + (ad9957_config.CFR1_OP_MODE * pow(2,25)) + (ad9957_config.CFR1_RAM_PB_DEST * pow(2,28)) + (ad9957_config.CFR1_RAM_EN * pow(2, 31)));	// Calculate CFR1
 8001090:	4bec      	ldr	r3, [pc, #944]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001092:	7f1b      	ldrb	r3, [r3, #28]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9e9 	bl	800046c <__aeabi_i2d>
 800109a:	4604      	mov	r4, r0
 800109c:	460d      	mov	r5, r1
 800109e:	2100      	movs	r1, #0
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff ff43 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010a6:	ec53 2b10 	vmov	r2, r3, d0
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff fa47 	bl	8000540 <__aeabi_dmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	4625      	mov	r5, r4
 80010b8:	461c      	mov	r4, r3
 80010ba:	4be2      	ldr	r3, [pc, #904]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80010bc:	7edb      	ldrb	r3, [r3, #27]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9d4 	bl	800046c <__aeabi_i2d>
 80010c4:	4680      	mov	r8, r0
 80010c6:	4689      	mov	r9, r1
 80010c8:	2101      	movs	r1, #1
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff ff2e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010d0:	ec53 2b10 	vmov	r2, r3, d0
 80010d4:	4640      	mov	r0, r8
 80010d6:	4649      	mov	r1, r9
 80010d8:	f7ff fa32 	bl	8000540 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f876 	bl	80001d4 <__adddf3>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4625      	mov	r5, r4
 80010ee:	461c      	mov	r4, r3
 80010f0:	4bd4      	ldr	r3, [pc, #848]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80010f2:	7e9b      	ldrb	r3, [r3, #26]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9b9 	bl	800046c <__aeabi_i2d>
 80010fa:	4680      	mov	r8, r0
 80010fc:	4689      	mov	r9, r1
 80010fe:	2102      	movs	r1, #2
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff ff13 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001106:	ec53 2b10 	vmov	r2, r3, d0
 800110a:	4640      	mov	r0, r8
 800110c:	4649      	mov	r1, r9
 800110e:	f7ff fa17 	bl	8000540 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff f85b 	bl	80001d4 <__adddf3>
 800111e:	4603      	mov	r3, r0
 8001120:	460c      	mov	r4, r1
 8001122:	4625      	mov	r5, r4
 8001124:	461c      	mov	r4, r3
 8001126:	4bc7      	ldr	r3, [pc, #796]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001128:	7e5b      	ldrb	r3, [r3, #25]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f99e 	bl	800046c <__aeabi_i2d>
 8001130:	4680      	mov	r8, r0
 8001132:	4689      	mov	r9, r1
 8001134:	2103      	movs	r1, #3
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fef8 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4640      	mov	r0, r8
 8001142:	4649      	mov	r1, r9
 8001144:	f7ff f9fc 	bl	8000540 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f840 	bl	80001d4 <__adddf3>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4625      	mov	r5, r4
 800115a:	461c      	mov	r4, r3
 800115c:	4bb9      	ldr	r3, [pc, #740]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 800115e:	7e1b      	ldrb	r3, [r3, #24]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f983 	bl	800046c <__aeabi_i2d>
 8001166:	4680      	mov	r8, r0
 8001168:	4689      	mov	r9, r1
 800116a:	2104      	movs	r1, #4
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fedd 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001172:	ec53 2b10 	vmov	r2, r3, d0
 8001176:	4640      	mov	r0, r8
 8001178:	4649      	mov	r1, r9
 800117a:	f7ff f9e1 	bl	8000540 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7ff f825 	bl	80001d4 <__adddf3>
 800118a:	4603      	mov	r3, r0
 800118c:	460c      	mov	r4, r1
 800118e:	4625      	mov	r5, r4
 8001190:	461c      	mov	r4, r3
 8001192:	4bac      	ldr	r3, [pc, #688]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001194:	7ddb      	ldrb	r3, [r3, #23]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f968 	bl	800046c <__aeabi_i2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	2105      	movs	r1, #5
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff fec2 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4640      	mov	r0, r8
 80011ae:	4649      	mov	r1, r9
 80011b0:	f7ff f9c6 	bl	8000540 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7ff f80a 	bl	80001d4 <__adddf3>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	4625      	mov	r5, r4
 80011c6:	461c      	mov	r4, r3
 80011c8:	4b9e      	ldr	r3, [pc, #632]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80011ca:	7d9b      	ldrb	r3, [r3, #22]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f94d 	bl	800046c <__aeabi_i2d>
 80011d2:	4680      	mov	r8, r0
 80011d4:	4689      	mov	r9, r1
 80011d6:	2106      	movs	r1, #6
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fea7 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011de:	ec53 2b10 	vmov	r2, r3, d0
 80011e2:	4640      	mov	r0, r8
 80011e4:	4649      	mov	r1, r9
 80011e6:	f7ff f9ab 	bl	8000540 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7fe ffef 	bl	80001d4 <__adddf3>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4625      	mov	r5, r4
 80011fc:	461c      	mov	r4, r3
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001200:	7d5b      	ldrb	r3, [r3, #21]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f932 	bl	800046c <__aeabi_i2d>
 8001208:	4680      	mov	r8, r0
 800120a:	4689      	mov	r9, r1
 800120c:	2107      	movs	r1, #7
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fe8c 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001214:	ec53 2b10 	vmov	r2, r3, d0
 8001218:	4640      	mov	r0, r8
 800121a:	4649      	mov	r1, r9
 800121c:	f7ff f990 	bl	8000540 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7fe ffd4 	bl	80001d4 <__adddf3>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4625      	mov	r5, r4
 8001232:	461c      	mov	r4, r3
 8001234:	4b83      	ldr	r3, [pc, #524]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001236:	7d1b      	ldrb	r3, [r3, #20]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f917 	bl	800046c <__aeabi_i2d>
 800123e:	4680      	mov	r8, r0
 8001240:	4689      	mov	r9, r1
 8001242:	2108      	movs	r1, #8
 8001244:	2002      	movs	r0, #2
 8001246:	f7ff fe71 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800124a:	ec53 2b10 	vmov	r2, r3, d0
 800124e:	4640      	mov	r0, r8
 8001250:	4649      	mov	r1, r9
 8001252:	f7ff f975 	bl	8000540 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7fe ffb9 	bl	80001d4 <__adddf3>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	4625      	mov	r5, r4
 8001268:	461c      	mov	r4, r3
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 800126c:	7cdb      	ldrb	r3, [r3, #19]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8fc 	bl	800046c <__aeabi_i2d>
 8001274:	4680      	mov	r8, r0
 8001276:	4689      	mov	r9, r1
 8001278:	2109      	movs	r1, #9
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fe56 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001280:	ec53 2b10 	vmov	r2, r3, d0
 8001284:	4640      	mov	r0, r8
 8001286:	4649      	mov	r1, r9
 8001288:	f7ff f95a 	bl	8000540 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7fe ff9e 	bl	80001d4 <__adddf3>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4625      	mov	r5, r4
 800129e:	461c      	mov	r4, r3
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80012a2:	7c9b      	ldrb	r3, [r3, #18]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8e1 	bl	800046c <__aeabi_i2d>
 80012aa:	4680      	mov	r8, r0
 80012ac:	4689      	mov	r9, r1
 80012ae:	210a      	movs	r1, #10
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff fe3b 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012b6:	ec53 2b10 	vmov	r2, r3, d0
 80012ba:	4640      	mov	r0, r8
 80012bc:	4649      	mov	r1, r9
 80012be:	f7ff f93f 	bl	8000540 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7fe ff83 	bl	80001d4 <__adddf3>
 80012ce:	4603      	mov	r3, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	4625      	mov	r5, r4
 80012d4:	461c      	mov	r4, r3
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80012d8:	7c5b      	ldrb	r3, [r3, #17]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8c6 	bl	800046c <__aeabi_i2d>
 80012e0:	4680      	mov	r8, r0
 80012e2:	4689      	mov	r9, r1
 80012e4:	210b      	movs	r1, #11
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff fe20 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4640      	mov	r0, r8
 80012f2:	4649      	mov	r1, r9
 80012f4:	f7ff f924 	bl	8000540 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7fe ff68 	bl	80001d4 <__adddf3>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	4625      	mov	r5, r4
 800130a:	461c      	mov	r4, r3
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 800130e:	7c1b      	ldrb	r3, [r3, #16]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8ab 	bl	800046c <__aeabi_i2d>
 8001316:	4680      	mov	r8, r0
 8001318:	4689      	mov	r9, r1
 800131a:	210d      	movs	r1, #13
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fe05 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4640      	mov	r0, r8
 8001328:	4649      	mov	r1, r9
 800132a:	f7ff f909 	bl	8000540 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7fe ff4d 	bl	80001d4 <__adddf3>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	4625      	mov	r5, r4
 8001340:	461c      	mov	r4, r3
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 8001344:	7edb      	ldrb	r3, [r3, #27]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f890 	bl	800046c <__aeabi_i2d>
 800134c:	4680      	mov	r8, r0
 800134e:	4689      	mov	r9, r1
 8001350:	2110      	movs	r1, #16
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff fdea 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001358:	ec53 2b10 	vmov	r2, r3, d0
 800135c:	4640      	mov	r0, r8
 800135e:	4649      	mov	r1, r9
 8001360:	f7ff f8ee 	bl	8000540 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff32 	bl	80001d4 <__adddf3>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4625      	mov	r5, r4
 8001376:	461c      	mov	r4, r3
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 800137a:	7b9b      	ldrb	r3, [r3, #14]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f875 	bl	800046c <__aeabi_i2d>
 8001382:	4680      	mov	r8, r0
 8001384:	4689      	mov	r9, r1
 8001386:	2115      	movs	r1, #21
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fdcf 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800138e:	ec53 2b10 	vmov	r2, r3, d0
 8001392:	4640      	mov	r0, r8
 8001394:	4649      	mov	r1, r9
 8001396:	f7ff f8d3 	bl	8000540 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff17 	bl	80001d4 <__adddf3>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	4625      	mov	r5, r4
 80013ac:	461c      	mov	r4, r3
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80013b0:	7b5b      	ldrb	r3, [r3, #13]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f85a 	bl	800046c <__aeabi_i2d>
 80013b8:	4680      	mov	r8, r0
 80013ba:	4689      	mov	r9, r1
 80013bc:	2116      	movs	r1, #22
 80013be:	2002      	movs	r0, #2
 80013c0:	f7ff fdb4 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013c4:	ec53 2b10 	vmov	r2, r3, d0
 80013c8:	4640      	mov	r0, r8
 80013ca:	4649      	mov	r1, r9
 80013cc:	f7ff f8b8 	bl	8000540 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4620      	mov	r0, r4
 80013d6:	4629      	mov	r1, r5
 80013d8:	f7fe fefc 	bl	80001d4 <__adddf3>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4625      	mov	r5, r4
 80013e2:	461c      	mov	r4, r3
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 80013e6:	7b1b      	ldrb	r3, [r3, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f83f 	bl	800046c <__aeabi_i2d>
 80013ee:	4680      	mov	r8, r0
 80013f0:	4689      	mov	r9, r1
 80013f2:	2117      	movs	r1, #23
 80013f4:	2002      	movs	r0, #2
 80013f6:	f7ff fd99 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	4640      	mov	r0, r8
 8001400:	4649      	mov	r1, r9
 8001402:	f7ff f89d 	bl	8000540 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe fee1 	bl	80001d4 <__adddf3>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4625      	mov	r5, r4
 8001418:	461c      	mov	r4, r3
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e4>)
 800141c:	7adb      	ldrb	r3, [r3, #11]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f824 	bl	800046c <__aeabi_i2d>
 8001424:	4680      	mov	r8, r0
 8001426:	4689      	mov	r9, r1
 8001428:	2119      	movs	r1, #25
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff fd7e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001430:	ec53 2b10 	vmov	r2, r3, d0
 8001434:	4640      	mov	r0, r8
 8001436:	4649      	mov	r1, r9
 8001438:	f7ff f882 	bl	8000540 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	e002      	b.n	8001448 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x3e8>
 8001442:	bf00      	nop
 8001444:	20000168 	.word	0x20000168
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe fec2 	bl	80001d4 <__adddf3>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4625      	mov	r5, r4
 8001456:	461c      	mov	r4, r3
 8001458:	4bf1      	ldr	r3, [pc, #964]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800145a:	7a9b      	ldrb	r3, [r3, #10]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f805 	bl	800046c <__aeabi_i2d>
 8001462:	4680      	mov	r8, r0
 8001464:	4689      	mov	r9, r1
 8001466:	211c      	movs	r1, #28
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff fd5f 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800146e:	ec53 2b10 	vmov	r2, r3, d0
 8001472:	4640      	mov	r0, r8
 8001474:	4649      	mov	r1, r9
 8001476:	f7ff f863 	bl	8000540 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fea7 	bl	80001d4 <__adddf3>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	4625      	mov	r5, r4
 800148c:	461c      	mov	r4, r3
 800148e:	4be4      	ldr	r3, [pc, #912]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 8001490:	7a5b      	ldrb	r3, [r3, #9]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffea 	bl	800046c <__aeabi_i2d>
 8001498:	4680      	mov	r8, r0
 800149a:	4689      	mov	r9, r1
 800149c:	211f      	movs	r1, #31
 800149e:	2002      	movs	r0, #2
 80014a0:	f7ff fd44 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014a4:	ec53 2b10 	vmov	r2, r3, d0
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7ff f848 	bl	8000540 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fe8c 	bl	80001d4 <__adddf3>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4618      	mov	r0, r3
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff faec 	bl	8000aa0 <__aeabi_d2iz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4bd5      	ldr	r3, [pc, #852]	; (8001824 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c4>)
 80014ce:	601a      	str	r2, [r3, #0]
		reg.REG_CFR2 = (int) ((ad9957_config.CFR2_SYNC_TIMING_VAL_DISABLE * pow(2, 5)) + (ad9957_config.CFR2_DATA_ASSEMB_HOLD_LAST * pow(2, 6)) + (ad9957_config.CFR2_Q_FIRST_DATA_PROC * pow(2, 8)) + (ad9957_config.CFR2_TXENABLE_INVERT * pow(2,9)) + (ad9957_config.CFR2_PDCLK_INVERT * pow(2,10)) + (ad9957_config.CFR2_PDCLK_ENABLE * pow(2,11)) + (ad9957_config.CFR2_DATA_FORMAT * pow(2,12)) + (ad9957_config.CFR2_PDCLK_RATE * pow(2,13)) + (ad9957_config.CFR2_IOUP_RATE_DIV * pow(2,14)) + (ad9957_config.CFR2_READ_EFF_FTW * pow(2,16)) + (ad9957_config.CFR2_SYNC_CLK_EN * pow(2,22)) + (ad9957_config.CFR2_INT_IOUP_ACTIVE * pow(2,23)) + (ad9957_config.CFR2_EN_PROFILE_REG_ASF_SRC * pow(2,24)) + (ad9957_config.CFR2_BLACKFIN_EARLY_FRAME_SYNC * pow(2,29)) + (ad9957_config.CFR2_BLACKFIN_BIT_ORDER * pow(2,30)) + (ad9957_config.CFR2_BLACKFIN_ACTIVE * pow(2,31)));
 80014d0:	4bd3      	ldr	r3, [pc, #844]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80014d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffc8 	bl	800046c <__aeabi_i2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	2105      	movs	r1, #5
 80014e2:	2002      	movs	r0, #2
 80014e4:	f7ff fd22 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e8:	ec53 2b10 	vmov	r2, r3, d0
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff f826 	bl	8000540 <__aeabi_dmul>
 80014f4:	4603      	mov	r3, r0
 80014f6:	460c      	mov	r4, r1
 80014f8:	4625      	mov	r5, r4
 80014fa:	461c      	mov	r4, r3
 80014fc:	4bc8      	ldr	r3, [pc, #800]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80014fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffb2 	bl	800046c <__aeabi_i2d>
 8001508:	4680      	mov	r8, r0
 800150a:	4689      	mov	r9, r1
 800150c:	2106      	movs	r1, #6
 800150e:	2002      	movs	r0, #2
 8001510:	f7ff fd0c 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001514:	ec53 2b10 	vmov	r2, r3, d0
 8001518:	4640      	mov	r0, r8
 800151a:	4649      	mov	r1, r9
 800151c:	f7ff f810 	bl	8000540 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7fe fe54 	bl	80001d4 <__adddf3>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	4625      	mov	r5, r4
 8001532:	461c      	mov	r4, r3
 8001534:	4bba      	ldr	r3, [pc, #744]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 8001536:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff96 	bl	800046c <__aeabi_i2d>
 8001540:	4680      	mov	r8, r0
 8001542:	4689      	mov	r9, r1
 8001544:	2108      	movs	r1, #8
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fcf0 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800154c:	ec53 2b10 	vmov	r2, r3, d0
 8001550:	4640      	mov	r0, r8
 8001552:	4649      	mov	r1, r9
 8001554:	f7fe fff4 	bl	8000540 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7fe fe38 	bl	80001d4 <__adddf3>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	4625      	mov	r5, r4
 800156a:	461c      	mov	r4, r3
 800156c:	4bac      	ldr	r3, [pc, #688]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800156e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff7a 	bl	800046c <__aeabi_i2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
 800157c:	2109      	movs	r1, #9
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff fcd4 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001584:	ec53 2b10 	vmov	r2, r3, d0
 8001588:	4640      	mov	r0, r8
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe ffd8 	bl	8000540 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7fe fe1c 	bl	80001d4 <__adddf3>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4625      	mov	r5, r4
 80015a2:	461c      	mov	r4, r3
 80015a4:	4b9e      	ldr	r3, [pc, #632]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80015a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff5e 	bl	800046c <__aeabi_i2d>
 80015b0:	4680      	mov	r8, r0
 80015b2:	4689      	mov	r9, r1
 80015b4:	210a      	movs	r1, #10
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff fcb8 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015bc:	ec53 2b10 	vmov	r2, r3, d0
 80015c0:	4640      	mov	r0, r8
 80015c2:	4649      	mov	r1, r9
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fe00 	bl	80001d4 <__adddf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	4625      	mov	r5, r4
 80015da:	461c      	mov	r4, r3
 80015dc:	4b90      	ldr	r3, [pc, #576]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80015de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff42 	bl	800046c <__aeabi_i2d>
 80015e8:	4680      	mov	r8, r0
 80015ea:	4689      	mov	r9, r1
 80015ec:	210b      	movs	r1, #11
 80015ee:	2002      	movs	r0, #2
 80015f0:	f7ff fc9c 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015f4:	ec53 2b10 	vmov	r2, r3, d0
 80015f8:	4640      	mov	r0, r8
 80015fa:	4649      	mov	r1, r9
 80015fc:	f7fe ffa0 	bl	8000540 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fde4 	bl	80001d4 <__adddf3>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4625      	mov	r5, r4
 8001612:	461c      	mov	r4, r3
 8001614:	4b82      	ldr	r3, [pc, #520]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 8001616:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff26 	bl	800046c <__aeabi_i2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	210c      	movs	r1, #12
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fc80 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4640      	mov	r0, r8
 8001632:	4649      	mov	r1, r9
 8001634:	f7fe ff84 	bl	8000540 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe fdc8 	bl	80001d4 <__adddf3>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4625      	mov	r5, r4
 800164a:	461c      	mov	r4, r3
 800164c:	4b74      	ldr	r3, [pc, #464]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800164e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff0a 	bl	800046c <__aeabi_i2d>
 8001658:	4680      	mov	r8, r0
 800165a:	4689      	mov	r9, r1
 800165c:	210d      	movs	r1, #13
 800165e:	2002      	movs	r0, #2
 8001660:	f7ff fc64 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001664:	ec53 2b10 	vmov	r2, r3, d0
 8001668:	4640      	mov	r0, r8
 800166a:	4649      	mov	r1, r9
 800166c:	f7fe ff68 	bl	8000540 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fdac 	bl	80001d4 <__adddf3>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	4625      	mov	r5, r4
 8001682:	461c      	mov	r4, r3
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feee 	bl	800046c <__aeabi_i2d>
 8001690:	4680      	mov	r8, r0
 8001692:	4689      	mov	r9, r1
 8001694:	210e      	movs	r1, #14
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fc48 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800169c:	ec53 2b10 	vmov	r2, r3, d0
 80016a0:	4640      	mov	r0, r8
 80016a2:	4649      	mov	r1, r9
 80016a4:	f7fe ff4c 	bl	8000540 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7fe fd90 	bl	80001d4 <__adddf3>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	4625      	mov	r5, r4
 80016ba:	461c      	mov	r4, r3
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80016be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fed2 	bl	800046c <__aeabi_i2d>
 80016c8:	4680      	mov	r8, r0
 80016ca:	4689      	mov	r9, r1
 80016cc:	2110      	movs	r1, #16
 80016ce:	2002      	movs	r0, #2
 80016d0:	f7ff fc2c 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016d4:	ec53 2b10 	vmov	r2, r3, d0
 80016d8:	4640      	mov	r0, r8
 80016da:	4649      	mov	r1, r9
 80016dc:	f7fe ff30 	bl	8000540 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fd74 	bl	80001d4 <__adddf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	4625      	mov	r5, r4
 80016f2:	461c      	mov	r4, r3
 80016f4:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80016f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe feb6 	bl	800046c <__aeabi_i2d>
 8001700:	4680      	mov	r8, r0
 8001702:	4689      	mov	r9, r1
 8001704:	2116      	movs	r1, #22
 8001706:	2002      	movs	r0, #2
 8001708:	f7ff fc10 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800170c:	ec53 2b10 	vmov	r2, r3, d0
 8001710:	4640      	mov	r0, r8
 8001712:	4649      	mov	r1, r9
 8001714:	f7fe ff14 	bl	8000540 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe fd58 	bl	80001d4 <__adddf3>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4625      	mov	r5, r4
 800172a:	461c      	mov	r4, r3
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800172e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe9a 	bl	800046c <__aeabi_i2d>
 8001738:	4680      	mov	r8, r0
 800173a:	4689      	mov	r9, r1
 800173c:	2117      	movs	r1, #23
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff fbf4 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001744:	ec53 2b10 	vmov	r2, r3, d0
 8001748:	4640      	mov	r0, r8
 800174a:	4649      	mov	r1, r9
 800174c:	f7fe fef8 	bl	8000540 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fd3c 	bl	80001d4 <__adddf3>
 800175c:	4603      	mov	r3, r0
 800175e:	460c      	mov	r4, r1
 8001760:	4625      	mov	r5, r4
 8001762:	461c      	mov	r4, r3
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 8001766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe7e 	bl	800046c <__aeabi_i2d>
 8001770:	4680      	mov	r8, r0
 8001772:	4689      	mov	r9, r1
 8001774:	2118      	movs	r1, #24
 8001776:	2002      	movs	r0, #2
 8001778:	f7ff fbd8 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800177c:	ec53 2b10 	vmov	r2, r3, d0
 8001780:	4640      	mov	r0, r8
 8001782:	4649      	mov	r1, r9
 8001784:	f7fe fedc 	bl	8000540 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd20 	bl	80001d4 <__adddf3>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	4625      	mov	r5, r4
 800179a:	461c      	mov	r4, r3
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800179e:	7fdb      	ldrb	r3, [r3, #31]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe63 	bl	800046c <__aeabi_i2d>
 80017a6:	4680      	mov	r8, r0
 80017a8:	4689      	mov	r9, r1
 80017aa:	211d      	movs	r1, #29
 80017ac:	2002      	movs	r0, #2
 80017ae:	f7ff fbbd 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017b2:	ec53 2b10 	vmov	r2, r3, d0
 80017b6:	4640      	mov	r0, r8
 80017b8:	4649      	mov	r1, r9
 80017ba:	f7fe fec1 	bl	8000540 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd05 	bl	80001d4 <__adddf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	4625      	mov	r5, r4
 80017d0:	461c      	mov	r4, r3
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 80017d4:	7f9b      	ldrb	r3, [r3, #30]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe48 	bl	800046c <__aeabi_i2d>
 80017dc:	4680      	mov	r8, r0
 80017de:	4689      	mov	r9, r1
 80017e0:	211e      	movs	r1, #30
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff fba2 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4640      	mov	r0, r8
 80017ee:	4649      	mov	r1, r9
 80017f0:	f7fe fea6 	bl	8000540 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fcea 	bl	80001d4 <__adddf3>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	4625      	mov	r5, r4
 8001806:	461c      	mov	r4, r3
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c0>)
 800180a:	7f5b      	ldrb	r3, [r3, #29]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe2d 	bl	800046c <__aeabi_i2d>
 8001812:	4680      	mov	r8, r0
 8001814:	4689      	mov	r9, r1
 8001816:	211f      	movs	r1, #31
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff fb87 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800181e:	e003      	b.n	8001828 <_ZN13AD9957_Driver18Generate_RegistersEhh+0x7c8>
 8001820:	20000168 	.word	0x20000168
 8001824:	200001e8 	.word	0x200001e8
 8001828:	ec53 2b10 	vmov	r2, r3, d0
 800182c:	4640      	mov	r0, r8
 800182e:	4649      	mov	r1, r9
 8001830:	f7fe fe86 	bl	8000540 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fcca 	bl	80001d4 <__adddf3>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	f7ff f92a 	bl	8000aa0 <__aeabi_d2iz>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4be5      	ldr	r3, [pc, #916]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 8001852:	605a      	str	r2, [r3, #4]
		reg.REG_CFR3 = (int) ((ad9957_config.CFR3_N * pow(2,1)) + (ad9957_config.CFR3_PLL_ENABLE * pow(2,8)) + (ad9957_config.CFR3_REFCLK_DIV_RESET * pow(2,14)) + (ad9957_config.CFR3_REFCLK_DIV_BYPASS * pow(2,15)) + (ad9957_config.CFR3_ICP * pow(2,19)) + (ad9957_config.CFR3_VCO_SELECT * pow(2,24)) + (ad9957_config.CFR3_DRV0 * pow(2,28)));
 8001854:	4be5      	ldr	r3, [pc, #916]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001856:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe06 	bl	800046c <__aeabi_i2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	2101      	movs	r1, #1
 8001866:	2002      	movs	r0, #2
 8001868:	f7ff fb60 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800186c:	ec53 2b10 	vmov	r2, r3, d0
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fe64 	bl	8000540 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4625      	mov	r5, r4
 800187e:	461c      	mov	r4, r3
 8001880:	4bda      	ldr	r3, [pc, #872]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001882:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdf0 	bl	800046c <__aeabi_i2d>
 800188c:	4680      	mov	r8, r0
 800188e:	4689      	mov	r9, r1
 8001890:	2108      	movs	r1, #8
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff fb4a 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001898:	ec53 2b10 	vmov	r2, r3, d0
 800189c:	4640      	mov	r0, r8
 800189e:	4649      	mov	r1, r9
 80018a0:	f7fe fe4e 	bl	8000540 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fc92 	bl	80001d4 <__adddf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4625      	mov	r5, r4
 80018b6:	461c      	mov	r4, r3
 80018b8:	4bcc      	ldr	r3, [pc, #816]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80018ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fdd4 	bl	800046c <__aeabi_i2d>
 80018c4:	4680      	mov	r8, r0
 80018c6:	4689      	mov	r9, r1
 80018c8:	210e      	movs	r1, #14
 80018ca:	2002      	movs	r0, #2
 80018cc:	f7ff fb2e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80018d0:	ec53 2b10 	vmov	r2, r3, d0
 80018d4:	4640      	mov	r0, r8
 80018d6:	4649      	mov	r1, r9
 80018d8:	f7fe fe32 	bl	8000540 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fc76 	bl	80001d4 <__adddf3>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	4625      	mov	r5, r4
 80018ee:	461c      	mov	r4, r3
 80018f0:	4bbe      	ldr	r3, [pc, #760]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80018f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fdb8 	bl	800046c <__aeabi_i2d>
 80018fc:	4680      	mov	r8, r0
 80018fe:	4689      	mov	r9, r1
 8001900:	210f      	movs	r1, #15
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff fb12 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001908:	ec53 2b10 	vmov	r2, r3, d0
 800190c:	4640      	mov	r0, r8
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fe16 	bl	8000540 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7fe fc5a 	bl	80001d4 <__adddf3>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	4625      	mov	r5, r4
 8001926:	461c      	mov	r4, r3
 8001928:	4bb0      	ldr	r3, [pc, #704]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 800192a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fd9c 	bl	800046c <__aeabi_i2d>
 8001934:	4680      	mov	r8, r0
 8001936:	4689      	mov	r9, r1
 8001938:	2113      	movs	r1, #19
 800193a:	2002      	movs	r0, #2
 800193c:	f7ff faf6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001940:	ec53 2b10 	vmov	r2, r3, d0
 8001944:	4640      	mov	r0, r8
 8001946:	4649      	mov	r1, r9
 8001948:	f7fe fdfa 	bl	8000540 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fc3e 	bl	80001d4 <__adddf3>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4625      	mov	r5, r4
 800195e:	461c      	mov	r4, r3
 8001960:	4ba2      	ldr	r3, [pc, #648]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001962:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd80 	bl	800046c <__aeabi_i2d>
 800196c:	4680      	mov	r8, r0
 800196e:	4689      	mov	r9, r1
 8001970:	2118      	movs	r1, #24
 8001972:	2002      	movs	r0, #2
 8001974:	f7ff fada 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001978:	ec53 2b10 	vmov	r2, r3, d0
 800197c:	4640      	mov	r0, r8
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fdde 	bl	8000540 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc22 	bl	80001d4 <__adddf3>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4625      	mov	r5, r4
 8001996:	461c      	mov	r4, r3
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 800199a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd64 	bl	800046c <__aeabi_i2d>
 80019a4:	4680      	mov	r8, r0
 80019a6:	4689      	mov	r9, r1
 80019a8:	211c      	movs	r1, #28
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff fabe 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019b0:	ec53 2b10 	vmov	r2, r3, d0
 80019b4:	4640      	mov	r0, r8
 80019b6:	4649      	mov	r1, r9
 80019b8:	f7fe fdc2 	bl	8000540 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc06 	bl	80001d4 <__adddf3>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	4618      	mov	r0, r3
 80019ce:	4621      	mov	r1, r4
 80019d0:	f7ff f866 	bl	8000aa0 <__aeabi_d2iz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 80019da:	609a      	str	r2, [r3, #8]
		reg.REG_AUX_DAC = (int) ad9957_config.FSC;
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80019de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 80019e6:	60da      	str	r2, [r3, #12]
		reg.REG_IOUP_RATE = (int) ad9957_config.IOUPDATE_RATE;
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	4a7e      	ldr	r2, [pc, #504]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 80019ee:	6113      	str	r3, [r2, #16]
		reg.REG_RAMSEG0_1 = (int) ad9957_config.RAM_ADDRESS_STEP_RATE_0;
 80019f0:	4b7e      	ldr	r3, [pc, #504]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 80019f8:	829a      	strh	r2, [r3, #20]
		reg.REG_RAMSEG0_0 = (int) ((ad9957_config.RAM_PB_MODE_0 * pow(2,0)) + (ad9957_config.RAM_START_ADDR_0 * pow(2,6)) + (ad9957_config.RAM_END_ADDR_0 * pow(2,22)));
 80019fa:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd24 	bl	800044c <__aeabi_ui2d>
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7ff fa8e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fd92 	bl	8000540 <__aeabi_dmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4625      	mov	r5, r4
 8001a22:	461c      	mov	r4, r3
 8001a24:	4b71      	ldr	r3, [pc, #452]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd0f 	bl	800044c <__aeabi_ui2d>
 8001a2e:	4680      	mov	r8, r0
 8001a30:	4689      	mov	r9, r1
 8001a32:	2106      	movs	r1, #6
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7ff fa79 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	f7fe fd7d 	bl	8000540 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fbc1 	bl	80001d4 <__adddf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	4625      	mov	r5, r4
 8001a58:	461c      	mov	r4, r3
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcf4 	bl	800044c <__aeabi_ui2d>
 8001a64:	4680      	mov	r8, r0
 8001a66:	4689      	mov	r9, r1
 8001a68:	2116      	movs	r1, #22
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff fa5e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a70:	ec53 2b10 	vmov	r2, r3, d0
 8001a74:	4640      	mov	r0, r8
 8001a76:	4649      	mov	r1, r9
 8001a78:	f7fe fd62 	bl	8000540 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4620      	mov	r0, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe fba6 	bl	80001d4 <__adddf3>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f7ff f806 	bl	8000aa0 <__aeabi_d2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 8001a9a:	619a      	str	r2, [r3, #24]
		reg.REG_RAMSEG1_1 = (int) ad9957_config.RAM_ADDRESS_STEP_RATE_1;
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 8001aa4:	839a      	strh	r2, [r3, #28]
		reg.REG_RAMSEG1_0 = (int) ((ad9957_config.RAM_PB_MODE_1 * pow(2,0)) + (ad9957_config.RAM_START_ADDR_1 * pow(2,6)) + (ad9957_config.RAM_END_ADDR_1 * pow(2,22)));
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcce 	bl	800044c <__aeabi_ui2d>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7ff fa38 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fd3c 	bl	8000540 <__aeabi_dmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	4625      	mov	r5, r4
 8001ace:	461c      	mov	r4, r3
 8001ad0:	4b46      	ldr	r3, [pc, #280]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fcb9 	bl	800044c <__aeabi_ui2d>
 8001ada:	4680      	mov	r8, r0
 8001adc:	4689      	mov	r9, r1
 8001ade:	2106      	movs	r1, #6
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f7ff fa23 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ae6:	ec53 2b10 	vmov	r2, r3, d0
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f7fe fd27 	bl	8000540 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fb6b 	bl	80001d4 <__adddf3>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	4625      	mov	r5, r4
 8001b04:	461c      	mov	r4, r3
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fc9e 	bl	800044c <__aeabi_ui2d>
 8001b10:	4680      	mov	r8, r0
 8001b12:	4689      	mov	r9, r1
 8001b14:	2116      	movs	r1, #22
 8001b16:	2002      	movs	r0, #2
 8001b18:	f7ff fa08 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b1c:	ec53 2b10 	vmov	r2, r3, d0
 8001b20:	4640      	mov	r0, r8
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fd0c 	bl	8000540 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fb50 	bl	80001d4 <__adddf3>
 8001b34:	4603      	mov	r3, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	4618      	mov	r0, r3
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	f7fe ffb0 	bl	8000aa0 <__aeabi_d2iz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb88>)
 8001b46:	621a      	str	r2, [r3, #32]
		reg.REG_AMP = (int) ((ad9957_config.AMP_STEP_SIZE * pow(2,0)) + (ad9957_config.AMP_ASF * pow(2,2)) + (ad9957_config.AMP_RAMP_RATE * pow(2,16)));
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001b4a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc8c 	bl	800046c <__aeabi_i2d>
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7ff f9e6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b60:	ec53 2b10 	vmov	r2, r3, d0
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fcea 	bl	8000540 <__aeabi_dmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	4625      	mov	r5, r4
 8001b72:	461c      	mov	r4, r3
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc67 	bl	800044c <__aeabi_ui2d>
 8001b7e:	4680      	mov	r8, r0
 8001b80:	4689      	mov	r9, r1
 8001b82:	2102      	movs	r1, #2
 8001b84:	2002      	movs	r0, #2
 8001b86:	f7ff f9d1 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b8a:	ec53 2b10 	vmov	r2, r3, d0
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4649      	mov	r1, r9
 8001b92:	f7fe fcd5 	bl	8000540 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fb19 	bl	80001d4 <__adddf3>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	4625      	mov	r5, r4
 8001ba8:	461c      	mov	r4, r3
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb8c>)
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc4c 	bl	800044c <__aeabi_ui2d>
 8001bb4:	4680      	mov	r8, r0
 8001bb6:	4689      	mov	r9, r1
 8001bb8:	2110      	movs	r1, #16
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7ff f9b6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	f7fe fcba 	bl	8000540 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fafe 	bl	80001d4 <__adddf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4621      	mov	r1, r4
 8001be0:	f7fe ff5e 	bl	8000aa0 <__aeabi_d2iz>
 8001be4:	4603      	mov	r3, r0
 8001be6:	e003      	b.n	8001bf0 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xb90>
 8001be8:	200001e8 	.word	0x200001e8
 8001bec:	20000168 	.word	0x20000168
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
		reg.REG_ST1 = (int) ((ad9957_config.ST_POW * pow(2,0)) + (ad9957_config.ST_ASF * pow(2,16)));
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc26 	bl	800044c <__aeabi_ui2d>
 8001c00:	4604      	mov	r4, r0
 8001c02:	460d      	mov	r5, r1
 8001c04:	2100      	movs	r1, #0
 8001c06:	2002      	movs	r0, #2
 8001c08:	f7ff f990 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c0c:	ec53 2b10 	vmov	r2, r3, d0
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fc94 	bl	8000540 <__aeabi_dmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4625      	mov	r5, r4
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4b62      	ldr	r3, [pc, #392]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc11 	bl	800044c <__aeabi_ui2d>
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4689      	mov	r9, r1
 8001c2e:	2110      	movs	r1, #16
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff f97b 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c36:	ec53 2b10 	vmov	r2, r3, d0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	f7fe fc7f 	bl	8000540 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fac3 	bl	80001d4 <__adddf3>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	4618      	mov	r0, r3
 8001c54:	4621      	mov	r1, r4
 8001c56:	f7fe ff23 	bl	8000aa0 <__aeabi_d2iz>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
		reg.REG_ST0 = (int) ad9957_config.ST_FTW;
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
		reg.REG_QDUC1 = (int) ((ad9957_config.QDUC_POW * pow(2,0)) + (ad9957_config.QDUC_OSK * pow(2,16)) + (ad9957_config.QDUC_CCI_INVERSE_BYPASS * pow(2,24)) + (ad9957_config.QDUC_SPECTRAL_INVERT * pow(2,25)) + (ad9957_config.QDUC_CCI_INTERPOLATION_RATE * 2,26));
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fbec 	bl	800044c <__aeabi_ui2d>
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f7ff f956 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c80:	ec53 2b10 	vmov	r2, r3, d0
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fc5a 	bl	8000540 <__aeabi_dmul>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	4625      	mov	r5, r4
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b45      	ldr	r3, [pc, #276]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001c96:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbe6 	bl	800046c <__aeabi_i2d>
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	4689      	mov	r9, r1
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f7ff f940 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cac:	ec53 2b10 	vmov	r2, r3, d0
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe fc44 	bl	8000540 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fa88 	bl	80001d4 <__adddf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4625      	mov	r5, r4
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001cce:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fbca 	bl	800046c <__aeabi_i2d>
 8001cd8:	4680      	mov	r8, r0
 8001cda:	4689      	mov	r9, r1
 8001cdc:	2118      	movs	r1, #24
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f7ff f924 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ce4:	ec53 2b10 	vmov	r2, r3, d0
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe fc28 	bl	8000540 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fa6c 	bl	80001d4 <__adddf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4625      	mov	r5, r4
 8001d02:	461c      	mov	r4, r3
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001d06:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbae 	bl	800046c <__aeabi_i2d>
 8001d10:	4680      	mov	r8, r0
 8001d12:	4689      	mov	r9, r1
 8001d14:	2119      	movs	r1, #25
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7ff f908 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d1c:	ec53 2b10 	vmov	r2, r3, d0
 8001d20:	4640      	mov	r0, r8
 8001d22:	4649      	mov	r1, r9
 8001d24:	f7fe fc0c 	bl	8000540 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe fa50 	bl	80001d4 <__adddf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd50>)
 8001d42:	f7fe fa47 	bl	80001d4 <__adddf3>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f7fe fea7 	bl	8000aa0 <__aeabi_d2iz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
		reg.REG_QDUC0 = (int) ad9957_config.QDUC_FTW;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd4c>)
 8001d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001d60:	6393      	str	r3, [r2, #56]	; 0x38
		reg.REG_RAM = (int) 0;	// TODO: Generate the content of the RAM-Register
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd48>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
		WriteRegister(CFR1);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f822 	bl	8001db4 <_ZN13AD9957_Driver13WriteRegisterEh>
		WriteRegister(CFR2);
 8001d70:	2101      	movs	r1, #1
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f81e 	bl	8001db4 <_ZN13AD9957_Driver13WriteRegisterEh>
		WriteRegister(CFR3);
 8001d78:	2102      	movs	r1, #2
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f81a 	bl	8001db4 <_ZN13AD9957_Driver13WriteRegisterEh>
		WriteRegister(AMP);
 8001d80:	2109      	movs	r1, #9
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f816 	bl	8001db4 <_ZN13AD9957_Driver13WriteRegisterEh>
		WriteRegister(PROFILE_0);
 8001d88:	2115      	movs	r1, #21
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f812 	bl	8001db4 <_ZN13AD9957_Driver13WriteRegisterEh>
		break;
 8001d90:	e002      	b.n	8001d98 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd38>
		break;
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <_ZN13AD9957_Driver18Generate_RegistersEhh+0xd38>
	case 0x10:
		// TODO: Update the Registers necessary for Interpolating DAC-Mode
		break;
 8001d96:	bf00      	nop
		// TODO: Add more Cases to speed up the Register-Calculation Process by leaving out even more registers (e.g. Only Update Frequency Tuning Word)
	}
	return error;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001da6:	bf00      	nop
 8001da8:	200001e8 	.word	0x200001e8
 8001dac:	20000168 	.word	0x20000168
 8001db0:	403a0000 	.word	0x403a0000

08001db4 <_ZN13AD9957_Driver13WriteRegisterEh>:
uint8_t AD9957_Driver::WriteRegister(uint8_t regAddr) { // Subroutine that Writes a Register-Set
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
	// TODO: Assemble the Register-Values into 32bit Datawords
	uint8_t result;	// Success? Yes / NO
	uint8_t reglength;
	uint32_t *datawordH;
	uint32_t *datawordL;
	switch (regAddr) {
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b15      	cmp	r3, #21
 8001dc4:	f200 80f8 	bhi.w	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <_ZN13AD9957_Driver13WriteRegisterEh+0x1c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001f89 	.word	0x08001f89
 8001dd4:	08001f95 	.word	0x08001f95
 8001dd8:	08001fa1 	.word	0x08001fa1
 8001ddc:	08001fb9 	.word	0x08001fb9
 8001de0:	08001fb9 	.word	0x08001fb9
 8001de4:	08001f79 	.word	0x08001f79
 8001de8:	08001f81 	.word	0x08001f81
 8001dec:	08001fb9 	.word	0x08001fb9
 8001df0:	08001fb9 	.word	0x08001fb9
 8001df4:	08001fad 	.word	0x08001fad
 8001df8:	08001fb9 	.word	0x08001fb9
 8001dfc:	08001fb9 	.word	0x08001fb9
 8001e00:	08001fb9 	.word	0x08001fb9
 8001e04:	08001fb9 	.word	0x08001fb9
 8001e08:	08001e29 	.word	0x08001e29
 8001e0c:	08001e53 	.word	0x08001e53
 8001e10:	08001e7d 	.word	0x08001e7d
 8001e14:	08001ea7 	.word	0x08001ea7
 8001e18:	08001ed1 	.word	0x08001ed1
 8001e1c:	08001efb 	.word	0x08001efb
 8001e20:	08001f25 	.word	0x08001f25
 8001e24:	08001f4f 	.word	0x08001f4f
	case PROFILE_7:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001e28:	2309      	movs	r3, #9
 8001e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001e2e:	4b9a      	ldr	r3, [pc, #616]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001e30:	7adb      	ldrb	r3, [r3, #11]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <_ZN13AD9957_Driver13WriteRegisterEh+0x88>
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d005      	beq.n	8001e46 <_ZN13AD9957_Driver13WriteRegisterEh+0x92>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001e3a:	e0bd      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001e3c:	4b97      	ldr	r3, [pc, #604]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001e44:	e004      	b.n	8001e50 <_ZN13AD9957_Driver13WriteRegisterEh+0x9c>
			datawordH = &reg.REG_ST1;
 8001e46:	4b97      	ldr	r3, [pc, #604]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001e4a:	4b97      	ldr	r3, [pc, #604]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001e4e:	bf00      	nop
		break;
 8001e50:	e0b2      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_6:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001e52:	2309      	movs	r3, #9
 8001e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001e5a:	7adb      	ldrb	r3, [r3, #11]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <_ZN13AD9957_Driver13WriteRegisterEh+0xb2>
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d005      	beq.n	8001e70 <_ZN13AD9957_Driver13WriteRegisterEh+0xbc>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001e64:	e0a8      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001e66:	4b8d      	ldr	r3, [pc, #564]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001e6e:	e004      	b.n	8001e7a <_ZN13AD9957_Driver13WriteRegisterEh+0xc6>
			datawordH = &reg.REG_ST1;
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001e78:	bf00      	nop
		break;
 8001e7a:	e09d      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_5:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001e7c:	2309      	movs	r3, #9
 8001e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001e84:	7adb      	ldrb	r3, [r3, #11]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <_ZN13AD9957_Driver13WriteRegisterEh+0xdc>
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <_ZN13AD9957_Driver13WriteRegisterEh+0xe6>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001e8e:	e093      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001e90:	4b82      	ldr	r3, [pc, #520]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001e94:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001e98:	e004      	b.n	8001ea4 <_ZN13AD9957_Driver13WriteRegisterEh+0xf0>
			datawordH = &reg.REG_ST1;
 8001e9a:	4b82      	ldr	r3, [pc, #520]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001ea2:	bf00      	nop
		break;
 8001ea4:	e088      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_4:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001eac:	4b7a      	ldr	r3, [pc, #488]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001eae:	7adb      	ldrb	r3, [r3, #11]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <_ZN13AD9957_Driver13WriteRegisterEh+0x106>
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <_ZN13AD9957_Driver13WriteRegisterEh+0x110>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001eb8:	e07e      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001eba:	4b78      	ldr	r3, [pc, #480]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001ec2:	e004      	b.n	8001ece <_ZN13AD9957_Driver13WriteRegisterEh+0x11a>
			datawordH = &reg.REG_ST1;
 8001ec4:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001ec8:	4b77      	ldr	r3, [pc, #476]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001ecc:	bf00      	nop
		break;
 8001ece:	e073      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_3:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001ed0:	2309      	movs	r3, #9
 8001ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001ed6:	4b70      	ldr	r3, [pc, #448]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001ed8:	7adb      	ldrb	r3, [r3, #11]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <_ZN13AD9957_Driver13WriteRegisterEh+0x130>
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <_ZN13AD9957_Driver13WriteRegisterEh+0x13a>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001ee2:	e069      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001eec:	e004      	b.n	8001ef8 <_ZN13AD9957_Driver13WriteRegisterEh+0x144>
			datawordH = &reg.REG_ST1;
 8001eee:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001ef6:	bf00      	nop
		break;
 8001ef8:	e05e      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_2:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001efa:	2309      	movs	r3, #9
 8001efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001f02:	7adb      	ldrb	r3, [r3, #11]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <_ZN13AD9957_Driver13WriteRegisterEh+0x15a>
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d005      	beq.n	8001f18 <_ZN13AD9957_Driver13WriteRegisterEh+0x164>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001f0c:	e054      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f16:	e004      	b.n	8001f22 <_ZN13AD9957_Driver13WriteRegisterEh+0x16e>
			datawordH = &reg.REG_ST1;
 8001f18:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001f1c:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f20:	bf00      	nop
		break;
 8001f22:	e049      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_1:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001f24:	2309      	movs	r3, #9
 8001f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001f2c:	7adb      	ldrb	r3, [r3, #11]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <_ZN13AD9957_Driver13WriteRegisterEh+0x184>
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <_ZN13AD9957_Driver13WriteRegisterEh+0x18e>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001f36:	e03f      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001f38:	4b58      	ldr	r3, [pc, #352]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001f3c:	4b58      	ldr	r3, [pc, #352]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f40:	e004      	b.n	8001f4c <_ZN13AD9957_Driver13WriteRegisterEh+0x198>
			datawordH = &reg.REG_ST1;
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001f46:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f4a:	bf00      	nop
		break;
 8001f4c:	e034      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case PROFILE_0:
		reglength = 9; // Profile-Register is 8 Bytes long, plus  Instruction-Byte
 8001f4e:	2309      	movs	r3, #9
 8001f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch (ad9957_config.CFR1_OP_MODE) {
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <_ZN13AD9957_Driver13WriteRegisterEh+0x2e4>)
 8001f56:	7adb      	ldrb	r3, [r3, #11]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <_ZN13AD9957_Driver13WriteRegisterEh+0x1ae>
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d005      	beq.n	8001f6c <_ZN13AD9957_Driver13WriteRegisterEh+0x1b8>
		case AD_SINGLE_TONE:
			datawordH = &reg.REG_ST1;
			datawordL = &reg.REG_ST0;
			break;
		}
		break;
 8001f60:	e02a      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
			datawordH = &reg.REG_QDUC1;
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <_ZN13AD9957_Driver13WriteRegisterEh+0x2e8>)
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_QDUC0;
 8001f66:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2ec>)
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f6a:	e004      	b.n	8001f76 <_ZN13AD9957_Driver13WriteRegisterEh+0x1c2>
			datawordH = &reg.REG_ST1;
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f0>)
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			datawordL = &reg.REG_ST0;
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <_ZN13AD9957_Driver13WriteRegisterEh+0x2f4>)
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001f74:	bf00      	nop
		break;
 8001f76:	e01f      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case RAMSEG0:
		reglength = 7; // Ramsegment-Register is 6 Bytes (48 Bits) long, plus Instruction-Byte
 8001f78:	2307      	movs	r3, #7
 8001f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		break;
 8001f7e:	e01b      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case RAMSEG1:
		reglength = 7; // Ramsegment-Register is 6 Bytes (48 Bits) long, plus Instruction-Byte
 8001f80:	2307      	movs	r3, #7
 8001f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		break;
 8001f86:	e017      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case CFR1:
		reglength = 5;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		datawordL = &reg.REG_CFR1;
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <_ZN13AD9957_Driver13WriteRegisterEh+0x2f8>)
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f92:	e011      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case CFR2:
		reglength = 5;
 8001f94:	2305      	movs	r3, #5
 8001f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				datawordL = &reg.REG_CFR2;
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <_ZN13AD9957_Driver13WriteRegisterEh+0x2fc>)
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001f9e:	e00b      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case CFR3:
			reglength = 5;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			datawordL = &reg.REG_CFR3;
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <_ZN13AD9957_Driver13WriteRegisterEh+0x300>)
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001faa:	e005      	b.n	8001fb8 <_ZN13AD9957_Driver13WriteRegisterEh+0x204>
	case AMP:
			reglength = 5;
 8001fac:	2305      	movs	r3, #5
 8001fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			datawordL = &reg.REG_AMP;
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <_ZN13AD9957_Driver13WriteRegisterEh+0x304>)
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001fb6:	bf00      	nop
	}
	uint8_t buf[reglength];
 8001fb8:	466b      	mov	r3, sp
 8001fba:	461d      	mov	r5, r3
 8001fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fc0:	1e58      	subs	r0, r3, #1
 8001fc2:	6178      	str	r0, [r7, #20]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	f04f 0400 	mov.w	r4, #0
 8001fd6:	00d4      	lsls	r4, r2, #3
 8001fd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001fdc:	00cb      	lsls	r3, r1, #3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	00d4      	lsls	r4, r2, #3
 8001ff2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ff6:	00cb      	lsls	r3, r1, #3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	08db      	lsrs	r3, r3, #3
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	ebad 0d03 	sub.w	sp, sp, r3
 8002006:	466b      	mov	r3, sp
 8002008:	3300      	adds	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
	uint8_t transmitSize = reglength;
 800200c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002010:	73fb      	strb	r3, [r7, #15]
	buf[reglength] = regAddr;
 8002012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	78f9      	ldrb	r1, [r7, #3]
 800201a:	54d1      	strb	r1, [r2, r3]
	reglength--;
 800201c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002020:	3b01      	subs	r3, #1
 8002022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	// TODO: REWORK THIS SECTION TO MAKE IT COMPATIBLE WITH 6 BYTE LONG REGISTERS!
	if (reglength > 6) {
 8002026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800202a:	2b06      	cmp	r3, #6
 800202c:	d91a      	bls.n	8002064 <_ZN13AD9957_Driver13WriteRegisterEh+0x2b0>
		for (int i = 0; i < 4; i++) {
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	2b03      	cmp	r3, #3
 8002036:	dc10      	bgt.n	800205a <_ZN13AD9957_Driver13WriteRegisterEh+0x2a6>
			buf[reglength - i] = (uint8_t) (*datawordH >> (i * 8)); // Split the value into 4 Bytes
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	fa22 f103 	lsr.w	r1, r2, r3
 8002044:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	b2c9      	uxtb	r1, r1
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 4; i++) {
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	3301      	adds	r3, #1
 8002056:	623b      	str	r3, [r7, #32]
 8002058:	e7eb      	b.n	8002032 <_ZN13AD9957_Driver13WriteRegisterEh+0x27e>
		}
		reglength = reglength - 4;
 800205a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800205e:	3b04      	subs	r3, #4
 8002060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	if (reglength > 4) {
 8002064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002068:	2b04      	cmp	r3, #4
 800206a:	d92c      	bls.n	80020c6 <_ZN13AD9957_Driver13WriteRegisterEh+0x312>
		for (int i = 0; i < 2; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b01      	cmp	r3, #1
 8002074:	dc22      	bgt.n	80020bc <_ZN13AD9957_Driver13WriteRegisterEh+0x308>
			buf[reglength - i] = (uint8_t) (*datawordH >> (i * 8)); // Split the value into 4 Bytes
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	fa22 f103 	lsr.w	r1, r2, r3
 8002082:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b2c9      	uxtb	r1, r1
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 2; i++) {
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e7eb      	b.n	8002070 <_ZN13AD9957_Driver13WriteRegisterEh+0x2bc>
 8002098:	20000168 	.word	0x20000168
 800209c:	2000021c 	.word	0x2000021c
 80020a0:	20000220 	.word	0x20000220
 80020a4:	20000214 	.word	0x20000214
 80020a8:	20000218 	.word	0x20000218
 80020ac:	200001e8 	.word	0x200001e8
 80020b0:	200001ec 	.word	0x200001ec
 80020b4:	200001f0 	.word	0x200001f0
 80020b8:	2000020c 	.word	0x2000020c
		}
		reglength = reglength - 2;
 80020bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020c0:	3b02      	subs	r3, #2
 80020c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	for (int i = 0; i < 4; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	dc10      	bgt.n	80020f2 <_ZN13AD9957_Driver13WriteRegisterEh+0x33e>
		buf[reglength - i] = (uint8_t) (*datawordL >> (i * 8)); // Split the value into 4 Bytes
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	fa22 f103 	lsr.w	r1, r2, r3
 80020dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b2c9      	uxtb	r1, r1
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++) {
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3301      	adds	r3, #1
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e7eb      	b.n	80020ca <_ZN13AD9957_Driver13WriteRegisterEh+0x316>
	}
	HAL_GPIO_WritePin(AD9957_CS_GPIO_Port, AD9957_CS_Pin, GPIO_PIN_RESET); // Select the Chip
 80020f2:	2200      	movs	r2, #0
 80020f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f8:	4811      	ldr	r0, [pc, #68]	; (8002140 <_ZN13AD9957_Driver13WriteRegisterEh+0x38c>)
 80020fa:	f003 fd79 	bl	8005bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET); // Set the IOUpdate-Pin to LOW
 80020fe:	2200      	movs	r2, #0
 8002100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002104:	480e      	ldr	r0, [pc, #56]	; (8002140 <_ZN13AD9957_Driver13WriteRegisterEh+0x38c>)
 8002106:	f003 fd73 	bl	8005bf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, buf, transmitSize, 800); // Send the Data to the Chip via SPI2
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	b29a      	uxth	r2, r3
 8002110:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <_ZN13AD9957_Driver13WriteRegisterEh+0x390>)
 8002116:	f005 fd6e 	bl	8007bf6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET); // Set the IOUpdate-Pin HIGH to load the data from the shift register into the register set by the instruction-byte
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <_ZN13AD9957_Driver13WriteRegisterEh+0x38c>)
 8002122:	f003 fd65 	bl	8005bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9957_CS_GPIO_Port, AD9957_CS_Pin, GPIO_PIN_SET); // Transfer over, Deselect Chip
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <_ZN13AD9957_Driver13WriteRegisterEh+0x38c>)
 800212e:	f003 fd5f 	bl	8005bf0 <HAL_GPIO_WritePin>
	return result;
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	46ad      	mov	sp, r5
}
 8002136:	4618      	mov	r0, r3
 8002138:	3730      	adds	r7, #48	; 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bdb0      	pop	{r4, r5, r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	20000454 	.word	0x20000454

08002148 <_ZN14ADF4356_DriverC1Ev>:
 *      Author: voyag
 */

#include <ADF4356_Driver.h>

ADF4356_Driver::ADF4356_Driver() {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <_ZN14ADF4356_DriverC1Ev+0x24>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	setup_complete = 0x00;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	711a      	strb	r2, [r3, #4]

}
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0800e658 	.word	0x0800e658

08002170 <_ZN14ADF4356_DriverD1Ev>:

ADF4356_Driver::~ADF4356_Driver() {
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <_ZN14ADF4356_DriverD1Ev+0x1c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	0800e658 	.word	0x0800e658

08002190 <_ZN14ADF4356_DriverD0Ev>:
ADF4356_Driver::~ADF4356_Driver() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
}
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe9 	bl	8002170 <_ZN14ADF4356_DriverD1Ev>
 800219e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f00b f890 	bl	800d2c8 <_ZdlPvj>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	0000      	movs	r0, r0
 80021b4:	0000      	movs	r0, r0
	...

080021b8 <_ZN14ADF4356_Driver5SetupEhlhi>:

uint8_t ADF4356_Driver::Setup(uint8_t startup, long refCLK, uint8_t mode, int MOD2) { // Setup the ADF4355 with standard values (Output: ON, Freqency: 100 MHz (for debug-purposes)). Requires Reference-Frequency, Mode, MOD2-Value
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	461a      	mov	r2, r3
 80021c4:	460b      	mov	r3, r1
 80021c6:	72fb      	strb	r3, [r7, #11]
 80021c8:	4613      	mov	r3, r2
 80021ca:	72bb      	strb	r3, [r7, #10]
	switch (setup_complete) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d002      	beq.n	80021da <_ZN14ADF4356_Driver5SetupEhlhi+0x22>
	case 0x01:
		break;
	default:
		startup = 0x01;	// Setup has not been completed, set Startup to true to make sure the chip is being set up correctly.
 80021d4:	2301      	movs	r3, #1
 80021d6:	72fb      	strb	r3, [r7, #11]
		break;
 80021d8:	e000      	b.n	80021dc <_ZN14ADF4356_Driver5SetupEhlhi+0x24>
		break;
 80021da:	bf00      	nop
	}
	switch (startup) {
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 81c7 	beq.w	8002572 <_ZN14ADF4356_Driver5SetupEhlhi+0x3ba>
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d000      	beq.n	80021ea <_ZN14ADF4356_Driver5SetupEhlhi+0x32>
	case 0x00: // Chip has already been set up. No need for all the config-data to be set up again.
		// TODO: Configure the operating-Mode
		break;
	default:

		break;
 80021e8:	e1c4      	b.n	8002574 <_ZN14ADF4356_Driver5SetupEhlhi+0x3bc>
		if (refCLK < 10000000) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_ZN14ADF4356_Driver5SetupEhlhi+0x88>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dc03      	bgt.n	80021fa <_ZN14ADF4356_Driver5SetupEhlhi+0x42>
			adf_config.ERROR = 0xF0; // Save the REFERENCE-ERROR and
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22f0      	movs	r2, #240	; 0xf0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		adf_config.REFCLK = refCLK;
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe f936 	bl	800046c <__aeabi_i2d>
 8002200:	4603      	mov	r3, r0
 8002202:	460c      	mov	r4, r1
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	e9c2 3402 	strd	r3, r4, [r2, #8]
		adf_config.AMPLITUDE = 0;	// Set Amplitude to lowest possible value
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
		adf_config.MODE = mode;	// Store the supplied Mode in the Mode-Variable
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	7aba      	ldrb	r2, [r7, #10]
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		adf_config.MOD1 = 16777216;	// MOD1 (Constant)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800221e:	639a      	str	r2, [r3, #56]	; 0x38
		adf_config.R0_PRESCAL = 0;	// Set Prescaler to 4/5 Mode
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
		adf_config.R0_AUTOCAL = 1;	// Enable the Autocalibration
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
		adf_config.R0_Nmin = 23;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2217      	movs	r2, #23
 8002230:	665a      	str	r2, [r3, #100]	; 0x64
		if (MOD2 <= 2) {
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2b02      	cmp	r3, #2
 8002236:	dc05      	bgt.n	8002244 <_ZN14ADF4356_Driver5SetupEhlhi+0x8c>
			adf_config.R2_MOD2_LSB = 2;	// Default-Value for MOD2
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2202      	movs	r2, #2
 800223c:	671a      	str	r2, [r3, #112]	; 0x70
 800223e:	e004      	b.n	800224a <_ZN14ADF4356_Driver5SetupEhlhi+0x92>
 8002240:	0098967f 	.word	0x0098967f
			adf_config.R2_MOD2_LSB = MOD2;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	671a      	str	r2, [r3, #112]	; 0x70
		adf_config.MOD2 = MOD2;	// MOD2 Value (Defines the Channel-Spacing
 800224a:	6a3a      	ldr	r2, [r7, #32]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c
		adf_config.R4_MUXOUT = 4;	// Set the MUXOUT to Digital Lock-Detect
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2204      	movs	r2, #4
 8002254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		adf_config.R4_REFDOUBLE = 1;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		adf_config.R4_REFDIV2 = 1;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		adf_config.R4_RCOUNTER = 1;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		adf_config.R4_DOUBLEBUF = 1;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		adf_config.R4_CHGPUMP = 0x03;	// Set Charge-Pump to 3.3mA
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2203      	movs	r2, #3
 800227c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		adf_config.R4_REFMODE = 1;	// Differential Reference Select
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		adf_config.R4_MUXLOG = 1;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		adf_config.R4_PDPOLA = 1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		adf_config.R4_PWRDN = 0;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		adf_config.R4_CP3STATE = 0;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		adf_config.R4_COUNTRES = 0;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		adf_config.PFD = ((adf_config.REFCLK * (adf_config.R4_REFDOUBLE + 1))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	3301      	adds	r3, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f8d4 	bl	800046c <__aeabi_i2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fe f938 	bl	8000540 <__aeabi_dmul>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4625      	mov	r5, r4
 80022d6:	461c      	mov	r4, r3
				/ (adf_config.R4_REFDIV2 + 1)) / adf_config.R4_RCOUNTER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022de:	3301      	adds	r3, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f8c3 	bl	800046c <__aeabi_i2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fe fa51 	bl	8000794 <__aeabi_ddiv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	4625      	mov	r5, r4
 80022f8:	461c      	mov	r4, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8b3 	bl	800046c <__aeabi_i2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fe fa41 	bl	8000794 <__aeabi_ddiv>
 8002312:	4603      	mov	r3, r0
 8002314:	460c      	mov	r4, r1
		adf_config.PFD = ((adf_config.REFCLK * (adf_config.R4_REFDOUBLE + 1))
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	e9c2 3404 	strd	r3, r4, [r2, #16]
		adf_config.REG5 = 0x00800025; // // REGISTER 5 IS RESERVED AND NEEDS TO BE SET TO 0x00800025
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4aa8      	ldr	r2, [pc, #672]	; (80025c0 <_ZN14ADF4356_Driver5SetupEhlhi+0x408>)
 8002320:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		adf_config.R6_BLEED_POLARITY = 1;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		adf_config.R6_GATED_BLEED = 1;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		adf_config.R6_NEGATIVE_BLEED = 1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		adf_config.R6_RFOUTB_SELECT = 0;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		adf_config.R6_FEEDBACK_SELECT = 1;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		adf_config.R6_RF_DIV_SEL = 6;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2206      	movs	r2, #6
 8002350:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		adf_config.R6_BLEED_CURRENT = 8;	// Default-Value for N = 23
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2208      	movs	r2, #8
 8002358:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		adf_config.R6_MUTE_TILL_LOCK = 0;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		adf_config.R6_AUXRF_ENABLE = 1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		adf_config.R6_AUXRF_PWR = 3;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2203      	movs	r2, #3
 8002370:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		adf_config.R6_RFOUT_ENABLE = 0;	// TODO: Set this to ON when RF-Path is populated
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		adf_config.R6_RFOUT_PWR = 0;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		adf_config.R7_LE_SYNC_EDGE = 0;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		adf_config.R7_LE_SYNC = 1;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		adf_config.R7_LDC = 2; 	// 2048 Cycles until LOCK-DETECT = TRUE
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2202      	movs	r2, #2
 8002398:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		adf_config.R7_LOL_MODE = 0;	// Disable LOL-Mode since Differential Reference is used
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		adf_config.R7_LDP = 3;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2203      	movs	r2, #3
 80023a8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		adf_config.R7_LDM = 0;	// Set to 1 if using a Integer-N
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		adf_config.REG8 = 0x15596568; //REGISTER 8 IS RESERVED AND NEEDS TO BE SET TO 0x102D0428 (ADF4355) or 0x15596568 (ADF4356)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <_ZN14ADF4356_Driver5SetupEhlhi+0x40c>)
 80023b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		adf_config.R9_VCO_BAND_DIV = (int)((adf_config.PFD / 1600000) + 1);	//Calculate the divider for the VCO Band and add 1 to round up the result.
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023c2:	a371      	add	r3, pc, #452	; (adr r3, 8002588 <_ZN14ADF4356_Driver5SetupEhlhi+0x3d0>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f9e4 	bl	8000794 <__aeabi_ddiv>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	4618      	mov	r0, r3
 80023d2:	4621      	mov	r1, r4
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <_ZN14ADF4356_Driver5SetupEhlhi+0x410>)
 80023da:	f7fd fefb 	bl	80001d4 <__adddf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	4618      	mov	r0, r3
 80023e4:	4621      	mov	r1, r4
 80023e6:	f7fe fb5b 	bl	8000aa0 <__aeabi_d2iz>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		adf_config.R9_TIMEOUT = 34;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2222      	movs	r2, #34	; 0x22
 80023f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		adf_config.R9_AUTOLVL_CAL_TIMEOUT = (int) (((0.00005 * adf_config.PFD)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002402:	a363      	add	r3, pc, #396	; (adr r3, 8002590 <_ZN14ADF4356_Driver5SetupEhlhi+0x3d8>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f89a 	bl	8000540 <__aeabi_dmul>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	4625      	mov	r5, r4
 8002412:	461c      	mov	r4, r3
				/ adf_config.R9_TIMEOUT) + 1);	// Calculate the Autolevel Calibration Timeout. The result makes sure that it will take at least 50us (0.00005 seconds) before Timeout occurs
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f826 	bl	800046c <__aeabi_i2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fe f9b4 	bl	8000794 <__aeabi_ddiv>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4618      	mov	r0, r3
 8002432:	4621      	mov	r1, r4
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <_ZN14ADF4356_Driver5SetupEhlhi+0x410>)
 800243a:	f7fd fecb 	bl	80001d4 <__adddf3>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
		adf_config.R9_AUTOLVL_CAL_TIMEOUT = (int) (((0.00005 * adf_config.PFD)
 8002442:	4618      	mov	r0, r3
 8002444:	4621      	mov	r1, r4
 8002446:	f7fe fb2b 	bl	8000aa0 <__aeabi_d2iz>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		adf_config.R9_SYNTH_LOCK_TIMEOUT = (int) (((0.00002 * adf_config.PFD)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002458:	a34f      	add	r3, pc, #316	; (adr r3, 8002598 <_ZN14ADF4356_Driver5SetupEhlhi+0x3e0>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f86f 	bl	8000540 <__aeabi_dmul>
 8002462:	4603      	mov	r3, r0
 8002464:	460c      	mov	r4, r1
 8002466:	4625      	mov	r5, r4
 8002468:	461c      	mov	r4, r3
				/ adf_config.R9_TIMEOUT) + 1);	// Calculate the Synthesizer Lock Timeout. The result makes sure that it will take at least 20us (0.00002 seconds) before Timeout occurs.
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd fffb 	bl	800046c <__aeabi_i2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fe f989 	bl	8000794 <__aeabi_ddiv>
 8002482:	4603      	mov	r3, r0
 8002484:	460c      	mov	r4, r1
 8002486:	4618      	mov	r0, r3
 8002488:	4621      	mov	r1, r4
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <_ZN14ADF4356_Driver5SetupEhlhi+0x410>)
 8002490:	f7fd fea0 	bl	80001d4 <__adddf3>
 8002494:	4603      	mov	r3, r0
 8002496:	460c      	mov	r4, r1
		adf_config.R9_SYNTH_LOCK_TIMEOUT = (int) (((0.00002 * adf_config.PFD)
 8002498:	4618      	mov	r0, r3
 800249a:	4621      	mov	r1, r4
 800249c:	f7fe fb00 	bl	8000aa0 <__aeabi_d2iz>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				(int) ((((adf_config.PFD / 100000) - 2) / 4) + 1);	// Calculate the divider for the internal ADC-Clock in a way that the ADC is clocked at approximately 100kHz. +1 ensures the value is rounded UP when converted to INTEGER.
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80024ae:	a33c      	add	r3, pc, #240	; (adr r3, 80025a0 <_ZN14ADF4356_Driver5SetupEhlhi+0x3e8>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f96e 	bl	8000794 <__aeabi_ddiv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4618      	mov	r0, r3
 80024be:	4621      	mov	r1, r4
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c8:	f7fd fe82 	bl	80001d0 <__aeabi_dsub>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	4618      	mov	r0, r3
 80024d2:	4621      	mov	r1, r4
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <_ZN14ADF4356_Driver5SetupEhlhi+0x414>)
 80024da:	f7fe f95b 	bl	8000794 <__aeabi_ddiv>
 80024de:	4603      	mov	r3, r0
 80024e0:	460c      	mov	r4, r1
 80024e2:	4618      	mov	r0, r3
 80024e4:	4621      	mov	r1, r4
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <_ZN14ADF4356_Driver5SetupEhlhi+0x410>)
 80024ec:	f7fd fe72 	bl	80001d4 <__adddf3>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	4618      	mov	r0, r3
 80024f6:	4621      	mov	r1, r4
 80024f8:	f7fe fad2 	bl	8000aa0 <__aeabi_d2iz>
 80024fc:	4602      	mov	r2, r0
		adf_config.R10_ADC_CLK_DIV =
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		adf_config.R10_ADC_CONV = 1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		adf_config.R10_ADC_ENABLE = 1;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		adf_config.REG11 = 0x0061200B; // REGISTER 11 IS RESERVED AND NEEDS TO BE SET TO 0x0061300B in case of a ADF4355 and 0x61200B in case of a ADF4356
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <_ZN14ADF4356_Driver5SetupEhlhi+0x418>)
 8002518:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		adf_config.R12_PHASE_RESYNC_CLK_DIV = (int) (0.01 * adf_config.PFD);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002522:	a321      	add	r3, pc, #132	; (adr r3, 80025a8 <_ZN14ADF4356_Driver5SetupEhlhi+0x3f0>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fe f80a 	bl	8000540 <__aeabi_dmul>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	4618      	mov	r0, r3
 8002532:	4621      	mov	r1, r4
 8002534:	f7fe fab4 	bl	8000aa0 <__aeabi_d2iz>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		adf_config.R13_FRAC2_MSB = 0;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		adf_config.R13_MOD2_MSB = 0;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
		ConvertFreq(150000000);
 8002550:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80025b0 <_ZN14ADF4356_Driver5SetupEhlhi+0x3f8>
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f83f 	bl	80025d8 <_ZN14ADF4356_Driver11ConvertFreqEd>
		WriteData();
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f001 f84c 	bl	80035f8 <_ZN14ADF4356_Driver9WriteDataEv>
		ConvertFreq(120000000);
 8002560:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80025b8 <_ZN14ADF4356_Driver5SetupEhlhi+0x400>
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f837 	bl	80025d8 <_ZN14ADF4356_Driver11ConvertFreqEd>
		WriteData();
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 f844 	bl	80035f8 <_ZN14ADF4356_Driver9WriteDataEv>
		break;
 8002570:	e000      	b.n	8002574 <_ZN14ADF4356_Driver5SetupEhlhi+0x3bc>
		break;
 8002572:	bf00      	nop
	}
	setup_complete = 0x01;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	711a      	strb	r2, [r3, #4]
	return adf_config.ERROR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	00000000 	.word	0x00000000
 800258c:	41386a00 	.word	0x41386a00
 8002590:	eb1c432d 	.word	0xeb1c432d
 8002594:	3f0a36e2 	.word	0x3f0a36e2
 8002598:	88e368f1 	.word	0x88e368f1
 800259c:	3ef4f8b5 	.word	0x3ef4f8b5
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40f86a00 	.word	0x40f86a00
 80025a8:	47ae147b 	.word	0x47ae147b
 80025ac:	3f847ae1 	.word	0x3f847ae1
 80025b0:	00000000 	.word	0x00000000
 80025b4:	41a1e1a3 	.word	0x41a1e1a3
 80025b8:	00000000 	.word	0x00000000
 80025bc:	419c9c38 	.word	0x419c9c38
 80025c0:	00800025 	.word	0x00800025
 80025c4:	15596568 	.word	0x15596568
 80025c8:	3ff00000 	.word	0x3ff00000
 80025cc:	40100000 	.word	0x40100000
 80025d0:	0061200b 	.word	0x0061200b
 80025d4:	00000000 	.word	0x00000000

080025d8 <_ZN14ADF4356_Driver11ConvertFreqEd>:

void ADF4356_Driver::GetConfig(int *responseBuffer) {

}

void ADF4356_Driver::ConvertFreq(double frequency) {
 80025d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	ed87 0b00 	vstr	d0, [r7]
	// int F4_BandSel = 10.0 * B_BandSelClk / PFDFreq;
	adf_config.FREQUENCY = (double) frequency; // Desired Output-Frequency
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80025ec:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	// Calculate the RF-Divider
	if (adf_config.FREQUENCY >= 6800000000) { // Driver only considers the RFOUTA of ADF4355 / ADF5355. Frequencies higher than 6.8 GHz are not routed through the RF-Deck of the ARSG but can be taken from "J_rfb". Frequency at J_rfb = RFOUT * 2.
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80025f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80028b8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x2e0>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe fa26 	bl	8000a4c <__aeabi_dcmpge>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01c      	beq.n	8002640 <_ZN14ADF4356_Driver11ConvertFreqEd+0x68>
		adf_config.FREQUENCY = adf_config.FREQUENCY / 2;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002614:	f7fe f8be 	bl	8000794 <__aeabi_ddiv>
 8002618:	4603      	mov	r3, r0
 800261a:	460c      	mov	r4, r1
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		adf_config.RFDIV = 0;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 0;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		adf_config.R6_AUXRF_ENABLE = 1;	// Frequency above 6.8 GHz Selected - Assume that a ADF5355 is in the system and make sure the Doubled Output is ON
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		adf_config.R6_AUXRF_PWR = 3;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2203      	movs	r2, #3
 800263c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	}
	if (adf_config.FREQUENCY < 6800000000) {
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002646:	a39c      	add	r3, pc, #624	; (adr r3, 80028b8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x2e0>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fe f9ea 	bl	8000a24 <__aeabi_dcmplt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <_ZN14ADF4356_Driver11ConvertFreqEd+0x8c>
		adf_config.RFDIV = 0;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 0;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 3400000000) {
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800266a:	a395      	add	r3, pc, #596	; (adr r3, 80028c0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x2e8>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fe f9d8 	bl	8000a24 <__aeabi_dcmplt>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <_ZN14ADF4356_Driver11ConvertFreqEd+0xb0>
		adf_config.RFDIV = 2;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2202      	movs	r2, #2
 800267e:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 1;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 1700000000) {
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800268e:	a38e      	add	r3, pc, #568	; (adr r3, 80028c8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x2f0>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f9c6 	bl	8000a24 <__aeabi_dcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <_ZN14ADF4356_Driver11ConvertFreqEd+0xd4>
		adf_config.RFDIV = 4;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2204      	movs	r2, #4
 80026a2:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 2;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 850000000) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80026b2:	a387      	add	r3, pc, #540	; (adr r3, 80028d0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x2f8>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f7fe f9b4 	bl	8000a24 <__aeabi_dcmplt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <_ZN14ADF4356_Driver11ConvertFreqEd+0xf8>
		adf_config.RFDIV = 8;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2208      	movs	r2, #8
 80026c6:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 3;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2203      	movs	r2, #3
 80026cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 425000000) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80026d6:	a380      	add	r3, pc, #512	; (adr r3, 80028d8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x300>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fe f9a2 	bl	8000a24 <__aeabi_dcmplt>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <_ZN14ADF4356_Driver11ConvertFreqEd+0x11c>
		adf_config.RFDIV = 16;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2210      	movs	r2, #16
 80026ea:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 4;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2204      	movs	r2, #4
 80026f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 212500000) {
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80026fa:	a379      	add	r3, pc, #484	; (adr r3, 80028e0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x308>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fe f990 	bl	8000a24 <__aeabi_dcmplt>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <_ZN14ADF4356_Driver11ConvertFreqEd+0x140>
		adf_config.RFDIV = 32;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 5;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2205      	movs	r2, #5
 8002714:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}
	if (adf_config.FREQUENCY < 106250000) {
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800271e:	a372      	add	r3, pc, #456	; (adr r3, 80028e8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x310>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fe f97e 	bl	8000a24 <__aeabi_dcmplt>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <_ZN14ADF4356_Driver11ConvertFreqEd+0x164>
		adf_config.RFDIV = 64;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	761a      	strb	r2, [r3, #24]
		adf_config.R6_RF_DIV_SEL = 6;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2206      	movs	r2, #6
 8002738:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/////////////////////////////////////////////////////////////////////////////

//	double PFDFreq = adf_config.REFCLK
//			* ((1.0 + adf_config.R4_REFDOUBLE) / (adf_config.R4_RCOUNTER * (1.0 + adf_config.R4_REFDIV2))); //Phase detector frequency

	adf_config.N = ((adf_config.FREQUENCY) * adf_config.RFDIV) / adf_config.PFD; // Calculate N
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	7e1b      	ldrb	r3, [r3, #24]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fe90 	bl	800046c <__aeabi_i2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4620      	mov	r0, r4
 8002752:	4629      	mov	r1, r5
 8002754:	f7fd fef4 	bl	8000540 <__aeabi_dmul>
 8002758:	4603      	mov	r3, r0
 800275a:	460c      	mov	r4, r1
 800275c:	4618      	mov	r0, r3
 800275e:	4621      	mov	r1, r4
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002766:	461a      	mov	r2, r3
 8002768:	4623      	mov	r3, r4
 800276a:	f7fe f813 	bl	8000794 <__aeabi_ddiv>
 800276e:	4603      	mov	r3, r0
 8002770:	460c      	mov	r4, r1
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	e9c2 3408 	strd	r3, r4, [r2, #32]

	adf_config.R0_N = (int)adf_config.N;  // Turn N into integer
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800277e:	4618      	mov	r0, r3
 8002780:	4621      	mov	r1, r4
 8002782:	f7fe f98d 	bl	8000aa0 <__aeabi_d2iz>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	661a      	str	r2, [r3, #96]	; 0x60
	adf_config.R0_N = adf_config.R0_N & 0x0000FFFF;	// Clear the first 16 bit of the N-Value to make sure
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	661a      	str	r2, [r3, #96]	; 0x60

	adf_config.FRAC1 = adf_config.N - adf_config.R0_N;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe63 	bl	800046c <__aeabi_i2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd fd0f 	bl	80001d0 <__aeabi_dsub>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	adf_config.FRAC1 = adf_config.FRAC1 * adf_config.MOD1; // Calculate Frac1: Multiply the remainder of N - Integer-Part of N with MOD1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe40 	bl	800044c <__aeabi_ui2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd feb4 	bl	8000540 <__aeabi_dmul>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	adf_config.R1_FRAC1 = (int)adf_config.FRAC1;  // turn Frac1 into an integer
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80027e8:	4618      	mov	r0, r3
 80027ea:	4621      	mov	r1, r4
 80027ec:	f7fe f958 	bl	8000aa0 <__aeabi_d2iz>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	669a      	str	r2, [r3, #104]	; 0x68
	adf_config.R1_FRAC1 = adf_config.R1_FRAC1 & 0x00FFFFFF;	// Clear the first 8 bit of FRAC1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	669a      	str	r2, [r3, #104]	; 0x68

	adf_config.FRAC2 = adf_config.FRAC1 - adf_config.R1_FRAC1;	// Subtract the Integer-Part of FRAC1 from FRAC1 to get FRAC2.
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe2d 	bl	800046c <__aeabi_i2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fd fcd9 	bl	80001d0 <__aeabi_dsub>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	adf_config.FRAC2 = adf_config.FRAC2 * adf_config.MOD2;	// Multiply the remainder with MOD2 to get the Integer-Part of FRAC2.
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe0a 	bl	800044c <__aeabi_ui2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fd fe7e 	bl	8000540 <__aeabi_dmul>
 8002844:	4603      	mov	r3, r0
 8002846:	460c      	mov	r4, r1
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	adf_config.R2_FRAC2_LSB = (int)adf_config.FRAC2;	// Turn FRAC2 into an Integer and store the value in the Mirrored register.
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8002854:	4618      	mov	r0, r3
 8002856:	4621      	mov	r1, r4
 8002858:	f7fe f922 	bl	8000aa0 <__aeabi_d2iz>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	66da      	str	r2, [r3, #108]	; 0x6c
	adf_config.R13_FRAC2_MSB = (int)adf_config.FRAC2;	// Turn FRAC2 into an Integer and store the value in the Mirrored register.
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8002868:	4618      	mov	r0, r3
 800286a:	4621      	mov	r1, r4
 800286c:	f7fe f918 	bl	8000aa0 <__aeabi_d2iz>
 8002870:	4603      	mov	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c

	adf_config.R2_FRAC2_LSB = adf_config.R2_FRAC2_LSB & 0x00003FFF; // Clear the first 18 bits of the LSB of FRAC2.
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	66da      	str	r2, [r3, #108]	; 0x6c
	adf_config.R13_FRAC2_MSB = adf_config.R13_FRAC2_MSB >> 18; // Clear the lowest 18 bits of the MSB of FRAC2 and shift the value RIGHT by 18 bits to align it with the register-value.
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800288c:	149b      	asrs	r3, r3, #18
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c

	if (adf_config.R1_FRAC1 == 0) {	// Check if the Fractional Values are 0 and if so, configure Negative Bleed and Lock Detect Mode to Integer N-Mode.
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289a:	2b00      	cmp	r3, #0
 800289c:	d128      	bne.n	80028f0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x318>
		if (adf_config.R2_FRAC2_LSB == 0) {
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12c      	bne.n	8002900 <_ZN14ADF4356_Driver11ConvertFreqEd+0x328>
			adf_config.R6_NEGATIVE_BLEED = 0;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			adf_config.R7_LDM = 1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80028b6:	e023      	b.n	8002900 <_ZN14ADF4356_Driver11ConvertFreqEd+0x328>
 80028b8:	40000000 	.word	0x40000000
 80028bc:	41f954fc 	.word	0x41f954fc
 80028c0:	40000000 	.word	0x40000000
 80028c4:	41e954fc 	.word	0x41e954fc
 80028c8:	40000000 	.word	0x40000000
 80028cc:	41d954fc 	.word	0x41d954fc
 80028d0:	40000000 	.word	0x40000000
 80028d4:	41c954fc 	.word	0x41c954fc
 80028d8:	40000000 	.word	0x40000000
 80028dc:	41b954fc 	.word	0x41b954fc
 80028e0:	40000000 	.word	0x40000000
 80028e4:	41a954fc 	.word	0x41a954fc
 80028e8:	40000000 	.word	0x40000000
 80028ec:	419954fc 	.word	0x419954fc
		}
	} else {
		adf_config.R6_NEGATIVE_BLEED = 1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		adf_config.R7_LDM = 0;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	}

	////////////////// Set 32 bit register values R0 to R12 ///////////////////////////

	adf_config.REG0 = (int) (0 + adf_config.R0_N * pow(2, 4)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fdb1 	bl	800046c <__aeabi_i2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	2104      	movs	r1, #4
 8002910:	2002      	movs	r0, #2
 8002912:	f7fe fb0b 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002916:	ec53 2b10 	vmov	r2, r3, d0
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fe0f 	bl	8000540 <__aeabi_dmul>
 8002922:	4603      	mov	r3, r0
 8002924:	460c      	mov	r4, r1
 8002926:	4618      	mov	r0, r3
 8002928:	4621      	mov	r1, r4
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f7fd fc4f 	bl	80001d4 <__adddf3>
 8002936:	4603      	mov	r3, r0
 8002938:	460c      	mov	r4, r1
 800293a:	4625      	mov	r5, r4
 800293c:	461c      	mov	r4, r3
			+ adf_config.R0_PRESCAL * pow(2, 20)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fd92 	bl	800046c <__aeabi_i2d>
 8002948:	4680      	mov	r8, r0
 800294a:	4689      	mov	r9, r1
 800294c:	2114      	movs	r1, #20
 800294e:	2002      	movs	r0, #2
 8002950:	f7fe faec 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002954:	ec53 2b10 	vmov	r2, r3, d0
 8002958:	4640      	mov	r0, r8
 800295a:	4649      	mov	r1, r9
 800295c:	f7fd fdf0 	bl	8000540 <__aeabi_dmul>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fc34 	bl	80001d4 <__adddf3>
 800296c:	4603      	mov	r3, r0
 800296e:	460c      	mov	r4, r1
 8002970:	4625      	mov	r5, r4
 8002972:	461c      	mov	r4, r3
			+ adf_config.R0_AUTOCAL * pow(2, 21));	// Calculate R0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd77 	bl	800046c <__aeabi_i2d>
 800297e:	4680      	mov	r8, r0
 8002980:	4689      	mov	r9, r1
 8002982:	2115      	movs	r1, #21
 8002984:	2002      	movs	r0, #2
 8002986:	f7fe fad1 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800298a:	ec53 2b10 	vmov	r2, r3, d0
 800298e:	4640      	mov	r0, r8
 8002990:	4649      	mov	r1, r9
 8002992:	f7fd fdd5 	bl	8000540 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4620      	mov	r0, r4
 800299c:	4629      	mov	r1, r5
 800299e:	f7fd fc19 	bl	80001d4 <__adddf3>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
	adf_config.REG0 = (int) (0 + adf_config.R0_N * pow(2, 4)
 80029a6:	4618      	mov	r0, r3
 80029a8:	4621      	mov	r1, r4
 80029aa:	f7fe f879 	bl	8000aa0 <__aeabi_d2iz>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	adf_config.REG1 = (int) (1 + adf_config.R1_FRAC1 * pow(2, 4));// Calculate R1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd56 	bl	800046c <__aeabi_i2d>
 80029c0:	4604      	mov	r4, r0
 80029c2:	460d      	mov	r5, r1
 80029c4:	2104      	movs	r1, #4
 80029c6:	2002      	movs	r0, #2
 80029c8:	f7fe fab0 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029cc:	ec53 2b10 	vmov	r2, r3, d0
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fdb4 	bl	8000540 <__aeabi_dmul>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4bef      	ldr	r3, [pc, #956]	; (8002da4 <_ZN14ADF4356_Driver11ConvertFreqEd+0x7cc>)
 80029e6:	f7fd fbf5 	bl	80001d4 <__adddf3>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	4618      	mov	r0, r3
 80029f0:	4621      	mov	r1, r4
 80029f2:	f7fe f855 	bl	8000aa0 <__aeabi_d2iz>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

	adf_config.REG2 = (int) (2 + adf_config.R2_MOD2_LSB * pow(2, 4)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fd32 	bl	800046c <__aeabi_i2d>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	2002      	movs	r0, #2
 8002a10:	f7fe fa8c 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a14:	ec53 2b10 	vmov	r2, r3, d0
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fd fd90 	bl	8000540 <__aeabi_dmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	4618      	mov	r0, r3
 8002a26:	4621      	mov	r1, r4
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a30:	f7fd fbd0 	bl	80001d4 <__adddf3>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	4625      	mov	r5, r4
 8002a3a:	461c      	mov	r4, r3
			+ adf_config.R2_FRAC2_LSB * pow(2, 18)); //
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd13 	bl	800046c <__aeabi_i2d>
 8002a46:	4680      	mov	r8, r0
 8002a48:	4689      	mov	r9, r1
 8002a4a:	2112      	movs	r1, #18
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fe fa6d 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a52:	ec53 2b10 	vmov	r2, r3, d0
 8002a56:	4640      	mov	r0, r8
 8002a58:	4649      	mov	r1, r9
 8002a5a:	f7fd fd71 	bl	8000540 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fbb5 	bl	80001d4 <__adddf3>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	460c      	mov	r4, r1
	adf_config.REG2 = (int) (2 + adf_config.R2_MOD2_LSB * pow(2, 4)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4621      	mov	r1, r4
 8002a72:	f7fe f815 	bl	8000aa0 <__aeabi_d2iz>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	adf_config.REG3 = (int) (3 + adf_config.R3_PHASE_VALUE * pow(2, 4)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fcf1 	bl	800046c <__aeabi_i2d>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	2104      	movs	r1, #4
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7fe fa4b 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a96:	ec53 2b10 	vmov	r2, r3, d0
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f7fd fd4f 	bl	8000540 <__aeabi_dmul>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	4bbe      	ldr	r3, [pc, #760]	; (8002da8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x7d0>)
 8002ab0:	f7fd fb90 	bl	80001d4 <__adddf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	4625      	mov	r5, r4
 8002aba:	461c      	mov	r4, r3
			+ adf_config.R3_PHASE_ADJUST * pow(2, 28)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fcd3 	bl	800046c <__aeabi_i2d>
 8002ac6:	4680      	mov	r8, r0
 8002ac8:	4689      	mov	r9, r1
 8002aca:	211c      	movs	r1, #28
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7fe fa2d 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ad2:	ec53 2b10 	vmov	r2, r3, d0
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4649      	mov	r1, r9
 8002ada:	f7fd fd31 	bl	8000540 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f7fd fb75 	bl	80001d4 <__adddf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	4625      	mov	r5, r4
 8002af0:	461c      	mov	r4, r3
			+ adf_config.R3_PHASE_RESYNC * pow(2, 29)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fcb8 	bl	800046c <__aeabi_i2d>
 8002afc:	4680      	mov	r8, r0
 8002afe:	4689      	mov	r9, r1
 8002b00:	211d      	movs	r1, #29
 8002b02:	2002      	movs	r0, #2
 8002b04:	f7fe fa12 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b08:	ec53 2b10 	vmov	r2, r3, d0
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fd fd16 	bl	8000540 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fb5a 	bl	80001d4 <__adddf3>
 8002b20:	4603      	mov	r3, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	4625      	mov	r5, r4
 8002b26:	461c      	mov	r4, r3
			+ adf_config.R3_SD_LOAD_RESET * pow(2, 30)); // TODO: CHECK Phase-Register Calculation
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fc9d 	bl	800046c <__aeabi_i2d>
 8002b32:	4680      	mov	r8, r0
 8002b34:	4689      	mov	r9, r1
 8002b36:	211e      	movs	r1, #30
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7fe f9f7 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f7fd fcfb 	bl	8000540 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fb3f 	bl	80001d4 <__adddf3>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
	adf_config.REG3 = (int) (3 + adf_config.R3_PHASE_VALUE * pow(2, 4)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f7fd ff9f 	bl	8000aa0 <__aeabi_d2iz>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	adf_config.REG4 = (int) (4 + adf_config.R4_COUNTRES * pow(2, 4)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc7b 	bl	800046c <__aeabi_i2d>
 8002b76:	4604      	mov	r4, r0
 8002b78:	460d      	mov	r5, r1
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7fe f9d5 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b82:	ec53 2b10 	vmov	r2, r3, d0
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fcd9 	bl	8000540 <__aeabi_dmul>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	4618      	mov	r0, r3
 8002b94:	4621      	mov	r1, r4
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b84      	ldr	r3, [pc, #528]	; (8002dac <_ZN14ADF4356_Driver11ConvertFreqEd+0x7d4>)
 8002b9c:	f7fd fb1a 	bl	80001d4 <__adddf3>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	4625      	mov	r5, r4
 8002ba6:	461c      	mov	r4, r3
			+ adf_config.R4_CP3STATE * pow(2, 5)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fc5c 	bl	800046c <__aeabi_i2d>
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	4689      	mov	r9, r1
 8002bb8:	2105      	movs	r1, #5
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f7fe f9b6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bc0:	ec53 2b10 	vmov	r2, r3, d0
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	f7fd fcba 	bl	8000540 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7fd fafe 	bl	80001d4 <__adddf3>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4625      	mov	r5, r4
 8002bde:	461c      	mov	r4, r3
			+ adf_config.R4_PWRDN * pow(2, 6) + adf_config.R4_PDPOLA * pow(2, 7)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc40 	bl	800046c <__aeabi_i2d>
 8002bec:	4680      	mov	r8, r0
 8002bee:	4689      	mov	r9, r1
 8002bf0:	2106      	movs	r1, #6
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f7fe f99a 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bf8:	ec53 2b10 	vmov	r2, r3, d0
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	4649      	mov	r1, r9
 8002c00:	f7fd fc9e 	bl	8000540 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fae2 	bl	80001d4 <__adddf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	4625      	mov	r5, r4
 8002c16:	461c      	mov	r4, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc24 	bl	800046c <__aeabi_i2d>
 8002c24:	4680      	mov	r8, r0
 8002c26:	4689      	mov	r9, r1
 8002c28:	2107      	movs	r1, #7
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f7fe f97e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c30:	ec53 2b10 	vmov	r2, r3, d0
 8002c34:	4640      	mov	r0, r8
 8002c36:	4649      	mov	r1, r9
 8002c38:	f7fd fc82 	bl	8000540 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fac6 	bl	80001d4 <__adddf3>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4625      	mov	r5, r4
 8002c4e:	461c      	mov	r4, r3
			+ adf_config.R4_MUXLOG * pow(2, 8)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc08 	bl	800046c <__aeabi_i2d>
 8002c5c:	4680      	mov	r8, r0
 8002c5e:	4689      	mov	r9, r1
 8002c60:	2108      	movs	r1, #8
 8002c62:	2002      	movs	r0, #2
 8002c64:	f7fe f962 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c68:	ec53 2b10 	vmov	r2, r3, d0
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fc66 	bl	8000540 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd faaa 	bl	80001d4 <__adddf3>
 8002c80:	4603      	mov	r3, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	4625      	mov	r5, r4
 8002c86:	461c      	mov	r4, r3
			+ adf_config.R4_REFMODE * pow(2, 9)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fbec 	bl	800046c <__aeabi_i2d>
 8002c94:	4680      	mov	r8, r0
 8002c96:	4689      	mov	r9, r1
 8002c98:	2109      	movs	r1, #9
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7fe f946 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ca0:	ec53 2b10 	vmov	r2, r3, d0
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	f7fd fc4a 	bl	8000540 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fa8e 	bl	80001d4 <__adddf3>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4625      	mov	r5, r4
 8002cbe:	461c      	mov	r4, r3
			+ adf_config.R4_CHGPUMP * pow(2, 10)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fbd0 	bl	800046c <__aeabi_i2d>
 8002ccc:	4680      	mov	r8, r0
 8002cce:	4689      	mov	r9, r1
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f7fe f92a 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002cd8:	ec53 2b10 	vmov	r2, r3, d0
 8002cdc:	4640      	mov	r0, r8
 8002cde:	4649      	mov	r1, r9
 8002ce0:	f7fd fc2e 	bl	8000540 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd fa72 	bl	80001d4 <__adddf3>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	4625      	mov	r5, r4
 8002cf6:	461c      	mov	r4, r3
			+ adf_config.R4_DOUBLEBUF * pow(2, 14)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fbb4 	bl	800046c <__aeabi_i2d>
 8002d04:	4680      	mov	r8, r0
 8002d06:	4689      	mov	r9, r1
 8002d08:	210e      	movs	r1, #14
 8002d0a:	2002      	movs	r0, #2
 8002d0c:	f7fe f90e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d10:	ec53 2b10 	vmov	r2, r3, d0
 8002d14:	4640      	mov	r0, r8
 8002d16:	4649      	mov	r1, r9
 8002d18:	f7fd fc12 	bl	8000540 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4620      	mov	r0, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	f7fd fa56 	bl	80001d4 <__adddf3>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4625      	mov	r5, r4
 8002d2e:	461c      	mov	r4, r3
			+ adf_config.R4_RCOUNTER * pow(2, 15)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fb98 	bl	800046c <__aeabi_i2d>
 8002d3c:	4680      	mov	r8, r0
 8002d3e:	4689      	mov	r9, r1
 8002d40:	210f      	movs	r1, #15
 8002d42:	2002      	movs	r0, #2
 8002d44:	f7fe f8f2 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d48:	ec53 2b10 	vmov	r2, r3, d0
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4649      	mov	r1, r9
 8002d50:	f7fd fbf6 	bl	8000540 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f7fd fa3a 	bl	80001d4 <__adddf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	460c      	mov	r4, r1
 8002d64:	4625      	mov	r5, r4
 8002d66:	461c      	mov	r4, r3
			+ adf_config.R4_REFDIV2 * pow(2, 25)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb7c 	bl	800046c <__aeabi_i2d>
 8002d74:	4680      	mov	r8, r0
 8002d76:	4689      	mov	r9, r1
 8002d78:	2119      	movs	r1, #25
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7fe f8d6 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d80:	ec53 2b10 	vmov	r2, r3, d0
 8002d84:	4640      	mov	r0, r8
 8002d86:	4649      	mov	r1, r9
 8002d88:	f7fd fbda 	bl	8000540 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7fd fa1e 	bl	80001d4 <__adddf3>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	4625      	mov	r5, r4
 8002d9e:	461c      	mov	r4, r3
 8002da0:	e006      	b.n	8002db0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x7d8>
 8002da2:	bf00      	nop
 8002da4:	3ff00000 	.word	0x3ff00000
 8002da8:	40080000 	.word	0x40080000
 8002dac:	40100000 	.word	0x40100000
			+ adf_config.R4_REFDOUBLE * pow(2, 26)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb58 	bl	800046c <__aeabi_i2d>
 8002dbc:	4680      	mov	r8, r0
 8002dbe:	4689      	mov	r9, r1
 8002dc0:	211a      	movs	r1, #26
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f7fe f8b2 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002dc8:	ec53 2b10 	vmov	r2, r3, d0
 8002dcc:	4640      	mov	r0, r8
 8002dce:	4649      	mov	r1, r9
 8002dd0:	f7fd fbb6 	bl	8000540 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd f9fa 	bl	80001d4 <__adddf3>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4625      	mov	r5, r4
 8002de6:	461c      	mov	r4, r3
			+ adf_config.R4_MUXOUT * pow(2, 27));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb3c 	bl	800046c <__aeabi_i2d>
 8002df4:	4680      	mov	r8, r0
 8002df6:	4689      	mov	r9, r1
 8002df8:	211b      	movs	r1, #27
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f7fe f896 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002e00:	ec53 2b10 	vmov	r2, r3, d0
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f7fd fb9a 	bl	8000540 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd f9de 	bl	80001d4 <__adddf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
	adf_config.REG4 = (int) (4 + adf_config.R4_COUNTRES * pow(2, 4)
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f7fd fe3e 	bl	8000aa0 <__aeabi_d2iz>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

	adf_config.REG6 = (int) (6 + adf_config.R6_RFOUT_PWR * pow(2, 4)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb1a 	bl	800046c <__aeabi_i2d>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	460d      	mov	r5, r1
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	2002      	movs	r0, #2
 8002e40:	f7fe f874 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002e44:	ec53 2b10 	vmov	r2, r3, d0
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	f7fd fb78 	bl	8000540 <__aeabi_dmul>
 8002e50:	4603      	mov	r3, r0
 8002e52:	460c      	mov	r4, r1
 8002e54:	4618      	mov	r0, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	4bf4      	ldr	r3, [pc, #976]	; (8003230 <_ZN14ADF4356_Driver11ConvertFreqEd+0xc58>)
 8002e5e:	f7fd f9b9 	bl	80001d4 <__adddf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4625      	mov	r5, r4
 8002e68:	461c      	mov	r4, r3
			+ adf_config.R6_RFOUT_ENABLE * pow(2, 6)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fafb 	bl	800046c <__aeabi_i2d>
 8002e76:	4680      	mov	r8, r0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	2106      	movs	r1, #6
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7fe f855 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002e82:	ec53 2b10 	vmov	r2, r3, d0
 8002e86:	4640      	mov	r0, r8
 8002e88:	4649      	mov	r1, r9
 8002e8a:	f7fd fb59 	bl	8000540 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4620      	mov	r0, r4
 8002e94:	4629      	mov	r1, r5
 8002e96:	f7fd f99d 	bl	80001d4 <__adddf3>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	4625      	mov	r5, r4
 8002ea0:	461c      	mov	r4, r3
			+ adf_config.R6_AUXRF_PWR * pow(2, 7)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fadf 	bl	800046c <__aeabi_i2d>
 8002eae:	4680      	mov	r8, r0
 8002eb0:	4689      	mov	r9, r1
 8002eb2:	2107      	movs	r1, #7
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	f7fe f839 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002eba:	ec53 2b10 	vmov	r2, r3, d0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	f7fd fb3d 	bl	8000540 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f7fd f981 	bl	80001d4 <__adddf3>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	4625      	mov	r5, r4
 8002ed8:	461c      	mov	r4, r3
			+ adf_config.R6_AUXRF_ENABLE * pow(2, 9) + 0 * pow(2, 10)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fac3 	bl	800046c <__aeabi_i2d>
 8002ee6:	4680      	mov	r8, r0
 8002ee8:	4689      	mov	r9, r1
 8002eea:	2109      	movs	r1, #9
 8002eec:	2002      	movs	r0, #2
 8002eee:	f7fe f81d 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ef2:	ec53 2b10 	vmov	r2, r3, d0
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb21 	bl	8000540 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f965 	bl	80001d4 <__adddf3>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4625      	mov	r5, r4
 8002f10:	461c      	mov	r4, r3
 8002f12:	210a      	movs	r1, #10
 8002f14:	2002      	movs	r0, #2
 8002f16:	f7fe f809 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f1a:	ec51 0b10 	vmov	r0, r1, d0
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f7fd fb0b 	bl	8000540 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f7fd f94f 	bl	80001d4 <__adddf3>
 8002f36:	4603      	mov	r3, r0
 8002f38:	460c      	mov	r4, r1
 8002f3a:	4625      	mov	r5, r4
 8002f3c:	461c      	mov	r4, r3
			+ adf_config.R6_MUTE_TILL_LOCK * pow(2, 11) + 0 * pow(2, 12)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fa91 	bl	800046c <__aeabi_i2d>
 8002f4a:	4680      	mov	r8, r0
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	210b      	movs	r1, #11
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7fd ffeb 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f56:	ec53 2b10 	vmov	r2, r3, d0
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	f7fd faef 	bl	8000540 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7fd f933 	bl	80001d4 <__adddf3>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	4625      	mov	r5, r4
 8002f74:	461c      	mov	r4, r3
 8002f76:	210c      	movs	r1, #12
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f7fd ffd7 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f7e:	ec51 0b10 	vmov	r0, r1, d0
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f7fd fad9 	bl	8000540 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f91d 	bl	80001d4 <__adddf3>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4625      	mov	r5, r4
 8002fa0:	461c      	mov	r4, r3
			+ adf_config.R6_BLEED_CURRENT * pow(2, 13)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa5f 	bl	800046c <__aeabi_i2d>
 8002fae:	4680      	mov	r8, r0
 8002fb0:	4689      	mov	r9, r1
 8002fb2:	210d      	movs	r1, #13
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	f7fd ffb9 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd fabd 	bl	8000540 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f7fd f901 	bl	80001d4 <__adddf3>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	4625      	mov	r5, r4
 8002fd8:	461c      	mov	r4, r3
			+ adf_config.R6_RF_DIV_SEL * pow(2, 21)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fa43 	bl	800046c <__aeabi_i2d>
 8002fe6:	4680      	mov	r8, r0
 8002fe8:	4689      	mov	r9, r1
 8002fea:	2115      	movs	r1, #21
 8002fec:	2002      	movs	r0, #2
 8002fee:	f7fd ff9d 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ff2:	ec53 2b10 	vmov	r2, r3, d0
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd faa1 	bl	8000540 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd f8e5 	bl	80001d4 <__adddf3>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	4625      	mov	r5, r4
 8003010:	461c      	mov	r4, r3
			+ adf_config.R6_FEEDBACK_SELECT * pow(2, 24) + adf_config.R6_RFOUTB_SELECT * pow(2,25) + 1 * pow(2, 26) +  1 * pow(2, 28)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa27 	bl	800046c <__aeabi_i2d>
 800301e:	4680      	mov	r8, r0
 8003020:	4689      	mov	r9, r1
 8003022:	2118      	movs	r1, #24
 8003024:	2002      	movs	r0, #2
 8003026:	f7fd ff81 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800302a:	ec53 2b10 	vmov	r2, r3, d0
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd fa85 	bl	8000540 <__aeabi_dmul>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4620      	mov	r0, r4
 800303c:	4629      	mov	r1, r5
 800303e:	f7fd f8c9 	bl	80001d4 <__adddf3>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4625      	mov	r5, r4
 8003048:	461c      	mov	r4, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa0b 	bl	800046c <__aeabi_i2d>
 8003056:	4680      	mov	r8, r0
 8003058:	4689      	mov	r9, r1
 800305a:	2119      	movs	r1, #25
 800305c:	2002      	movs	r0, #2
 800305e:	f7fd ff65 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003062:	ec53 2b10 	vmov	r2, r3, d0
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd fa69 	bl	8000540 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd f8ad 	bl	80001d4 <__adddf3>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	4625      	mov	r5, r4
 8003080:	461c      	mov	r4, r3
 8003082:	211a      	movs	r1, #26
 8003084:	2002      	movs	r0, #2
 8003086:	f7fd ff51 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800308a:	ec53 2b10 	vmov	r2, r3, d0
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd f89f 	bl	80001d4 <__adddf3>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	4625      	mov	r5, r4
 800309c:	461c      	mov	r4, r3
 800309e:	211c      	movs	r1, #28
 80030a0:	2002      	movs	r0, #2
 80030a2:	f7fd ff43 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030a6:	ec53 2b10 	vmov	r2, r3, d0
 80030aa:	4620      	mov	r0, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7fd f891 	bl	80001d4 <__adddf3>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	4625      	mov	r5, r4
 80030b8:	461c      	mov	r4, r3
			+ adf_config.R6_NEGATIVE_BLEED * pow(2, 29)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd f9d3 	bl	800046c <__aeabi_i2d>
 80030c6:	4680      	mov	r8, r0
 80030c8:	4689      	mov	r9, r1
 80030ca:	211d      	movs	r1, #29
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7fd ff2d 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030d2:	ec53 2b10 	vmov	r2, r3, d0
 80030d6:	4640      	mov	r0, r8
 80030d8:	4649      	mov	r1, r9
 80030da:	f7fd fa31 	bl	8000540 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f7fd f875 	bl	80001d4 <__adddf3>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	4625      	mov	r5, r4
 80030f0:	461c      	mov	r4, r3
			+ adf_config.R6_GATED_BLEED * pow(2, 30) + adf_config.R6_BLEED_POLARITY * pow(2,31));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f9b7 	bl	800046c <__aeabi_i2d>
 80030fe:	4680      	mov	r8, r0
 8003100:	4689      	mov	r9, r1
 8003102:	211e      	movs	r1, #30
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd ff11 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800310a:	ec53 2b10 	vmov	r2, r3, d0
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
 8003112:	f7fd fa15 	bl	8000540 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f859 	bl	80001d4 <__adddf3>
 8003122:	4603      	mov	r3, r0
 8003124:	460c      	mov	r4, r1
 8003126:	4625      	mov	r5, r4
 8003128:	461c      	mov	r4, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f99b 	bl	800046c <__aeabi_i2d>
 8003136:	4680      	mov	r8, r0
 8003138:	4689      	mov	r9, r1
 800313a:	211f      	movs	r1, #31
 800313c:	2002      	movs	r0, #2
 800313e:	f7fd fef5 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003142:	ec53 2b10 	vmov	r2, r3, d0
 8003146:	4640      	mov	r0, r8
 8003148:	4649      	mov	r1, r9
 800314a:	f7fd f9f9 	bl	8000540 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4620      	mov	r0, r4
 8003154:	4629      	mov	r1, r5
 8003156:	f7fd f83d 	bl	80001d4 <__adddf3>
 800315a:	4603      	mov	r3, r0
 800315c:	460c      	mov	r4, r1
	adf_config.REG6 = (int) (6 + adf_config.R6_RFOUT_PWR * pow(2, 4)
 800315e:	4618      	mov	r0, r3
 8003160:	4621      	mov	r1, r4
 8003162:	f7fd fc9d 	bl	8000aa0 <__aeabi_d2iz>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	adf_config.REG7 = (int) (7 + adf_config.R7_LDM * pow(2, 4)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f979 	bl	800046c <__aeabi_i2d>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	2104      	movs	r1, #4
 8003180:	2002      	movs	r0, #2
 8003182:	f7fd fed3 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003186:	ec53 2b10 	vmov	r2, r3, d0
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f7fd f9d7 	bl	8000540 <__aeabi_dmul>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4618      	mov	r0, r3
 8003198:	4621      	mov	r1, r4
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <_ZN14ADF4356_Driver11ConvertFreqEd+0xc5c>)
 80031a0:	f7fd f818 	bl	80001d4 <__adddf3>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4625      	mov	r5, r4
 80031aa:	461c      	mov	r4, r3
			+ adf_config.R7_LDP * pow(2, 5) + adf_config.R7_LOL_MODE * pow(2, 7)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f95a 	bl	800046c <__aeabi_i2d>
 80031b8:	4680      	mov	r8, r0
 80031ba:	4689      	mov	r9, r1
 80031bc:	2105      	movs	r1, #5
 80031be:	2002      	movs	r0, #2
 80031c0:	f7fd feb4 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80031c4:	ec53 2b10 	vmov	r2, r3, d0
 80031c8:	4640      	mov	r0, r8
 80031ca:	4649      	mov	r1, r9
 80031cc:	f7fd f9b8 	bl	8000540 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4620      	mov	r0, r4
 80031d6:	4629      	mov	r1, r5
 80031d8:	f7fc fffc 	bl	80001d4 <__adddf3>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	4625      	mov	r5, r4
 80031e2:	461c      	mov	r4, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f93e 	bl	800046c <__aeabi_i2d>
 80031f0:	4680      	mov	r8, r0
 80031f2:	4689      	mov	r9, r1
 80031f4:	2107      	movs	r1, #7
 80031f6:	2002      	movs	r0, #2
 80031f8:	f7fd fe98 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80031fc:	ec53 2b10 	vmov	r2, r3, d0
 8003200:	4640      	mov	r0, r8
 8003202:	4649      	mov	r1, r9
 8003204:	f7fd f99c 	bl	8000540 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fc ffe0 	bl	80001d4 <__adddf3>
 8003214:	4603      	mov	r3, r0
 8003216:	460c      	mov	r4, r1
 8003218:	4625      	mov	r5, r4
 800321a:	461c      	mov	r4, r3
			+ adf_config.R7_LDC * pow(2, 8) + adf_config.R7_LE_SYNC * pow(2, 25) + 1 * pow(2,26)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f922 	bl	800046c <__aeabi_i2d>
 8003228:	4680      	mov	r8, r0
 800322a:	4689      	mov	r9, r1
 800322c:	e004      	b.n	8003238 <_ZN14ADF4356_Driver11ConvertFreqEd+0xc60>
 800322e:	bf00      	nop
 8003230:	40180000 	.word	0x40180000
 8003234:	401c0000 	.word	0x401c0000
 8003238:	2108      	movs	r1, #8
 800323a:	2002      	movs	r0, #2
 800323c:	f7fd fe76 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003240:	ec53 2b10 	vmov	r2, r3, d0
 8003244:	4640      	mov	r0, r8
 8003246:	4649      	mov	r1, r9
 8003248:	f7fd f97a 	bl	8000540 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fc ffbe 	bl	80001d4 <__adddf3>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	4625      	mov	r5, r4
 800325e:	461c      	mov	r4, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f900 	bl	800046c <__aeabi_i2d>
 800326c:	4680      	mov	r8, r0
 800326e:	4689      	mov	r9, r1
 8003270:	2119      	movs	r1, #25
 8003272:	2002      	movs	r0, #2
 8003274:	f7fd fe5a 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003278:	ec53 2b10 	vmov	r2, r3, d0
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fd f95e 	bl	8000540 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc ffa2 	bl	80001d4 <__adddf3>
 8003290:	4603      	mov	r3, r0
 8003292:	460c      	mov	r4, r1
 8003294:	4625      	mov	r5, r4
 8003296:	461c      	mov	r4, r3
 8003298:	211a      	movs	r1, #26
 800329a:	2002      	movs	r0, #2
 800329c:	f7fd fe46 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032a0:	ec53 2b10 	vmov	r2, r3, d0
 80032a4:	4620      	mov	r0, r4
 80032a6:	4629      	mov	r1, r5
 80032a8:	f7fc ff94 	bl	80001d4 <__adddf3>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	4625      	mov	r5, r4
 80032b2:	461c      	mov	r4, r3
			+ adf_config.R7_LE_SYNC_EDGE * pow(2, 27));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f8d6 	bl	800046c <__aeabi_i2d>
 80032c0:	4680      	mov	r8, r0
 80032c2:	4689      	mov	r9, r1
 80032c4:	211b      	movs	r1, #27
 80032c6:	2002      	movs	r0, #2
 80032c8:	f7fd fe30 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032cc:	ec53 2b10 	vmov	r2, r3, d0
 80032d0:	4640      	mov	r0, r8
 80032d2:	4649      	mov	r1, r9
 80032d4:	f7fd f934 	bl	8000540 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4620      	mov	r0, r4
 80032de:	4629      	mov	r1, r5
 80032e0:	f7fc ff78 	bl	80001d4 <__adddf3>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
	adf_config.REG7 = (int) (7 + adf_config.R7_LDM * pow(2, 4)
 80032e8:	4618      	mov	r0, r3
 80032ea:	4621      	mov	r1, r4
 80032ec:	f7fd fbd8 	bl	8000aa0 <__aeabi_d2iz>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	//REGISTER 8 IS RESERVED AND NEEDS TO BE SET TO 0x102D0428 (ADF4355) or 0x15596568 (ADF4356)

	adf_config.REG9 = (int) (9 + adf_config.R9_SYNTH_LOCK_TIMEOUT * pow(2, 4)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f8b4 	bl	800046c <__aeabi_i2d>
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
 8003308:	2104      	movs	r1, #4
 800330a:	2002      	movs	r0, #2
 800330c:	f7fd fe0e 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003310:	ec53 2b10 	vmov	r2, r3, d0
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fd f912 	bl	8000540 <__aeabi_dmul>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4618      	mov	r0, r3
 8003322:	4621      	mov	r1, r4
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	4baf      	ldr	r3, [pc, #700]	; (80035e8 <_ZN14ADF4356_Driver11ConvertFreqEd+0x1010>)
 800332a:	f7fc ff53 	bl	80001d4 <__adddf3>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	4625      	mov	r5, r4
 8003334:	461c      	mov	r4, r3
			+ adf_config.R9_AUTOLVL_CAL_TIMEOUT * pow(2, 9)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f895 	bl	800046c <__aeabi_i2d>
 8003342:	4680      	mov	r8, r0
 8003344:	4689      	mov	r9, r1
 8003346:	2109      	movs	r1, #9
 8003348:	2002      	movs	r0, #2
 800334a:	f7fd fdef 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800334e:	ec53 2b10 	vmov	r2, r3, d0
 8003352:	4640      	mov	r0, r8
 8003354:	4649      	mov	r1, r9
 8003356:	f7fd f8f3 	bl	8000540 <__aeabi_dmul>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4620      	mov	r0, r4
 8003360:	4629      	mov	r1, r5
 8003362:	f7fc ff37 	bl	80001d4 <__adddf3>
 8003366:	4603      	mov	r3, r0
 8003368:	460c      	mov	r4, r1
 800336a:	4625      	mov	r5, r4
 800336c:	461c      	mov	r4, r3
			+ adf_config.R9_TIMEOUT * pow(2, 14)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd f879 	bl	800046c <__aeabi_i2d>
 800337a:	4680      	mov	r8, r0
 800337c:	4689      	mov	r9, r1
 800337e:	210e      	movs	r1, #14
 8003380:	2002      	movs	r0, #2
 8003382:	f7fd fdd3 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003386:	ec53 2b10 	vmov	r2, r3, d0
 800338a:	4640      	mov	r0, r8
 800338c:	4649      	mov	r1, r9
 800338e:	f7fd f8d7 	bl	8000540 <__aeabi_dmul>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4620      	mov	r0, r4
 8003398:	4629      	mov	r1, r5
 800339a:	f7fc ff1b 	bl	80001d4 <__adddf3>
 800339e:	4603      	mov	r3, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	4625      	mov	r5, r4
 80033a4:	461c      	mov	r4, r3
			+ adf_config.R9_VCO_BAND_DIV * pow(2, 24));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f85d 	bl	800046c <__aeabi_i2d>
 80033b2:	4680      	mov	r8, r0
 80033b4:	4689      	mov	r9, r1
 80033b6:	2118      	movs	r1, #24
 80033b8:	2002      	movs	r0, #2
 80033ba:	f7fd fdb7 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033be:	ec53 2b10 	vmov	r2, r3, d0
 80033c2:	4640      	mov	r0, r8
 80033c4:	4649      	mov	r1, r9
 80033c6:	f7fd f8bb 	bl	8000540 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f7fc feff 	bl	80001d4 <__adddf3>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
	adf_config.REG9 = (int) (9 + adf_config.R9_SYNTH_LOCK_TIMEOUT * pow(2, 4)
 80033da:	4618      	mov	r0, r3
 80033dc:	4621      	mov	r1, r4
 80033de:	f7fd fb5f 	bl	8000aa0 <__aeabi_d2iz>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	adf_config.REG10 = (int) (10 + adf_config.R10_ADC_ENABLE * pow(2, 4)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f83b 	bl	800046c <__aeabi_i2d>
 80033f6:	4604      	mov	r4, r0
 80033f8:	460d      	mov	r5, r1
 80033fa:	2104      	movs	r1, #4
 80033fc:	2002      	movs	r0, #2
 80033fe:	f7fd fd95 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003402:	ec53 2b10 	vmov	r2, r3, d0
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fd f899 	bl	8000540 <__aeabi_dmul>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	4618      	mov	r0, r3
 8003414:	4621      	mov	r1, r4
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b74      	ldr	r3, [pc, #464]	; (80035ec <_ZN14ADF4356_Driver11ConvertFreqEd+0x1014>)
 800341c:	f7fc feda 	bl	80001d4 <__adddf3>
 8003420:	4603      	mov	r3, r0
 8003422:	460c      	mov	r4, r1
 8003424:	4625      	mov	r5, r4
 8003426:	461c      	mov	r4, r3
			+ adf_config.R10_ADC_CONV * pow(2, 5)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f81c 	bl	800046c <__aeabi_i2d>
 8003434:	4680      	mov	r8, r0
 8003436:	4689      	mov	r9, r1
 8003438:	2105      	movs	r1, #5
 800343a:	2002      	movs	r0, #2
 800343c:	f7fd fd76 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003440:	ec53 2b10 	vmov	r2, r3, d0
 8003444:	4640      	mov	r0, r8
 8003446:	4649      	mov	r1, r9
 8003448:	f7fd f87a 	bl	8000540 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc febe 	bl	80001d4 <__adddf3>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	4625      	mov	r5, r4
 800345e:	461c      	mov	r4, r3
			+ adf_config.R10_ADC_CLK_DIV * pow(2, 6) + 1 * pow(2, 22)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f800 	bl	800046c <__aeabi_i2d>
 800346c:	4680      	mov	r8, r0
 800346e:	4689      	mov	r9, r1
 8003470:	2106      	movs	r1, #6
 8003472:	2002      	movs	r0, #2
 8003474:	f7fd fd5a 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003478:	ec53 2b10 	vmov	r2, r3, d0
 800347c:	4640      	mov	r0, r8
 800347e:	4649      	mov	r1, r9
 8003480:	f7fd f85e 	bl	8000540 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc fea2 	bl	80001d4 <__adddf3>
 8003490:	4603      	mov	r3, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4625      	mov	r5, r4
 8003496:	461c      	mov	r4, r3
 8003498:	2116      	movs	r1, #22
 800349a:	2002      	movs	r0, #2
 800349c:	f7fd fd46 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80034a0:	ec53 2b10 	vmov	r2, r3, d0
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fc fe94 	bl	80001d4 <__adddf3>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	4625      	mov	r5, r4
 80034b2:	461c      	mov	r4, r3
			+ 1 * pow(2, 23));
 80034b4:	2117      	movs	r1, #23
 80034b6:	2002      	movs	r0, #2
 80034b8:	f7fd fd38 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fc fe86 	bl	80001d4 <__adddf3>
 80034c8:	4603      	mov	r3, r0
 80034ca:	460c      	mov	r4, r1
	adf_config.REG10 = (int) (10 + adf_config.R10_ADC_ENABLE * pow(2, 4)
 80034cc:	4618      	mov	r0, r3
 80034ce:	4621      	mov	r1, r4
 80034d0:	f7fd fae6 	bl	8000aa0 <__aeabi_d2iz>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	// REGISTER 11 IS RESERVED AND NEEDS TO BE SET TO 0x0061300B in case of a ADF4355 and 0x61200B in case of a ADF4356

	adf_config.REG12 = (int) (12 + 0x5F * pow(2, 4)
 80034dc:	2104      	movs	r1, #4
 80034de:	2002      	movs	r0, #2
 80034e0:	f7fd fd24 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80034e4:	ec51 0b10 	vmov	r0, r1, d0
 80034e8:	a33d      	add	r3, pc, #244	; (adr r3, 80035e0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x1008>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd f827 	bl	8000540 <__aeabi_dmul>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	4618      	mov	r0, r3
 80034f8:	4621      	mov	r1, r4
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <_ZN14ADF4356_Driver11ConvertFreqEd+0x1018>)
 8003500:	f7fc fe68 	bl	80001d4 <__adddf3>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4625      	mov	r5, r4
 800350a:	461c      	mov	r4, r3
			+ adf_config.R12_PHASE_RESYNC_CLK_DIV * pow(2, 12));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003512:	4618      	mov	r0, r3
 8003514:	f7fc ffaa 	bl	800046c <__aeabi_i2d>
 8003518:	4680      	mov	r8, r0
 800351a:	4689      	mov	r9, r1
 800351c:	210c      	movs	r1, #12
 800351e:	2002      	movs	r0, #2
 8003520:	f7fd fd04 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003524:	ec53 2b10 	vmov	r2, r3, d0
 8003528:	4640      	mov	r0, r8
 800352a:	4649      	mov	r1, r9
 800352c:	f7fd f808 	bl	8000540 <__aeabi_dmul>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4620      	mov	r0, r4
 8003536:	4629      	mov	r1, r5
 8003538:	f7fc fe4c 	bl	80001d4 <__adddf3>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
	adf_config.REG12 = (int) (12 + 0x5F * pow(2, 4)
 8003540:	4618      	mov	r0, r3
 8003542:	4621      	mov	r1, r4
 8003544:	f7fd faac 	bl	8000aa0 <__aeabi_d2iz>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	adf_config.REG13 = (int) (13 + adf_config.R13_MOD2_MSB * pow(2,4) + adf_config.R13_FRAC2_MSB * pow(2,18));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc ff88 	bl	800046c <__aeabi_i2d>
 800355c:	4604      	mov	r4, r0
 800355e:	460d      	mov	r5, r1
 8003560:	2104      	movs	r1, #4
 8003562:	2002      	movs	r0, #2
 8003564:	f7fd fce2 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003568:	ec53 2b10 	vmov	r2, r3, d0
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc ffe6 	bl	8000540 <__aeabi_dmul>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4618      	mov	r0, r3
 800357a:	4621      	mov	r1, r4
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <_ZN14ADF4356_Driver11ConvertFreqEd+0x101c>)
 8003582:	f7fc fe27 	bl	80001d4 <__adddf3>
 8003586:	4603      	mov	r3, r0
 8003588:	460c      	mov	r4, r1
 800358a:	4625      	mov	r5, r4
 800358c:	461c      	mov	r4, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8003594:	4618      	mov	r0, r3
 8003596:	f7fc ff69 	bl	800046c <__aeabi_i2d>
 800359a:	4680      	mov	r8, r0
 800359c:	4689      	mov	r9, r1
 800359e:	2112      	movs	r1, #18
 80035a0:	2002      	movs	r0, #2
 80035a2:	f7fd fcc3 	bl	8000f2c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80035a6:	ec53 2b10 	vmov	r2, r3, d0
 80035aa:	4640      	mov	r0, r8
 80035ac:	4649      	mov	r1, r9
 80035ae:	f7fc ffc7 	bl	8000540 <__aeabi_dmul>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fc fe0b 	bl	80001d4 <__adddf3>
 80035be:	4603      	mov	r3, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	4618      	mov	r0, r3
 80035c4:	4621      	mov	r1, r4
 80035c6:	f7fd fa6b 	bl	8000aa0 <__aeabi_d2iz>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	adf_config.REG10 = 0xC0193A;
	adf_config.REG11 = 0x61200B;
	adf_config.REG12 = 0x7FFFF5FC;
	adf_config.REG13 = 0xD;
#endif
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035dc:	f3af 8000 	nop.w
 80035e0:	00000000 	.word	0x00000000
 80035e4:	4057c000 	.word	0x4057c000
 80035e8:	40220000 	.word	0x40220000
 80035ec:	40240000 	.word	0x40240000
 80035f0:	40280000 	.word	0x40280000
 80035f4:	402a0000 	.word	0x402a0000

080035f8 <_ZN14ADF4356_Driver9WriteDataEv>:

void ADF4356_Driver::WriteData() {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADF4355_CS_GPIO_Port, ADF4355_CS_Pin, GPIO_PIN_RESET); // SELECT THE CHIP / PRIME THE INPUT-REGISTER
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003606:	4839      	ldr	r0, [pc, #228]	; (80036ec <_ZN14ADF4356_Driver9WriteDataEv+0xf4>)
 8003608:	f002 faf2 	bl	8005bf0 <HAL_GPIO_WritePin>
	WriteRegister(adf_config.REG13);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f86b 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	WriteRegister(adf_config.REG12);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f864 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG11);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f85d 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG10);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f856 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG9);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f84f 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG8);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f848 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG7);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f841 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG6);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f83a 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG5);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f833 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG4);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f82c 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f825 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f81e 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	//HAL_Delay(1);
	WriteRegister(adf_config.REG1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f817 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	// TODO: Calculate the Wait-Time: 16/ADF4355_ADC-CLK
	HAL_Delay(4);
 80036c2:	2004      	movs	r0, #4
 80036c4:	f001 fa60 	bl	8004b88 <HAL_Delay>
	WriteRegister(adf_config.REG0);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f80d 	bl	80036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>
	HAL_GPIO_WritePin(ADF4355_CS_GPIO_Port, ADF4355_CS_Pin, GPIO_PIN_SET); // SELECT THE CHIP / PRIME THE INPUT-REGISTER
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036dc:	4803      	ldr	r0, [pc, #12]	; (80036ec <_ZN14ADF4356_Driver9WriteDataEv+0xf4>)
 80036de:	f002 fa87 	bl	8005bf0 <HAL_GPIO_WritePin>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000

080036f0 <_ZN14ADF4356_Driver13WriteRegisterEi>:
		WriteRegister(adf_config.REG6);
		break;
	}
}

void ADF4356_Driver::WriteRegister(int adfreg) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	uint8_t buf[4];
	for (int i = 0; i < 4; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b03      	cmp	r3, #3
 8003702:	dc10      	bgt.n	8003726 <_ZN14ADF4356_Driver13WriteRegisterEi+0x36>
		buf[3 - i] = (uint8_t) (adfreg >> (i * 8));	// Split the value into 4 Bytes
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	411a      	asrs	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f1c3 0303 	rsb	r3, r3, #3
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f107 0110 	add.w	r1, r7, #16
 8003718:	440b      	add	r3, r1
 800371a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (int i = 0; i < 4; i++) {
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e7eb      	b.n	80036fe <_ZN14ADF4356_Driver13WriteRegisterEi+0xe>
	}
	HAL_GPIO_WritePin(ADF4355_LE_GPIO_Port, ADF4355_LE_Pin, GPIO_PIN_RESET);// SELECT THE CHIP / PRIME THE INPUT-REGISTER
 8003726:	2200      	movs	r2, #0
 8003728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800372c:	480a      	ldr	r0, [pc, #40]	; (8003758 <_ZN14ADF4356_Driver13WriteRegisterEi+0x68>)
 800372e:	f002 fa5f 	bl	8005bf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, buf, 4, 800);// Send the Data to the Chip via SPI2
 8003732:	f107 0108 	add.w	r1, r7, #8
 8003736:	f44f 7348 	mov.w	r3, #800	; 0x320
 800373a:	2204      	movs	r2, #4
 800373c:	4807      	ldr	r0, [pc, #28]	; (800375c <_ZN14ADF4356_Driver13WriteRegisterEi+0x6c>)
 800373e:	f004 fa5a 	bl	8007bf6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADF4355_LE_GPIO_Port, ADF4355_LE_Pin, GPIO_PIN_SET);// DESELECT THE CHIP AND LOAD THE INPUT-REGISTER INTO THE INTERNAL REGISTER SPECIFIED BY THE 4 LSB
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <_ZN14ADF4356_Driver13WriteRegisterEi+0x68>)
 800374a:	f002 fa51 	bl	8005bf0 <HAL_GPIO_WritePin>
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	20000454 	.word	0x20000454

08003760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003766:	f001 f99d 	bl	8004aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800376a:	f000 f885 	bl	8003878 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376e:	f000 fba3 	bl	8003eb8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003772:	f000 fb43 	bl	8003dfc <_ZL11MX_DMA_Initv>
  MX_CRC_Init();
 8003776:	f000 f97b 	bl	8003a70 <_ZL11MX_CRC_Initv>
  MX_I2C1_Init();
 800377a:	f000 f991 	bl	8003aa0 <_ZL12MX_I2C1_Initv>
  MX_RNG_Init();
 800377e:	f000 f9c3 	bl	8003b08 <_ZL11MX_RNG_Initv>
  MX_SPI1_Init();
 8003782:	f000 f9d9 	bl	8003b38 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8003786:	f000 fb0b 	bl	8003da0 <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 800378a:	f009 f931 	bl	800c9f0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800378e:	f000 fa0f 	bl	8003bb0 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8003792:	f000 fa49 	bl	8003c28 <_ZL12MX_TIM3_Initv>
  MX_ADC1_Init();
 8003796:	f000 f8e9 	bl	800396c <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(AD9957_CS_GPIO_Port, AD9957_CS_Pin, GPIO_PIN_RESET);
 800379a:	2200      	movs	r2, #0
 800379c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037a0:	482f      	ldr	r0, [pc, #188]	; (8003860 <main+0x100>)
 80037a2:	f002 fa25 	bl	8005bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80037a6:	2201      	movs	r2, #1
 80037a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ac:	482d      	ldr	r0, [pc, #180]	; (8003864 <main+0x104>)
 80037ae:	f002 fa1f 	bl	8005bf0 <HAL_GPIO_WritePin>
	ad9957_config.CFR1_RAM_PB_DEST = 1;
 80037b2:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <main+0x108>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	729a      	strb	r2, [r3, #10]
	HFSource.Setup(0x01, 20000000, ADF_DIRECT_CTRL, 400);
 80037b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	23dc      	movs	r3, #220	; 0xdc
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <main+0x10c>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	482a      	ldr	r0, [pc, #168]	; (8003870 <main+0x110>)
 80037c6:	f7fe fcf7 	bl	80021b8 <_ZN14ADF4356_Driver5SetupEhlhi>
	LFSource.Setup(0x01, 20000000, AD_DIRECT_CTRL, AD_SINGLE_TONE, RAM_OFF);
 80037ca:	23ff      	movs	r3, #255	; 0xff
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2301      	movs	r3, #1
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	23d0      	movs	r3, #208	; 0xd0
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <main+0x10c>)
 80037d6:	2101      	movs	r1, #1
 80037d8:	4826      	ldr	r0, [pc, #152]	; (8003874 <main+0x114>)
 80037da:	f7fd fb3d 	bl	8000e58 <_ZN13AD9957_Driver5SetupEhlhhh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80037de:	2200      	movs	r2, #0
 80037e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037e4:	481f      	ldr	r0, [pc, #124]	; (8003864 <main+0x104>)
 80037e6:	f002 fa03 	bl	8005bf0 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037f0:	481b      	ldr	r0, [pc, #108]	; (8003860 <main+0x100>)
 80037f2:	f002 f9fd 	bl	8005bf0 <HAL_GPIO_WritePin>
	  		//ADF4355_SetFrequency(156250000);
	  		HAL_Delay(2000);
 80037f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037fa:	f001 f9c5 	bl	8004b88 <HAL_Delay>
	  		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80037fe:	2201      	movs	r2, #1
 8003800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003804:	4817      	ldr	r0, [pc, #92]	; (8003864 <main+0x104>)
 8003806:	f002 f9f3 	bl	8005bf0 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET);
 800380a:	2201      	movs	r2, #1
 800380c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003810:	4813      	ldr	r0, [pc, #76]	; (8003860 <main+0x100>)
 8003812:	f002 f9ed 	bl	8005bf0 <HAL_GPIO_WritePin>
	  	//	ADF4355_SetFrequency(3000000001);
	  		HAL_Delay(2000);
 8003816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800381a:	f001 f9b5 	bl	8004b88 <HAL_Delay>
	  		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800381e:	2201      	movs	r2, #1
 8003820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003824:	480f      	ldr	r0, [pc, #60]	; (8003864 <main+0x104>)
 8003826:	f002 f9e3 	bl	8005bf0 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003830:	480b      	ldr	r0, [pc, #44]	; (8003860 <main+0x100>)
 8003832:	f002 f9dd 	bl	8005bf0 <HAL_GPIO_WritePin>
	  	//	ADF4355_SetFrequency(220000000);
	  		HAL_Delay(2000);
 8003836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800383a:	f001 f9a5 	bl	8004b88 <HAL_Delay>
	  		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800383e:	2201      	movs	r2, #1
 8003840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003844:	4807      	ldr	r0, [pc, #28]	; (8003864 <main+0x104>)
 8003846:	f002 f9d3 	bl	8005bf0 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(AD9957_IOUP_GPIO_Port, AD9957_IOUP_Pin, GPIO_PIN_SET);
 800384a:	2201      	movs	r2, #1
 800384c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <main+0x100>)
 8003852:	f002 f9cd 	bl	8005bf0 <HAL_GPIO_WritePin>
	  	//	ADF4355_SetFrequency(6600000000);
	  		HAL_Delay(2000);
 8003856:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800385a:	f001 f995 	bl	8004b88 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800385e:	e7be      	b.n	80037de <main+0x7e>
 8003860:	40021000 	.word	0x40021000
 8003864:	40020800 	.word	0x40020800
 8003868:	20000168 	.word	0x20000168
 800386c:	01312d00 	.word	0x01312d00
 8003870:	200006b0 	.word	0x200006b0
 8003874:	20000808 	.word	0x20000808

08003878 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b094      	sub	sp, #80	; 0x50
 800387c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800387e:	f107 0320 	add.w	r3, r7, #32
 8003882:	2230      	movs	r2, #48	; 0x30
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f00a fdb2 	bl	800e3f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <_Z18SystemClock_Configv+0xec>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <_Z18SystemClock_Configv+0xec>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <_Z18SystemClock_Configv+0xec>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <_Z18SystemClock_Configv+0xf0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <_Z18SystemClock_Configv+0xf0>)
 80038c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <_Z18SystemClock_Configv+0xf0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038de:	2302      	movs	r3, #2
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038e8:	2304      	movs	r3, #4
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80038ec:	23a8      	movs	r3, #168	; 0xa8
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038f0:	2302      	movs	r3, #2
 80038f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038f4:	2307      	movs	r3, #7
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f8:	f107 0320 	add.w	r3, r7, #32
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 fc1b 	bl	8007138 <HAL_RCC_OscConfig>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003912:	f000 fc17 	bl	8004144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003916:	230f      	movs	r3, #15
 8003918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391a:	2302      	movs	r3, #2
 800391c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	2105      	movs	r1, #5
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fe6f 	bl	8007618 <HAL_RCC_ClockConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800394a:	f000 fbfb 	bl	8004144 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 800394e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003952:	2100      	movs	r1, #0
 8003954:	2001      	movs	r0, #1
 8003956:	f003 ff45 	bl	80077e4 <HAL_RCC_MCOConfig>
}
 800395a:	bf00      	nop
 800395c:	3750      	adds	r7, #80	; 0x50
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000

0800396c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003972:	463b      	mov	r3, r7
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800397e:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 8003980:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <_ZL12MX_ADC1_Initv+0xfc>)
 8003982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003984:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 8003986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800398a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 8003994:	2201      	movs	r2, #1
 8003996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 800399a:	2201      	movs	r2, #1
 800399c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039a6:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039ae:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <_ZL12MX_ADC1_Initv+0x100>)
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039ba:	2203      	movs	r2, #3
 80039bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039cc:	4825      	ldr	r0, [pc, #148]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039ce:	f001 f8fd 	bl	8004bcc <HAL_ADC_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80039e2:	f000 fbaf 	bl	8004144 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80039e6:	2310      	movs	r3, #16
 80039e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80039ee:	2307      	movs	r3, #7
 80039f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f2:	463b      	mov	r3, r7
 80039f4:	4619      	mov	r1, r3
 80039f6:	481b      	ldr	r0, [pc, #108]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 80039f8:	f001 f92c 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8003a0c:	f000 fb9a 	bl	8004144 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003a10:	2311      	movs	r3, #17
 8003a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a14:	2302      	movs	r3, #2
 8003a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4811      	ldr	r0, [pc, #68]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 8003a1e:	f001 f919 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8003a32:	f000 fb87 	bl	8004144 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8003a36:	2312      	movs	r3, #18
 8003a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a3e:	463b      	mov	r3, r7
 8003a40:	4619      	mov	r1, r3
 8003a42:	4808      	ldr	r0, [pc, #32]	; (8003a64 <_ZL12MX_ADC1_Initv+0xf8>)
 8003a44:	f001 f906 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 8003a58:	f000 fb74 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000228 	.word	0x20000228
 8003a68:	40012000 	.word	0x40012000
 8003a6c:	0f000001 	.word	0x0f000001

08003a70 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_ZL11MX_CRC_Initv+0x28>)
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <_ZL11MX_CRC_Initv+0x2c>)
 8003a78:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a7a:	4807      	ldr	r0, [pc, #28]	; (8003a98 <_ZL11MX_CRC_Initv+0x28>)
 8003a7c:	f001 fc19 	bl	80052b2 <HAL_CRC_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf14      	ite	ne
 8003a86:	2301      	movne	r3, #1
 8003a88:	2300      	moveq	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8003a90:	f000 fb58 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200002d0 	.word	0x200002d0
 8003a9c:	40023000 	.word	0x40023000

08003aa0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003aa4:	4b15      	ldr	r3, [pc, #84]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <_ZL12MX_I2C1_Initv+0x60>)
 8003aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003aac:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <_ZL12MX_I2C1_Initv+0x64>)
 8003aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003adc:	4807      	ldr	r0, [pc, #28]	; (8003afc <_ZL12MX_I2C1_Initv+0x5c>)
 8003ade:	f002 f8a1 	bl	8005c24 <HAL_I2C_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003af2:	f000 fb27 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200002d8 	.word	0x200002d8
 8003b00:	40005400 	.word	0x40005400
 8003b04:	000186a0 	.word	0x000186a0

08003b08 <_ZL11MX_RNG_Initv>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_ZL11MX_RNG_Initv+0x28>)
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <_ZL11MX_RNG_Initv+0x2c>)
 8003b10:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003b12:	4807      	ldr	r0, [pc, #28]	; (8003b30 <_ZL11MX_RNG_Initv+0x28>)
 8003b14:	f003 ffda 	bl	8007acc <HAL_RNG_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZL11MX_RNG_Initv+0x24>
  {
    Error_Handler();
 8003b28:	f000 fb0c 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200003ec 	.word	0x200003ec
 8003b34:	50060800 	.word	0x50060800

08003b38 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <_ZL12MX_SPI1_Initv+0x74>)
 8003b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b86:	220a      	movs	r2, #10
 8003b88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b8a:	4807      	ldr	r0, [pc, #28]	; (8003ba8 <_ZL12MX_SPI1_Initv+0x70>)
 8003b8c:	f003 ffc8 	bl	8007b20 <HAL_SPI_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <_ZL12MX_SPI1_Initv+0x6c>
  {
    Error_Handler();
 8003ba0:	f000 fad0 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200003fc 	.word	0x200003fc
 8003bac:	40013000 	.word	0x40013000

08003bb0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <_ZL12MX_SPI2_Initv+0x74>)
 8003bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bc2:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003be4:	2208      	movs	r2, #8
 8003be6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003bfc:	220a      	movs	r2, #10
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c00:	4807      	ldr	r0, [pc, #28]	; (8003c20 <_ZL12MX_SPI2_Initv+0x70>)
 8003c02:	f003 ff8d 	bl	8007b20 <HAL_SPI_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8003c16:	f000 fa95 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000454 	.word	0x20000454
 8003c24:	40003800 	.word	0x40003800

08003c28 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	611a      	str	r2, [r3, #16]
 8003c56:	615a      	str	r2, [r3, #20]
 8003c58:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c66:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c68:	4a4c      	ldr	r2, [pc, #304]	; (8003d9c <_ZL12MX_TIM3_Initv+0x174>)
 8003c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c78:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c80:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c86:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c8c:	4842      	ldr	r0, [pc, #264]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003c8e:	f004 f9b5 	bl	8007ffc <HAL_TIM_Base_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <_ZL12MX_TIM3_Initv+0x7e>
  {
    Error_Handler();
 8003ca2:	f000 fa4f 	bl	8004144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4839      	ldr	r0, [pc, #228]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003cb4:	f004 fb9a 	bl	80083ec <HAL_TIM_ConfigClockSource>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <_ZL12MX_TIM3_Initv+0xa4>
  {
    Error_Handler();
 8003cc8:	f000 fa3c 	bl	8004144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ccc:	4832      	ldr	r0, [pc, #200]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003cce:	f004 f9c0 	bl	8008052 <HAL_TIM_PWM_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <_ZL12MX_TIM3_Initv+0xbe>
  {
    Error_Handler();
 8003ce2:	f000 fa2f 	bl	8004144 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003ce6:	482c      	ldr	r0, [pc, #176]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003ce8:	f004 f9e8 	bl	80080bc <HAL_TIM_IC_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8003cfc:	f000 fa22 	bl	8004144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d00:	2300      	movs	r3, #0
 8003d02:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4822      	ldr	r0, [pc, #136]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003d10:	f005 f838 	bl	8008d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <_ZL12MX_TIM3_Initv+0x100>
  {
    Error_Handler();
 8003d24:	f000 fa0e 	bl	8004144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d28:	2360      	movs	r3, #96	; 0x60
 8003d2a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4815      	ldr	r0, [pc, #84]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003d42:	f004 fa8d 	bl	8008260 <HAL_TIM_PWM_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <_ZL12MX_TIM3_Initv+0x132>
  {
    Error_Handler();
 8003d56:	f000 f9f5 	bl	8004144 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	220c      	movs	r2, #12
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4809      	ldr	r0, [pc, #36]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003d72:	f004 f9d8 	bl	8008126 <HAL_TIM_IC_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <_ZL12MX_TIM3_Initv+0x162>
  {
    Error_Handler();
 8003d86:	f000 f9dd 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003d8a:	4803      	ldr	r0, [pc, #12]	; (8003d98 <_ZL12MX_TIM3_Initv+0x170>)
 8003d8c:	f000 fd14 	bl	80047b8 <HAL_TIM_MspPostInit>

}
 8003d90:	bf00      	nop
 8003d92:	3748      	adds	r7, #72	; 0x48
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	2000062c 	.word	0x2000062c
 8003d9c:	40000400 	.word	0x40000400

08003da0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dd6:	4807      	ldr	r0, [pc, #28]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003dd8:	f005 f850 	bl	8008e7c <HAL_UART_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003dec:	f000 f9aa 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	2000066c 	.word	0x2000066c
 8003df8:	40011000 	.word	0x40011000

08003dfc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <_ZL11MX_DMA_Initv+0xb8>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	200b      	movs	r0, #11
 8003e40:	f001 fa01 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003e44:	200b      	movs	r0, #11
 8003e46:	f001 fa1a 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	200e      	movs	r0, #14
 8003e50:	f001 f9f9 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e54:	200e      	movs	r0, #14
 8003e56:	f001 fa12 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	200f      	movs	r0, #15
 8003e60:	f001 f9f1 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e64:	200f      	movs	r0, #15
 8003e66:	f001 fa0a 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	2011      	movs	r0, #17
 8003e70:	f001 f9e9 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003e74:	2011      	movs	r0, #17
 8003e76:	f001 fa02 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2038      	movs	r0, #56	; 0x38
 8003e80:	f001 f9e1 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e84:	2038      	movs	r0, #56	; 0x38
 8003e86:	f001 f9fa 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	203b      	movs	r0, #59	; 0x3b
 8003e90:	f001 f9d9 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003e94:	203b      	movs	r0, #59	; 0x3b
 8003e96:	f001 f9f2 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	203c      	movs	r0, #60	; 0x3c
 8003ea0:	f001 f9d1 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003ea4:	203c      	movs	r0, #60	; 0x3c
 8003ea6:	f001 f9ea 	bl	800527e <HAL_NVIC_EnableIRQ>

}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	; 0x30
 8003ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	4b96      	ldr	r3, [pc, #600]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a95      	ldr	r2, [pc, #596]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003ed8:	f043 0310 	orr.w	r3, r3, #16
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b93      	ldr	r3, [pc, #588]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	4b8f      	ldr	r3, [pc, #572]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	4a8e      	ldr	r2, [pc, #568]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	4b88      	ldr	r3, [pc, #544]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a87      	ldr	r2, [pc, #540]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b85      	ldr	r3, [pc, #532]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b81      	ldr	r3, [pc, #516]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4a80      	ldr	r2, [pc, #512]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6313      	str	r3, [r2, #48]	; 0x30
 8003f32:	4b7e      	ldr	r3, [pc, #504]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a79      	ldr	r2, [pc, #484]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b77      	ldr	r3, [pc, #476]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a72      	ldr	r2, [pc, #456]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f64:	f043 0308 	orr.w	r3, r3, #8
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b70      	ldr	r3, [pc, #448]	; (800412c <_ZL12MX_GPIO_Initv+0x274>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 8003f76:	2200      	movs	r2, #0
 8003f78:	f640 4177 	movw	r1, #3191	; 0xc77
 8003f7c:	486c      	ldr	r0, [pc, #432]	; (8004130 <_ZL12MX_GPIO_Initv+0x278>)
 8003f7e:	f001 fe37 	bl	8005bf0 <HAL_GPIO_WritePin>
                          |AD9957_RESET_Pin|AD9957_IORESET_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin, GPIO_PIN_RESET);
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8003f88:	486a      	ldr	r0, [pc, #424]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 8003f8a:	f001 fe31 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_SET);
 8003f8e:	2201      	movs	r2, #1
 8003f90:	2116      	movs	r1, #22
 8003f92:	4869      	ldr	r0, [pc, #420]	; (8004138 <_ZL12MX_GPIO_Initv+0x280>)
 8003f94:	f001 fe2c 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD9957_IOUP_Pin|AD9957_CS_Pin|ADF4355_CS_Pin|ADF4355_LE_Pin, GPIO_PIN_SET);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8003f9e:	4864      	ldr	r0, [pc, #400]	; (8004130 <_ZL12MX_GPIO_Initv+0x278>)
 8003fa0:	f001 fe26 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_C_GPIO_Port, SEL_PAATTEN_C_Pin, GPIO_PIN_RESET);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003faa:	4864      	ldr	r0, [pc, #400]	; (800413c <_ZL12MX_GPIO_Initv+0x284>)
 8003fac:	f001 fe20 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEL_PAATTEN_D_Pin|MAX10_CS_Pin, GPIO_PIN_SET);
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fb6:	4861      	ldr	r0, [pc, #388]	; (800413c <_ZL12MX_GPIO_Initv+0x284>)
 8003fb8:	f001 fe1a 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SEL_PAATTEN_A_Pin|ATTEN_0_Pin|ATTEN_1_Pin|ATTEN_2_Pin
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc2:	485f      	ldr	r0, [pc, #380]	; (8004140 <_ZL12MX_GPIO_Initv+0x288>)
 8003fc4:	f001 fe14 	bl	8005bf0 <HAL_GPIO_WritePin>
                          |ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin|ATTEN_6_Pin
                          |ATTEN_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_PAATTEN_B_GPIO_Port, SEL_PAATTEN_B_Pin, GPIO_PIN_SET);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fce:	485c      	ldr	r0, [pc, #368]	; (8004140 <_ZL12MX_GPIO_Initv+0x288>)
 8003fd0:	f001 fe0e 	bl	8005bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_FILTERSEL_V3_Pin RF_FILTERSEL_V4_Pin RF_FILTERSEL_V5_Pin RF_FILTERSEL_V6_Pin
                           AD9957_IOUP_Pin AD9957_CS_Pin AD9957_RESET_Pin AD9957_IORESET_Pin
                           ADF4355_CS_Pin ADF4355_LE_Pin RF_FILTERSEL_V1_Pin RF_FILTERSEL_V2_Pin */
  GPIO_InitStruct.Pin = RF_FILTERSEL_V3_Pin|RF_FILTERSEL_V4_Pin|RF_FILTERSEL_V5_Pin|RF_FILTERSEL_V6_Pin
 8003fd4:	f646 7377 	movw	r3, #28535	; 0x6f77
 8003fd8:	61fb      	str	r3, [r7, #28]
                          |AD9957_IOUP_Pin|AD9957_CS_Pin|AD9957_RESET_Pin|AD9957_IORESET_Pin
                          |ADF4355_CS_Pin|ADF4355_LE_Pin|RF_FILTERSEL_V1_Pin|RF_FILTERSEL_V2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	4850      	ldr	r0, [pc, #320]	; (8004130 <_ZL12MX_GPIO_Initv+0x278>)
 8003fee:	f001 fc65 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004004:	f107 031c 	add.w	r3, r7, #28
 8004008:	4619      	mov	r1, r3
 800400a:	484a      	ldr	r0, [pc, #296]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 800400c:	f001 fc56 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBD_IRQ_Pin TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = KEYBD_IRQ_Pin|TOUCH_IRQ_Pin;
 8004010:	2303      	movs	r3, #3
 8004012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004014:	2300      	movs	r3, #0
 8004016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004018:	2301      	movs	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	4619      	mov	r1, r3
 8004022:	4844      	ldr	r0, [pc, #272]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 8004024:	f001 fc4a 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pin : REF_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = REF_PLL_LOCK_Pin;
 8004028:	2304      	movs	r3, #4
 800402a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(REF_PLL_LOCK_GPIO_Port, &GPIO_InitStruct);
 8004034:	f107 031c 	add.w	r3, r7, #28
 8004038:	4619      	mov	r1, r3
 800403a:	483e      	ldr	r0, [pc, #248]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 800403c:	f001 fc3e 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin;
 8004040:	2316      	movs	r3, #22
 8004042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004044:	2301      	movs	r3, #1
 8004046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	f107 031c 	add.w	r3, r7, #28
 8004054:	4619      	mov	r1, r3
 8004056:	4838      	ldr	r0, [pc, #224]	; (8004138 <_ZL12MX_GPIO_Initv+0x280>)
 8004058:	f001 fc30 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin AD9957_PLL_LOCK_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|AD9957_PLL_LOCK_Pin;
 800405c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8004060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004062:	2300      	movs	r3, #0
 8004064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004066:	2301      	movs	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800406a:	f107 031c 	add.w	r3, r7, #28
 800406e:	4619      	mov	r1, r3
 8004070:	482f      	ldr	r0, [pc, #188]	; (8004130 <_ZL12MX_GPIO_Initv+0x278>)
 8004072:	f001 fc23 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADF4355_MUX_Pin */
  GPIO_InitStruct.Pin = ADF4355_MUX_Pin;
 8004076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407c:	2300      	movs	r3, #0
 800407e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADF4355_MUX_GPIO_Port, &GPIO_InitStruct);
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	4619      	mov	r1, r3
 800408a:	4829      	ldr	r0, [pc, #164]	; (8004130 <_ZL12MX_GPIO_Initv+0x278>)
 800408c:	f001 fc16 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_C_Pin SEL_PAATTEN_D_Pin MAX10_CS_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_C_Pin|SEL_PAATTEN_D_Pin|MAX10_CS_Pin;
 8004090:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004096:	2301      	movs	r3, #1
 8004098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	f107 031c 	add.w	r3, r7, #28
 80040a6:	4619      	mov	r1, r3
 80040a8:	4824      	ldr	r0, [pc, #144]	; (800413c <_ZL12MX_GPIO_Initv+0x284>)
 80040aa:	f001 fc07 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_PAATTEN_A_Pin SEL_PAATTEN_B_Pin ATTEN_0_Pin ATTEN_1_Pin
                           ATTEN_2_Pin ATTEN_3_Pin ATTEN_4_Pin ATTEN_5_Pin
                           ATTEN_6_Pin ATTEN_7_Pin */
  GPIO_InitStruct.Pin = SEL_PAATTEN_A_Pin|SEL_PAATTEN_B_Pin|ATTEN_0_Pin|ATTEN_1_Pin
 80040ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80040b2:	61fb      	str	r3, [r7, #28]
                          |ATTEN_2_Pin|ATTEN_3_Pin|ATTEN_4_Pin|ATTEN_5_Pin
                          |ATTEN_6_Pin|ATTEN_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b4:	2301      	movs	r3, #1
 80040b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040bc:	2303      	movs	r3, #3
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c0:	f107 031c 	add.w	r3, r7, #28
 80040c4:	4619      	mov	r1, r3
 80040c6:	481e      	ldr	r0, [pc, #120]	; (8004140 <_ZL12MX_GPIO_Initv+0x288>)
 80040c8:	f001 fbf8 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_SIGSRC_B_Pin SEL_SIGSRC_A_Pin */
  GPIO_InitStruct.Pin = SEL_SIGSRC_B_Pin|SEL_SIGSRC_A_Pin;
 80040cc:	23c0      	movs	r3, #192	; 0xc0
 80040ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d0:	2301      	movs	r3, #1
 80040d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d8:	2303      	movs	r3, #3
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	4619      	mov	r1, r3
 80040e2:	4814      	ldr	r0, [pc, #80]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 80040e4:	f001 fbea 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 031c 	add.w	r3, r7, #28
 8004102:	4619      	mov	r1, r3
 8004104:	480b      	ldr	r0, [pc, #44]	; (8004134 <_ZL12MX_GPIO_Initv+0x27c>)
 8004106:	f001 fbd9 	bl	80058bc <HAL_GPIO_Init>

  /*Configure GPIO pin : VUSB_SENSE_Pin */
  GPIO_InitStruct.Pin = VUSB_SENSE_Pin;
 800410a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800410e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VUSB_SENSE_GPIO_Port, &GPIO_InitStruct);
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	4619      	mov	r1, r3
 800411e:	4806      	ldr	r0, [pc, #24]	; (8004138 <_ZL12MX_GPIO_Initv+0x280>)
 8004120:	f001 fbcc 	bl	80058bc <HAL_GPIO_Init>

}
 8004124:	bf00      	nop
 8004126:	3730      	adds	r7, #48	; 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40023800 	.word	0x40023800
 8004130:	40021000 	.word	0x40021000
 8004134:	40020800 	.word	0x40020800
 8004138:	40020000 	.word	0x40020000
 800413c:	40020400 	.word	0x40020400
 8004140:	40020c00 	.word	0x40020c00

08004144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <_Z41__static_initialization_and_destruction_0ii>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10a      	bne.n	800417a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800416a:	4293      	cmp	r3, r2
 800416c:	d105      	bne.n	800417a <_Z41__static_initialization_and_destruction_0ii+0x26>
ADF4356_Driver HFSource;
 800416e:	480c      	ldr	r0, [pc, #48]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004170:	f7fd ffea 	bl	8002148 <_ZN14ADF4356_DriverC1Ev>
AD9957_Driver LFSource;
 8004174:	480b      	ldr	r0, [pc, #44]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004176:	f7fc fe3b 	bl	8000df0 <_ZN13AD9957_DriverC1Ev>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004186:	4293      	cmp	r3, r2
 8004188:	d105      	bne.n	8004196 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800418a:	4806      	ldr	r0, [pc, #24]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800418c:	f7fc fe44 	bl	8000e18 <_ZN13AD9957_DriverD1Ev>
ADF4356_Driver HFSource;
 8004190:	4803      	ldr	r0, [pc, #12]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004192:	f7fd ffed 	bl	8002170 <_ZN14ADF4356_DriverD1Ev>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200006b0 	.word	0x200006b0
 80041a4:	20000808 	.word	0x20000808

080041a8 <_GLOBAL__sub_I_hadc1>:
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041b0:	2001      	movs	r0, #1
 80041b2:	f7ff ffcf 	bl	8004154 <_Z41__static_initialization_and_destruction_0ii>
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_GLOBAL__sub_D_hadc1>:
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7ff ffc7 	bl	8004154 <_Z41__static_initialization_and_destruction_0ii>
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_MspInit+0x4c>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <HAL_MspInit+0x4c>)
 80041d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041dc:	6453      	str	r3, [r2, #68]	; 0x44
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_MspInit+0x4c>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_MspInit+0x4c>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_MspInit+0x4c>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_MspInit+0x4c>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <HAL_ADC_MspInit+0x94>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d13c      	bne.n	80042a4 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_ADC_MspInit+0x98>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_ADC_MspInit+0x98>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_ADC_MspInit+0x98>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_ADC_MspInit+0xa0>)
 800424a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004252:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004264:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800426c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004274:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 800427e:	2200      	movs	r2, #0
 8004280:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 8004284:	2200      	movs	r2, #0
 8004286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 800428a:	f001 f82f 	bl	80052ec <HAL_DMA_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8004294:	f7ff ff56 	bl	8004144 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <HAL_ADC_MspInit+0x9c>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40012000 	.word	0x40012000
 80042b0:	40023800 	.word	0x40023800
 80042b4:	20000270 	.word	0x20000270
 80042b8:	40026470 	.word	0x40026470

080042bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <HAL_CRC_MspInit+0x3c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10d      	bne.n	80042ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_CRC_MspInit+0x40>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_CRC_MspInit+0x40>)
 80042d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_CRC_MspInit+0x40>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023000 	.word	0x40023000
 80042fc:	40023800 	.word	0x40023800

08004300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a47      	ldr	r2, [pc, #284]	; (800443c <HAL_I2C_MspInit+0x13c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 8088 	bne.w	8004434 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <HAL_I2C_MspInit+0x140>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	4a44      	ldr	r2, [pc, #272]	; (8004440 <HAL_I2C_MspInit+0x140>)
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	6313      	str	r3, [r2, #48]	; 0x30
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_I2C_MspInit+0x140>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004340:	23c0      	movs	r3, #192	; 0xc0
 8004342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004344:	2312      	movs	r3, #18
 8004346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004348:	2301      	movs	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004350:	2304      	movs	r3, #4
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4619      	mov	r1, r3
 800435a:	483a      	ldr	r0, [pc, #232]	; (8004444 <HAL_I2C_MspInit+0x144>)
 800435c:	f001 faae 	bl	80058bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_I2C_MspInit+0x140>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_I2C_MspInit+0x140>)
 800436a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800436e:	6413      	str	r3, [r2, #64]	; 0x40
 8004370:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_I2C_MspInit+0x140>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_I2C_MspInit+0x148>)
 800437e:	4a33      	ldr	r2, [pc, #204]	; (800444c <HAL_I2C_MspInit+0x14c>)
 8004380:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_I2C_MspInit+0x148>)
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800438a:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_I2C_MspInit+0x148>)
 800438c:	2240      	movs	r2, #64	; 0x40
 800438e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_I2C_MspInit+0x148>)
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <HAL_I2C_MspInit+0x148>)
 8004398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800439c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80043bc:	4822      	ldr	r0, [pc, #136]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043be:	f000 ff95 	bl	80052ec <HAL_DMA_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80043c8:	f7ff febc 	bl	8004144 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043d0:	635a      	str	r2, [r3, #52]	; 0x34
 80043d2:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <HAL_I2C_MspInit+0x148>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_I2C_MspInit+0x154>)
 80043dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_I2C_MspInit+0x150>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_I2C_MspInit+0x150>)
 8004402:	2200      	movs	r2, #0
 8004404:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_I2C_MspInit+0x150>)
 8004408:	2200      	movs	r2, #0
 800440a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_I2C_MspInit+0x150>)
 800440e:	2200      	movs	r2, #0
 8004410:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_I2C_MspInit+0x150>)
 8004414:	2200      	movs	r2, #0
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004418:	480d      	ldr	r0, [pc, #52]	; (8004450 <HAL_I2C_MspInit+0x150>)
 800441a:	f000 ff67 	bl	80052ec <HAL_DMA_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8004424:	f7ff fe8e 	bl	8004144 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_I2C_MspInit+0x150>)
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
 800442e:	4a08      	ldr	r2, [pc, #32]	; (8004450 <HAL_I2C_MspInit+0x150>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004434:	bf00      	nop
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40005400 	.word	0x40005400
 8004440:	40023800 	.word	0x40023800
 8004444:	40020400 	.word	0x40020400
 8004448:	2000032c 	.word	0x2000032c
 800444c:	400260a0 	.word	0x400260a0
 8004450:	2000038c 	.word	0x2000038c
 8004454:	40026010 	.word	0x40026010

08004458 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_RNG_MspInit+0x3c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RNG_MspInit+0x40>)
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RNG_MspInit+0x40>)
 8004474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004478:	6353      	str	r3, [r2, #52]	; 0x34
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <HAL_RNG_MspInit+0x40>)
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	50060800 	.word	0x50060800
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 031c 	add.w	r3, r7, #28
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a8e      	ldr	r2, [pc, #568]	; (80046f4 <HAL_SPI_MspInit+0x258>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f040 8089 	bne.w	80045d2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	4b8c      	ldr	r3, [pc, #560]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	4a8b      	ldr	r2, [pc, #556]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044ce:	6453      	str	r3, [r2, #68]	; 0x44
 80044d0:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a84      	ldr	r2, [pc, #528]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b82      	ldr	r3, [pc, #520]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 80044f8:	23e0      	movs	r3, #224	; 0xe0
 80044fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004504:	2303      	movs	r3, #3
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004508:	2305      	movs	r3, #5
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	4619      	mov	r1, r3
 8004512:	487a      	ldr	r0, [pc, #488]	; (80046fc <HAL_SPI_MspInit+0x260>)
 8004514:	f001 f9d2 	bl	80058bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004518:	4b79      	ldr	r3, [pc, #484]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800451a:	4a7a      	ldr	r2, [pc, #488]	; (8004704 <HAL_SPI_MspInit+0x268>)
 800451c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800451e:	4b78      	ldr	r3, [pc, #480]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004520:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004524:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004526:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800452c:	4b74      	ldr	r3, [pc, #464]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800452e:	2200      	movs	r2, #0
 8004530:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004532:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004538:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800453a:	4b71      	ldr	r3, [pc, #452]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004540:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004546:	4b6e      	ldr	r3, [pc, #440]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004548:	2200      	movs	r2, #0
 800454a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800454c:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800454e:	2200      	movs	r2, #0
 8004550:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004552:	4b6b      	ldr	r3, [pc, #428]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004554:	2200      	movs	r2, #0
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004558:	4869      	ldr	r0, [pc, #420]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800455a:	f000 fec7 	bl	80052ec <HAL_DMA_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004564:	f7ff fdee 	bl	8004144 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a65      	ldr	r2, [pc, #404]	; (8004700 <HAL_SPI_MspInit+0x264>)
 800456c:	64da      	str	r2, [r3, #76]	; 0x4c
 800456e:	4a64      	ldr	r2, [pc, #400]	; (8004700 <HAL_SPI_MspInit+0x264>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004574:	4b64      	ldr	r3, [pc, #400]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 8004576:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_SPI_MspInit+0x270>)
 8004578:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800457a:	4b63      	ldr	r3, [pc, #396]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 800457c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004580:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 8004590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004594:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004596:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045a8:	4b57      	ldr	r3, [pc, #348]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ae:	4b56      	ldr	r3, [pc, #344]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80045b4:	4854      	ldr	r0, [pc, #336]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045b6:	f000 fe99 	bl	80052ec <HAL_DMA_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80045c0:	f7ff fdc0 	bl	8004144 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a50      	ldr	r2, [pc, #320]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045c8:	649a      	str	r2, [r3, #72]	; 0x48
 80045ca:	4a4f      	ldr	r2, [pc, #316]	; (8004708 <HAL_SPI_MspInit+0x26c>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80045d0:	e08c      	b.n	80046ec <HAL_SPI_MspInit+0x250>
  else if(hspi->Instance==SPI2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4e      	ldr	r2, [pc, #312]	; (8004710 <HAL_SPI_MspInit+0x274>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	f040 8087 	bne.w	80046ec <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a44      	ldr	r2, [pc, #272]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80045e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a3d      	ldr	r2, [pc, #244]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_SPI_MspInit+0x25c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004616:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800461a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461c:	2302      	movs	r3, #2
 800461e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004624:	2303      	movs	r3, #3
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004628:	2305      	movs	r3, #5
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	f107 031c 	add.w	r3, r7, #28
 8004630:	4619      	mov	r1, r3
 8004632:	4838      	ldr	r0, [pc, #224]	; (8004714 <HAL_SPI_MspInit+0x278>)
 8004634:	f001 f942 	bl	80058bc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <HAL_SPI_MspInit+0x280>)
 800463c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800464a:	4b33      	ldr	r3, [pc, #204]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800464c:	2200      	movs	r2, #0
 800464e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004656:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800465a:	2200      	movs	r2, #0
 800465c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004664:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004666:	2200      	movs	r2, #0
 8004668:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800466c:	2200      	movs	r2, #0
 800466e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004670:	4b29      	ldr	r3, [pc, #164]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004672:	2200      	movs	r2, #0
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004676:	4828      	ldr	r0, [pc, #160]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 8004678:	f000 fe38 	bl	80052ec <HAL_DMA_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8004682:	f7ff fd5f 	bl	8004144 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a23      	ldr	r2, [pc, #140]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800468a:	64da      	str	r2, [r3, #76]	; 0x4c
 800468c:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_SPI_MspInit+0x27c>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_SPI_MspInit+0x284>)
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_SPI_MspInit+0x288>)
 8004696:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_SPI_MspInit+0x284>)
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80046d0:	4813      	ldr	r0, [pc, #76]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046d2:	f000 fe0b 	bl	80052ec <HAL_DMA_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80046dc:	f7ff fd32 	bl	8004144 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046e4:	649a      	str	r2, [r3, #72]	; 0x48
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <HAL_SPI_MspInit+0x284>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80046ec:	bf00      	nop
 80046ee:	3730      	adds	r7, #48	; 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40013000 	.word	0x40013000
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40020000 	.word	0x40020000
 8004700:	200004ac 	.word	0x200004ac
 8004704:	40026410 	.word	0x40026410
 8004708:	2000050c 	.word	0x2000050c
 800470c:	40026458 	.word	0x40026458
 8004710:	40003800 	.word	0x40003800
 8004714:	40020400 	.word	0x40020400
 8004718:	2000056c 	.word	0x2000056c
 800471c:	40026058 	.word	0x40026058
 8004720:	200005cc 	.word	0x200005cc
 8004724:	40026070 	.word	0x40026070

08004728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0314 	add.w	r3, r7, #20
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_TIM_Base_MspInit+0x84>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d12b      	bne.n	80047a2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_TIM_Base_MspInit+0x88>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = FAN_RPM_Pin;
 8004782:	2302      	movs	r3, #2
 8004784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800478a:	2301      	movs	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478e:	2303      	movs	r3, #3
 8004790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004792:	2302      	movs	r3, #2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_RPM_GPIO_Port, &GPIO_InitStruct);
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	4619      	mov	r1, r3
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <HAL_TIM_Base_MspInit+0x8c>)
 800479e:	f001 f88d 	bl	80058bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047a2:	bf00      	nop
 80047a4:	3728      	adds	r7, #40	; 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40020400 	.word	0x40020400

080047b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a12      	ldr	r2, [pc, #72]	; (8004820 <HAL_TIM_MspPostInit+0x68>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d11d      	bne.n	8004816 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_TIM_MspPostInit+0x6c>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <HAL_TIM_MspPostInit+0x6c>)
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_TIM_MspPostInit+0x6c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80047f6:	2301      	movs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fa:	2302      	movs	r3, #2
 80047fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004802:	2303      	movs	r3, #3
 8004804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004806:	2302      	movs	r3, #2
 8004808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4619      	mov	r1, r3
 8004810:	4805      	ldr	r0, [pc, #20]	; (8004828 <HAL_TIM_MspPostInit+0x70>)
 8004812:	f001 f853 	bl	80058bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004816:	bf00      	nop
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40000400 	.word	0x40000400
 8004824:	40023800 	.word	0x40023800
 8004828:	40020400 	.word	0x40020400

0800482c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004834:	f107 0314 	add.w	r3, r7, #20
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_UART_MspInit+0x84>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12c      	bne.n	80048a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_UART_MspInit+0x88>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_UART_MspInit+0x88>)
 8004858:	f043 0310 	orr.w	r3, r3, #16
 800485c:	6453      	str	r3, [r2, #68]	; 0x44
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_MspInit+0x88>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_UART_MspInit+0x88>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <HAL_UART_MspInit+0x88>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6313      	str	r3, [r2, #48]	; 0x30
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_UART_MspInit+0x88>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004886:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800488a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488c:	2302      	movs	r3, #2
 800488e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004894:	2303      	movs	r3, #3
 8004896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004898:	2307      	movs	r3, #7
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4619      	mov	r1, r3
 80048a2:	4805      	ldr	r0, [pc, #20]	; (80048b8 <HAL_UART_MspInit+0x8c>)
 80048a4:	f001 f80a 	bl	80058bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048a8:	bf00      	nop
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020000 	.word	0x40020000

080048bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048ce:	e7fe      	b.n	80048ce <HardFault_Handler+0x4>

080048d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048d4:	e7fe      	b.n	80048d4 <MemManage_Handler+0x4>

080048d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048da:	e7fe      	b.n	80048da <BusFault_Handler+0x4>

080048dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048e0:	e7fe      	b.n	80048e0 <UsageFault_Handler+0x4>

080048e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004910:	f000 f91a 	bl	8004b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}

08004918 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <DMA1_Stream0_IRQHandler+0x10>)
 800491e:	f000 fd93 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2000038c 	.word	0x2000038c

0800492c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <DMA1_Stream3_IRQHandler+0x10>)
 8004932:	f000 fd89 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2000056c 	.word	0x2000056c

08004940 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004944:	4802      	ldr	r0, [pc, #8]	; (8004950 <DMA1_Stream4_IRQHandler+0x10>)
 8004946:	f000 fd7f 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200005cc 	.word	0x200005cc

08004954 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004958:	4802      	ldr	r0, [pc, #8]	; (8004964 <DMA1_Stream6_IRQHandler+0x10>)
 800495a:	f000 fd75 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	2000032c 	.word	0x2000032c

08004968 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <DMA2_Stream0_IRQHandler+0x10>)
 800496e:	f000 fd6b 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200004ac 	.word	0x200004ac

0800497c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <DMA2_Stream3_IRQHandler+0x10>)
 8004982:	f000 fd61 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000050c 	.word	0x2000050c

08004990 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <DMA2_Stream4_IRQHandler+0x10>)
 8004996:	f000 fd57 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000270 	.word	0x20000270

080049a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <OTG_FS_IRQHandler+0x10>)
 80049aa:	f001 fbf3 	bl	8006194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000df0 	.word	0x20000df0

080049b8 <_sbrk>:
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <_sbrk+0x5c>)
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <_sbrk+0x60>)
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <_sbrk+0x64>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <_sbrk+0x22>
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <_sbrk+0x64>)
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <_sbrk+0x68>)
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <_sbrk+0x64>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d207      	bcs.n	80049f8 <_sbrk+0x40>
 80049e8:	f009 fcc8 	bl	800e37c <__errno>
 80049ec:	4602      	mov	r2, r0
 80049ee:	230c      	movs	r3, #12
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	e009      	b.n	8004a0c <_sbrk+0x54>
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <_sbrk+0x64>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <_sbrk+0x64>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <_sbrk+0x64>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20020000 	.word	0x20020000
 8004a18:	00000400 	.word	0x00000400
 8004a1c:	20000810 	.word	0x20000810
 8004a20:	20001200 	.word	0x20001200

08004a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <SystemInit+0x28>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <SystemInit+0x28>)
 8004a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <SystemInit+0x28>)
 8004a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <Reset_Handler>:
 8004a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a88 <LoopFillZerobss+0x14>
 8004a54:	2100      	movs	r1, #0
 8004a56:	e003      	b.n	8004a60 <LoopCopyDataInit>

08004a58 <CopyDataInit>:
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <LoopFillZerobss+0x18>)
 8004a5a:	585b      	ldr	r3, [r3, r1]
 8004a5c:	5043      	str	r3, [r0, r1]
 8004a5e:	3104      	adds	r1, #4

08004a60 <LoopCopyDataInit>:
 8004a60:	480b      	ldr	r0, [pc, #44]	; (8004a90 <LoopFillZerobss+0x1c>)
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <LoopFillZerobss+0x20>)
 8004a64:	1842      	adds	r2, r0, r1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3f6      	bcc.n	8004a58 <CopyDataInit>
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <LoopFillZerobss+0x24>)
 8004a6c:	e002      	b.n	8004a74 <LoopFillZerobss>

08004a6e <FillZerobss>:
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f842 3b04 	str.w	r3, [r2], #4

08004a74 <LoopFillZerobss>:
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <LoopFillZerobss+0x28>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3f9      	bcc.n	8004a6e <FillZerobss>
 8004a7a:	f7ff ffd3 	bl	8004a24 <SystemInit>
 8004a7e:	f009 fc83 	bl	800e388 <__libc_init_array>
 8004a82:	f7fe fe6d 	bl	8003760 <main>
 8004a86:	4770      	bx	lr
 8004a88:	20020000 	.word	0x20020000
 8004a8c:	0800e6e0 	.word	0x0800e6e0
 8004a90:	20000000 	.word	0x20000000
 8004a94:	20000144 	.word	0x20000144
 8004a98:	20000148 	.word	0x20000148
 8004a9c:	200011fc 	.word	0x200011fc

08004aa0 <ADC_IRQHandler>:
 8004aa0:	e7fe      	b.n	8004aa0 <ADC_IRQHandler>
	...

08004aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_Init+0x40>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_Init+0x40>)
 8004aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_Init+0x40>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_Init+0x40>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_Init+0x40>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_Init+0x40>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 fbaf 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f808 	bl	8004ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ad8:	f7ff fb76 	bl	80041c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00

08004ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <HAL_InitTick+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_InitTick+0x58>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fbc7 	bl	800529a <HAL_SYSTICK_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00e      	b.n	8004b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d80a      	bhi.n	8004b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f000 fb8f 	bl	8005246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <HAL_InitTick+0x5c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000008 	.word	0x20000008
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	2000091c 	.word	0x2000091c

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000091c 	.word	0x2000091c

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_Delay+0x40>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
  {
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000008 	.word	0x20000008

08004bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e033      	b.n	8004c4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fb14 	bl	8004218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d118      	bne.n	8004c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c12:	f023 0302 	bic.w	r3, r3, #2
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f93a 	bl	8004e98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	e001      	b.n	8004c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e105      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x228>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	d925      	bls.n	8004ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	3b1e      	subs	r3, #30
 8004c96:	2207      	movs	r2, #7
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3b1e      	subs	r3, #30
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e022      	b.n	8004d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6919      	ldr	r1, [r3, #16]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	400a      	ands	r2, r1
 8004cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6919      	ldr	r1, [r3, #16]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4403      	add	r3, r0
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d824      	bhi.n	8004d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	3b05      	subs	r3, #5
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	400a      	ands	r2, r1
 8004d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4618      	mov	r0, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	3b05      	subs	r3, #5
 8004d56:	fa00 f203 	lsl.w	r2, r0, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
 8004d62:	e04c      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d824      	bhi.n	8004db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b23      	subs	r3, #35	; 0x23
 8004d7e:	221f      	movs	r2, #31
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43da      	mvns	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b23      	subs	r3, #35	; 0x23
 8004da8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
 8004db4:	e023      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b41      	subs	r3, #65	; 0x41
 8004dc8:	221f      	movs	r2, #31
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4618      	mov	r0, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	3b41      	subs	r3, #65	; 0x41
 8004df2:	fa00 f203 	lsl.w	r2, r0, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_ADC_ConfigChannel+0x234>)
 8004e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <HAL_ADC_ConfigChannel+0x238>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x1cc>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b12      	cmp	r3, #18
 8004e12:	d105      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_ADC_ConfigChannel+0x238>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d123      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x21e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d003      	beq.n	8004e3a <HAL_ADC_ConfigChannel+0x1e6>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b11      	cmp	r3, #17
 8004e38:	d11b      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d111      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HAL_ADC_ConfigChannel+0x23c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <HAL_ADC_ConfigChannel+0x240>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	0c9a      	lsrs	r2, r3, #18
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e64:	e002      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f9      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40012300 	.word	0x40012300
 8004e8c:	40012000 	.word	0x40012000
 8004e90:	20000000 	.word	0x20000000
 8004e94:	431bde83 	.word	0x431bde83

08004e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ea0:	4b79      	ldr	r3, [pc, #484]	; (8005088 <ADC_Init+0x1f0>)
 8004ea2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	4a58      	ldr	r2, [pc, #352]	; (800508c <ADC_Init+0x1f4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	e00f      	b.n	8004f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0202 	bic.w	r2, r2, #2
 8004fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7e1b      	ldrb	r3, [r3, #24]
 8004fb0:	005a      	lsls	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	035a      	lsls	r2, r3, #13
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e007      	b.n	800500c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	3b01      	subs	r3, #1
 8005028:	051a      	lsls	r2, r3, #20
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800504e:	025a      	lsls	r2, r3, #9
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	029a      	lsls	r2, r3, #10
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40012300 	.word	0x40012300
 800508c:	0f000001 	.word	0x0f000001

08005090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	60d3      	str	r3, [r2, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <__NVIC_GetPriorityGrouping+0x18>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 0307 	and.w	r3, r3, #7
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	2b00      	cmp	r3, #0
 8005104:	db0b      	blt.n	800511e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <__NVIC_EnableIRQ+0x38>)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2001      	movs	r0, #1
 8005116:	fa00 f202 	lsl.w	r2, r0, r2
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
         );
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051fc:	d301      	bcc.n	8005202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <SysTick_Config+0x40>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520a:	210f      	movs	r1, #15
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	f7ff ff8e 	bl	8005130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <SysTick_Config+0x40>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <SysTick_Config+0x40>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010

08005230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff29 	bl	8005090 <__NVIC_SetPriorityGrouping>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005258:	f7ff ff3e 	bl	80050d8 <__NVIC_GetPriorityGrouping>
 800525c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff ff8e 	bl	8005184 <NVIC_EncodePriority>
 8005268:	4602      	mov	r2, r0
 800526a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff5d 	bl	8005130 <__NVIC_SetPriority>
}
 8005276:	bf00      	nop
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff31 	bl	80050f4 <__NVIC_EnableIRQ>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ffa2 	bl	80051ec <SysTick_Config>
 80052a8:	4603      	mov	r3, r0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e00e      	b.n	80052e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	795b      	ldrb	r3, [r3, #5]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe fff1 	bl	80042bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7ff fc3a 	bl	8004b70 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e099      	b.n	800543c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005328:	e00f      	b.n	800534a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532a:	f7ff fc21 	bl	8004b70 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b05      	cmp	r3, #5
 8005336:	d908      	bls.n	800534a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2203      	movs	r2, #3
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e078      	b.n	800543c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e8      	bne.n	800532a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HAL_DMA_Init+0x158>)
 8005364:	4013      	ands	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d107      	bne.n	80053b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	4313      	orrs	r3, r2
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d117      	bne.n	800540e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9e9 	bl	80057c8 <DMA_CheckFifoParam>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800540a:	2301      	movs	r3, #1
 800540c:	e016      	b.n	800543c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9a0 	bl	800575c <DMA_CalcBaseAndBitshift>
 800541c:	4603      	mov	r3, r0
 800541e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	223f      	movs	r2, #63	; 0x3f
 8005426:	409a      	lsls	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	f010803f 	.word	0xf010803f

08005448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005454:	4b92      	ldr	r3, [pc, #584]	; (80056a0 <HAL_DMA_IRQHandler+0x258>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a92      	ldr	r2, [pc, #584]	; (80056a4 <HAL_DMA_IRQHandler+0x25c>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	2208      	movs	r2, #8
 8005474:	409a      	lsls	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01a      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0204 	bic.w	r2, r2, #4
 800549a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	2208      	movs	r2, #8
 80054a2:	409a      	lsls	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2201      	movs	r2, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2204      	movs	r2, #4
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	2204      	movs	r2, #4
 800550e:	409a      	lsls	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	2210      	movs	r2, #16
 8005526:	409a      	lsls	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d043      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	2210      	movs	r2, #16
 8005544:	409a      	lsls	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d018      	beq.n	800558a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d024      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
 8005576:	e01f      	b.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
 8005588:	e016      	b.n	80055b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0208 	bic.w	r2, r2, #8
 80055a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	2220      	movs	r2, #32
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 808e 	beq.w	80056e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	2220      	movs	r2, #32
 80055e0:	409a      	lsls	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d136      	bne.n	8005660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0216 	bic.w	r2, r2, #22
 8005600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <HAL_DMA_IRQHandler+0x1da>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0208 	bic.w	r2, r2, #8
 8005630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	223f      	movs	r2, #63	; 0x3f
 8005638:	409a      	lsls	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d07d      	beq.n	8005752 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
        }
        return;
 800565e:	e078      	b.n	8005752 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01c      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d030      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
 800568c:	e02b      	b.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e022      	b.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
 80056a0:	20000000 	.word	0x20000000
 80056a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0210 	bic.w	r2, r2, #16
 80056c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d032      	beq.n	8005754 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d022      	beq.n	8005740 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2205      	movs	r2, #5
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3301      	adds	r3, #1
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d307      	bcc.n	800572e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f2      	bne.n	8005712 <HAL_DMA_IRQHandler+0x2ca>
 800572c:	e000      	b.n	8005730 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800572e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	e000      	b.n	8005754 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005752:	bf00      	nop
    }
  }
}
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop

0800575c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3b10      	subs	r3, #16
 800576c:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <DMA_CalcBaseAndBitshift+0x64>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <DMA_CalcBaseAndBitshift+0x68>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d909      	bls.n	800579e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	659a      	str	r2, [r3, #88]	; 0x58
 800579c:	e007      	b.n	80057ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	aaaaaaab 	.word	0xaaaaaaab
 80057c4:	0800e678 	.word	0x0800e678

080057c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11f      	bne.n	8005822 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d855      	bhi.n	8005894 <DMA_CheckFifoParam+0xcc>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <DMA_CheckFifoParam+0x28>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005813 	.word	0x08005813
 80057f8:	08005801 	.word	0x08005801
 80057fc:	08005895 	.word	0x08005895
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d045      	beq.n	8005898 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e042      	b.n	8005898 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800581a:	d13f      	bne.n	800589c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005820:	e03c      	b.n	800589c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	d121      	bne.n	8005870 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d836      	bhi.n	80058a0 <DMA_CheckFifoParam+0xd8>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <DMA_CheckFifoParam+0x70>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005849 	.word	0x08005849
 800583c:	0800584f 	.word	0x0800584f
 8005840:	08005849 	.word	0x08005849
 8005844:	08005861 	.word	0x08005861
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
      break;
 800584c:	e02f      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d024      	beq.n	80058a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585e:	e021      	b.n	80058a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005868:	d11e      	bne.n	80058a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800586e:	e01b      	b.n	80058a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <DMA_CheckFifoParam+0xb4>
 8005876:	2b03      	cmp	r3, #3
 8005878:	d003      	beq.n	8005882 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800587a:	e018      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      break;
 8005880:	e015      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00e      	beq.n	80058ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
      break;
 8005892:	e00b      	b.n	80058ac <DMA_CheckFifoParam+0xe4>
      break;
 8005894:	bf00      	nop
 8005896:	e00a      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;
 8005898:	bf00      	nop
 800589a:	e008      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;
 800589c:	bf00      	nop
 800589e:	e006      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;
 80058a0:	bf00      	nop
 80058a2:	e004      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;
 80058a4:	bf00      	nop
 80058a6:	e002      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;   
 80058a8:	bf00      	nop
 80058aa:	e000      	b.n	80058ae <DMA_CheckFifoParam+0xe6>
      break;
 80058ac:	bf00      	nop
    }
  } 
  
  return status; 
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058bc:	b480      	push	{r7}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e16b      	b.n	8005bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058d8:	2201      	movs	r2, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	f040 815a 	bne.w	8005baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d00b      	beq.n	8005916 <HAL_GPIO_Init+0x5a>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d007      	beq.n	8005916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800590a:	2b11      	cmp	r3, #17
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b12      	cmp	r3, #18
 8005914:	d130      	bne.n	8005978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800594c:	2201      	movs	r2, #1
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 0201 	and.w	r2, r3, #1
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0xfc>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b12      	cmp	r3, #18
 80059b6:	d123      	bne.n	8005a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	08da      	lsrs	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3208      	adds	r2, #8
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	08da      	lsrs	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0203 	and.w	r2, r3, #3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80b4 	beq.w	8005baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	4b5f      	ldr	r3, [pc, #380]	; (8005bc4 <HAL_GPIO_Init+0x308>)
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	4a5e      	ldr	r2, [pc, #376]	; (8005bc4 <HAL_GPIO_Init+0x308>)
 8005a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a50:	6453      	str	r3, [r2, #68]	; 0x44
 8005a52:	4b5c      	ldr	r3, [pc, #368]	; (8005bc4 <HAL_GPIO_Init+0x308>)
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a5e:	4a5a      	ldr	r2, [pc, #360]	; (8005bc8 <HAL_GPIO_Init+0x30c>)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	3302      	adds	r3, #2
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a51      	ldr	r2, [pc, #324]	; (8005bcc <HAL_GPIO_Init+0x310>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02b      	beq.n	8005ae2 <HAL_GPIO_Init+0x226>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a50      	ldr	r2, [pc, #320]	; (8005bd0 <HAL_GPIO_Init+0x314>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d025      	beq.n	8005ade <HAL_GPIO_Init+0x222>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a4f      	ldr	r2, [pc, #316]	; (8005bd4 <HAL_GPIO_Init+0x318>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <HAL_GPIO_Init+0x21e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a4e      	ldr	r2, [pc, #312]	; (8005bd8 <HAL_GPIO_Init+0x31c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d019      	beq.n	8005ad6 <HAL_GPIO_Init+0x21a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a4d      	ldr	r2, [pc, #308]	; (8005bdc <HAL_GPIO_Init+0x320>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_GPIO_Init+0x216>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a4c      	ldr	r2, [pc, #304]	; (8005be0 <HAL_GPIO_Init+0x324>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00d      	beq.n	8005ace <HAL_GPIO_Init+0x212>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a4b      	ldr	r2, [pc, #300]	; (8005be4 <HAL_GPIO_Init+0x328>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <HAL_GPIO_Init+0x20e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <HAL_GPIO_Init+0x32c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <HAL_GPIO_Init+0x20a>
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	e00e      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	e00c      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005aca:	2306      	movs	r3, #6
 8005acc:	e00a      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ace:	2305      	movs	r3, #5
 8005ad0:	e008      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ad2:	2304      	movs	r3, #4
 8005ad4:	e006      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e004      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e002      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_GPIO_Init+0x228>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	f002 0203 	and.w	r2, r2, #3
 8005aea:	0092      	lsls	r2, r2, #2
 8005aec:	4093      	lsls	r3, r2
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005af4:	4934      	ldr	r1, [pc, #208]	; (8005bc8 <HAL_GPIO_Init+0x30c>)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	3302      	adds	r3, #2
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b02:	4b3a      	ldr	r3, [pc, #232]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b26:	4a31      	ldr	r2, [pc, #196]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b2c:	4b2f      	ldr	r3, [pc, #188]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b56:	4b25      	ldr	r3, [pc, #148]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b7a:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <HAL_GPIO_Init+0x330>)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	f67f ae90 	bls.w	80058d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005bb8:	bf00      	nop
 8005bba:	3724      	adds	r7, #36	; 0x24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	40020000 	.word	0x40020000
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020800 	.word	0x40020800
 8005bd8:	40020c00 	.word	0x40020c00
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40021400 	.word	0x40021400
 8005be4:	40021800 	.word	0x40021800
 8005be8:	40021c00 	.word	0x40021c00
 8005bec:	40013c00 	.word	0x40013c00

08005bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	807b      	strh	r3, [r7, #2]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c00:	787b      	ldrb	r3, [r7, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c06:	887a      	ldrh	r2, [r7, #2]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c0c:	e003      	b.n	8005c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	041a      	lsls	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	619a      	str	r2, [r3, #24]
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e11f      	b.n	8005e76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fe fb58 	bl	8004300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c88:	f001 fef8 	bl	8007a7c <HAL_RCC_GetPCLK1Freq>
 8005c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4a7b      	ldr	r2, [pc, #492]	; (8005e80 <HAL_I2C_Init+0x25c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d807      	bhi.n	8005ca8 <HAL_I2C_Init+0x84>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a7a      	ldr	r2, [pc, #488]	; (8005e84 <HAL_I2C_Init+0x260>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bf94      	ite	ls
 8005ca0:	2301      	movls	r3, #1
 8005ca2:	2300      	movhi	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e006      	b.n	8005cb6 <HAL_I2C_Init+0x92>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a77      	ldr	r2, [pc, #476]	; (8005e88 <HAL_I2C_Init+0x264>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bf94      	ite	ls
 8005cb0:	2301      	movls	r3, #1
 8005cb2:	2300      	movhi	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0db      	b.n	8005e76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a72      	ldr	r2, [pc, #456]	; (8005e8c <HAL_I2C_Init+0x268>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0c9b      	lsrs	r3, r3, #18
 8005cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a64      	ldr	r2, [pc, #400]	; (8005e80 <HAL_I2C_Init+0x25c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d802      	bhi.n	8005cf8 <HAL_I2C_Init+0xd4>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	e009      	b.n	8005d0c <HAL_I2C_Init+0xe8>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	4a63      	ldr	r2, [pc, #396]	; (8005e90 <HAL_I2C_Init+0x26c>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	099b      	lsrs	r3, r3, #6
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	4956      	ldr	r1, [pc, #344]	; (8005e80 <HAL_I2C_Init+0x25c>)
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	d80d      	bhi.n	8005d48 <HAL_I2C_Init+0x124>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1e59      	subs	r1, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	bf38      	it	cc
 8005d44:	2304      	movcc	r3, #4
 8005d46:	e04f      	b.n	8005de8 <HAL_I2C_Init+0x1c4>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d111      	bne.n	8005d74 <HAL_I2C_Init+0x150>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1e58      	subs	r0, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	440b      	add	r3, r1
 8005d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d62:	3301      	adds	r3, #1
 8005d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e012      	b.n	8005d9a <HAL_I2C_Init+0x176>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1e58      	subs	r0, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	0099      	lsls	r1, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Init+0x17e>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e022      	b.n	8005de8 <HAL_I2C_Init+0x1c4>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10e      	bne.n	8005dc8 <HAL_I2C_Init+0x1a4>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1e58      	subs	r0, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	440b      	add	r3, r1
 8005db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	e00f      	b.n	8005de8 <HAL_I2C_Init+0x1c4>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1e58      	subs	r0, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	0099      	lsls	r1, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dde:	3301      	adds	r3, #1
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	6809      	ldr	r1, [r1, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6911      	ldr	r1, [r2, #16]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	4311      	orrs	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	000186a0 	.word	0x000186a0
 8005e84:	001e847f 	.word	0x001e847f
 8005e88:	003d08ff 	.word	0x003d08ff
 8005e8c:	431bde83 	.word	0x431bde83
 8005e90:	10624dd3 	.word	0x10624dd3

08005e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b08f      	sub	sp, #60	; 0x3c
 8005e98:	af0a      	add	r7, sp, #40	; 0x28
 8005e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e10f      	b.n	80060c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f006 ff1b 	bl	800ccfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f003 fca8 	bl	800983a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	687e      	ldr	r6, [r7, #4]
 8005ef2:	466d      	mov	r5, sp
 8005ef4:	f106 0410 	add.w	r4, r6, #16
 8005ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f08:	1d33      	adds	r3, r6, #4
 8005f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f0c:	6838      	ldr	r0, [r7, #0]
 8005f0e:	f003 fb7f 	bl	8009610 <USB_CoreInit>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0d0      	b.n	80060c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f003 fc96 	bl	800985c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
 8005f34:	e04a      	b.n	8005fcc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	333d      	adds	r3, #61	; 0x3d
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	333c      	adds	r3, #60	; 0x3c
 8005f5a:	7bfa      	ldrb	r2, [r7, #15]
 8005f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f5e:	7bfa      	ldrb	r2, [r7, #15]
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	b298      	uxth	r0, r3
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	3342      	adds	r3, #66	; 0x42
 8005f72:	4602      	mov	r2, r0
 8005f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	333f      	adds	r3, #63	; 0x3f
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f8a:	7bfa      	ldrb	r2, [r7, #15]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3344      	adds	r3, #68	; 0x44
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3348      	adds	r3, #72	; 0x48
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3350      	adds	r3, #80	; 0x50
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	7bfa      	ldrb	r2, [r7, #15]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3af      	bcc.n	8005f36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	e044      	b.n	8006066 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fdc:	7bfa      	ldrb	r2, [r7, #15]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ff2:	7bfa      	ldrb	r2, [r7, #15]
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006004:	7bfa      	ldrb	r2, [r7, #15]
 8006006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006008:	7bfa      	ldrb	r2, [r7, #15]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800601e:	7bfa      	ldrb	r2, [r7, #15]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	3301      	adds	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d3b5      	bcc.n	8005fdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	687e      	ldr	r6, [r7, #4]
 8006078:	466d      	mov	r5, sp
 800607a:	f106 0410 	add.w	r4, r6, #16
 800607e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800608a:	e885 0003 	stmia.w	r5, {r0, r1}
 800608e:	1d33      	adds	r3, r6, #4
 8006090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006092:	6838      	ldr	r0, [r7, #0]
 8006094:	f003 fc0c 	bl	80098b0 <USB_DevInit>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e00d      	b.n	80060c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 fbbe 	bl	800a840 <USB_DevDisconnect>

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_PCD_Start+0x1c>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e020      	b.n	800612c <HAL_PCD_Start+0x5e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d109      	bne.n	800610e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d005      	beq.n	800610e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f004 fb7c 	bl	800a810 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f003 fb7b 	bl	8009818 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_PCD_Stop+0x16>
 8006146:	2302      	movs	r3, #2
 8006148:	e020      	b.n	800618c <HAL_PCD_Stop+0x58>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fb6f 	bl	800983a <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f004 fae0 	bl	800a726 <USB_StopDevice>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e009      	b.n	800618c <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f004 fb5f 	bl	800a840 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b08d      	sub	sp, #52	; 0x34
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fbf3 	bl	800a996 <USB_GetMode>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 839d 	bne.w	80068f2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 fb57 	bl	800a870 <USB_ReadInterrupts>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8393 	beq.w	80068f0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 fb4e 	bl	800a870 <USB_ReadInterrupts>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d107      	bne.n	80061ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f002 0202 	and.w	r2, r2, #2
 80061ec:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f004 fb3c 	bl	800a870 <USB_ReadInterrupts>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d161      	bne.n	80062c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0210 	bic.w	r2, r2, #16
 8006210:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	4613      	mov	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	3304      	adds	r3, #4
 8006230:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	0c5b      	lsrs	r3, r3, #17
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	2b02      	cmp	r3, #2
 800623c:	d124      	bne.n	8006288 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d035      	beq.n	80062b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6a38      	ldr	r0, [r7, #32]
 800625e:	f004 f965 	bl	800a52c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626e:	441a      	add	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006280:	441a      	add	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	619a      	str	r2, [r3, #24]
 8006286:	e016      	b.n	80062b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	0c5b      	lsrs	r3, r3, #17
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	2b06      	cmp	r3, #6
 8006292:	d110      	bne.n	80062b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800629a:	2208      	movs	r2, #8
 800629c:	4619      	mov	r1, r3
 800629e:	6a38      	ldr	r0, [r7, #32]
 80062a0:	f004 f944 	bl	800a52c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b0:	441a      	add	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0210 	orr.w	r2, r2, #16
 80062c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f004 fad0 	bl	800a870 <USB_ReadInterrupts>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062da:	d16e      	bne.n	80063ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f004 fad6 	bl	800a896 <USB_ReadDevAllOutEpInterrupt>
 80062ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80062ec:	e062      	b.n	80063b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d057      	beq.n	80063a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f004 fafb 	bl	800a8fe <USB_ReadDevOutEPInterrupt>
 8006308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2301      	movs	r3, #1
 8006324:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fd4f 	bl	8006dcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	461a      	mov	r2, r3
 8006346:	2308      	movs	r3, #8
 8006348:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800634a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fe49 	bl	8006fe4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	2310      	movs	r3, #16
 800636c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	2320      	movs	r3, #32
 8006388:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	3301      	adds	r3, #1
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d199      	bne.n	80062ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f004 fa56 	bl	800a870 <USB_ReadInterrupts>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ce:	f040 80c0 	bne.w	8006552 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 fa77 	bl	800a8ca <USB_ReadDevAllInEpInterrupt>
 80063dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063e2:	e0b2      	b.n	800654a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80a7 	beq.w	800653e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f004 fa9d 	bl	800a93a <USB_ReadDevInEPInterrupt>
 8006400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d057      	beq.n	80064bc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	43db      	mvns	r3, r3
 8006426:	69f9      	ldr	r1, [r7, #28]
 8006428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642c:	4013      	ands	r3, r2
 800642e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	2301      	movs	r3, #1
 8006440:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d132      	bne.n	80064b0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	3348      	adds	r3, #72	; 0x48
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4403      	add	r3, r0
 800646a:	3344      	adds	r3, #68	; 0x44
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4419      	add	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4403      	add	r3, r0
 800647e:	3348      	adds	r3, #72	; 0x48
 8006480:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d113      	bne.n	80064b0 <HAL_PCD_IRQHandler+0x31c>
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	1a9b      	subs	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	3350      	adds	r3, #80	; 0x50
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d108      	bne.n	80064b0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064a8:	461a      	mov	r2, r3
 80064aa:	2101      	movs	r1, #1
 80064ac:	f004 faa4 	bl	800a9f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f006 fca1 	bl	800cdfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2308      	movs	r3, #8
 80064d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	461a      	mov	r2, r3
 80064f0:	2310      	movs	r3, #16
 80064f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	461a      	mov	r2, r3
 800650c:	2340      	movs	r3, #64	; 0x40
 800650e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	461a      	mov	r2, r3
 8006528:	2302      	movs	r3, #2
 800652a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbb9 	bl	8006cb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	3301      	adds	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f af49 	bne.w	80063e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f004 f98a 	bl	800a870 <USB_ReadInterrupts>
 800655c:	4603      	mov	r3, r0
 800655e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006566:	d122      	bne.n	80065ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006582:	2b01      	cmp	r3, #1
 8006584:	d108      	bne.n	8006598 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fdc5 	bl	8007120 <HAL_PCDEx_LPM_Callback>
 8006596:	e002      	b.n	800659e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f006 fca7 	bl	800ceec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f004 f95c 	bl	800a870 <USB_ReadInterrupts>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c2:	d112      	bne.n	80065ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d102      	bne.n	80065da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f006 fc63 	bl	800cea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065e8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f004 f93e 	bl	800a870 <USB_ReadInterrupts>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	f040 80c7 	bne.w	8006790 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2110      	movs	r1, #16
 800661c:	4618      	mov	r0, r3
 800661e:	f003 faab 	bl	8009b78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e056      	b.n	80066d6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	461a      	mov	r2, r3
 8006636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800663a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800665a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800667a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	461a      	mov	r2, r3
 800668a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800668e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	3301      	adds	r3, #1
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d3a3      	bcc.n	8006628 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d016      	beq.n	800672a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670c:	f043 030b 	orr.w	r3, r3, #11
 8006710:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006722:	f043 030b 	orr.w	r3, r3, #11
 8006726:	6453      	str	r3, [r2, #68]	; 0x44
 8006728:	e015      	b.n	8006756 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800673c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006740:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006750:	f043 030b 	orr.w	r3, r3, #11
 8006754:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006764:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006768:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800677a:	461a      	mov	r2, r3
 800677c:	f004 f93c 	bl	800a9f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800678e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f004 f86b 	bl	800a870 <USB_ReadInterrupts>
 800679a:	4603      	mov	r3, r0
 800679c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d124      	bne.n	80067f0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 f901 	bl	800a9b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f003 fa40 	bl	8009c3a <USB_GetDevSpeed>
 80067ba:	4603      	mov	r3, r0
 80067bc:	461a      	mov	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681c      	ldr	r4, [r3, #0]
 80067c6:	f001 f94d 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 80067ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	4620      	mov	r0, r4
 80067d6:	f002 ff7d 	bl	80096d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f006 fb37 	bl	800ce4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f004 f83b 	bl	800a870 <USB_ReadInterrupts>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b08      	cmp	r3, #8
 8006802:	d10a      	bne.n	800681a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f006 fb14 	bl	800ce32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f002 0208 	and.w	r2, r2, #8
 8006818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f004 f826 	bl	800a870 <USB_ReadInterrupts>
 8006824:	4603      	mov	r3, r0
 8006826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682e:	d10f      	bne.n	8006850 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f006 fb76 	bl	800cf2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800684e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f004 f80b 	bl	800a870 <USB_ReadInterrupts>
 800685a:	4603      	mov	r3, r0
 800685c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006864:	d10f      	bne.n	8006886 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	b2db      	uxtb	r3, r3
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f006 fb49 	bl	800cf08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f003 fff0 	bl	800a870 <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d10a      	bne.n	80068b2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f006 fb57 	bl	800cf50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f003 ffda 	bl	800a870 <USB_ReadInterrupts>
 80068bc:	4603      	mov	r3, r0
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d115      	bne.n	80068f2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f006 fb47 	bl	800cf6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	e000      	b.n	80068f2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80068f0:	bf00      	nop
    }
  }
}
 80068f2:	3734      	adds	r7, #52	; 0x34
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_PCD_SetAddress+0x1a>
 800690e:	2302      	movs	r3, #2
 8006910:	e013      	b.n	800693a <HAL_PCD_SetAddress+0x42>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	4611      	mov	r1, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f003 ff4a 	bl	800a7c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	4608      	mov	r0, r1
 800694c:	4611      	mov	r1, r2
 800694e:	461a      	mov	r2, r3
 8006950:	4603      	mov	r3, r0
 8006952:	70fb      	strb	r3, [r7, #3]
 8006954:	460b      	mov	r3, r1
 8006956:	803b      	strh	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006964:	2b00      	cmp	r3, #0
 8006966:	da0f      	bge.n	8006988 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	3338      	adds	r3, #56	; 0x38
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	3304      	adds	r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	705a      	strb	r2, [r3, #1]
 8006986:	e00f      	b.n	80069a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 020f 	and.w	r2, r3, #15
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	3304      	adds	r3, #4
 80069a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069b4:	883a      	ldrh	r2, [r7, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	78ba      	ldrb	r2, [r7, #2]
 80069be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069d2:	78bb      	ldrb	r3, [r7, #2]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d102      	bne.n	80069de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_PCD_EP_Open+0xaa>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e00e      	b.n	8006a0a <HAL_PCD_EP_Open+0xc8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f003 f942 	bl	8009c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	3304      	adds	r3, #4
 8006a3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6979      	ldr	r1, [r7, #20]
 8006a86:	f003 fbc9 	bl	800a21c <USB_EP0StartXfer>
 8006a8a:	e008      	b.n	8006a9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	f003 f97b 	bl	8009d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	4613      	mov	r3, r2
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	3338      	adds	r3, #56	; 0x38
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d102      	bne.n	8006b02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	f003 fb7f 	bl	800a21c <USB_EP0StartXfer>
 8006b1e:	e008      	b.n	8006b32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6979      	ldr	r1, [r7, #20]
 8006b2e:	f003 f931 	bl	8009d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 020f 	and.w	r2, r3, #15
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d901      	bls.n	8006b5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e050      	b.n	8006bfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da0f      	bge.n	8006b82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	4613      	mov	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3338      	adds	r3, #56	; 0x38
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	705a      	strb	r2, [r3, #1]
 8006b80:	e00d      	b.n	8006b9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	3304      	adds	r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_PCD_EP_SetStall+0x82>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e01e      	b.n	8006bfc <HAL_PCD_EP_SetStall+0xc0>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f003 fcd6 	bl	800a57e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	b2d9      	uxtb	r1, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bec:	461a      	mov	r2, r3
 8006bee:	f003 ff03 	bl	800a9f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d901      	bls.n	8006c22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e042      	b.n	8006ca8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da0f      	bge.n	8006c4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	4613      	mov	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	3338      	adds	r3, #56	; 0x38
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	705a      	strb	r2, [r3, #1]
 8006c48:	e00f      	b.n	8006c6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	4613      	mov	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	4413      	add	r3, r2
 8006c60:	3304      	adds	r3, #4
 8006c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_PCD_EP_ClrStall+0x86>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e00e      	b.n	8006ca8 <HAL_PCD_EP_ClrStall+0xa4>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f003 fcde 	bl	800a65a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	3338      	adds	r3, #56	; 0x38
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d901      	bls.n	8006ce8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e06c      	b.n	8006dc2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d902      	bls.n	8006d04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3303      	adds	r3, #3
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d0c:	e02b      	b.n	8006d66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d902      	bls.n	8006d2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3303      	adds	r3, #3
 8006d2e:	089b      	lsrs	r3, r3, #2
 8006d30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68d9      	ldr	r1, [r3, #12]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	6978      	ldr	r0, [r7, #20]
 8006d4a:	f003 fbba 	bl	800a4c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d809      	bhi.n	8006d90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d203      	bcs.n	8006d90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1be      	bne.n	8006d0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d811      	bhi.n	8006dc0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	2201      	movs	r2, #1
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	333c      	adds	r3, #60	; 0x3c
 8006de4:	3304      	adds	r3, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	f040 80a0 	bne.w	8006f44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a72      	ldr	r2, [pc, #456]	; (8006fdc <PCD_EP_OutXfrComplete_int+0x210>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	f240 80dd 	bls.w	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80d7 	beq.w	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	461a      	mov	r2, r3
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	6093      	str	r3, [r2, #8]
 8006e38:	e0cb      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e50:	461a      	mov	r2, r3
 8006e52:	2320      	movs	r3, #32
 8006e54:	6093      	str	r3, [r2, #8]
 8006e56:	e0bc      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 80b7 	bne.w	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a5d      	ldr	r2, [pc, #372]	; (8006fdc <PCD_EP_OutXfrComplete_int+0x210>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d90f      	bls.n	8006e8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e82:	461a      	mov	r2, r3
 8006e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e88:	6093      	str	r3, [r2, #8]
 8006e8a:	e0a2      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	0159      	lsls	r1, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006eb2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4403      	add	r3, r0
 8006ec2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ec6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006eda:	6819      	ldr	r1, [r3, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4403      	add	r3, r0
 8006eea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4419      	add	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4403      	add	r3, r0
 8006f00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d114      	bne.n	8006f36 <PCD_EP_OutXfrComplete_int+0x16a>
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2101      	movs	r1, #1
 8006f32:	f003 fd61 	bl	800a9f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f005 ff43 	bl	800cdc8 <HAL_PCD_DataOutStageCallback>
 8006f42:	e046      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d124      	bne.n	8006f96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	461a      	mov	r2, r3
 8006f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f68:	6093      	str	r3, [r2, #8]
 8006f6a:	e032      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	2320      	movs	r3, #32
 8006f86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f005 ff1a 	bl	800cdc8 <HAL_PCD_DataOutStageCallback>
 8006f94:	e01d      	b.n	8006fd2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d114      	bne.n	8006fc6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f003 fd19 	bl	800a9f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f005 fefb 	bl	800cdc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	4f54300a 	.word	0x4f54300a
 8006fe0:	4f54310a 	.word	0x4f54310a

08006fe4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	333c      	adds	r3, #60	; 0x3c
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <PCD_EP_OutSetupPacket_int+0x88>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d90e      	bls.n	8007038 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007036:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f005 feb3 	bl	800cda4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <PCD_EP_OutSetupPacket_int+0x88>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d90c      	bls.n	8007060 <PCD_EP_OutSetupPacket_int+0x7c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d108      	bne.n	8007060 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007058:	461a      	mov	r2, r3
 800705a:	2101      	movs	r1, #1
 800705c:	f003 fccc 	bl	800a9f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	4f54300a 	.word	0x4f54300a

08007070 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
 800707c:	4613      	mov	r3, r2
 800707e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800708e:	883b      	ldrh	r3, [r7, #0]
 8007090:	0419      	lsls	r1, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	430a      	orrs	r2, r1
 800709a:	629a      	str	r2, [r3, #40]	; 0x28
 800709c:	e028      	b.n	80070f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
 80070b0:	e00d      	b.n	80070ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	3340      	adds	r3, #64	; 0x40
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	3301      	adds	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	7bfa      	ldrb	r2, [r7, #15]
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3ec      	bcc.n	80070b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80070d8:	883b      	ldrh	r3, [r7, #0]
 80070da:	0418      	lsls	r0, r3, #16
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	4302      	orrs	r2, r0
 80070e8:	3340      	adds	r3, #64	; 0x40
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	887a      	ldrh	r2, [r7, #2]
 8007110:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e25b      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d075      	beq.n	8007242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007156:	4ba3      	ldr	r3, [pc, #652]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b04      	cmp	r3, #4
 8007160:	d00c      	beq.n	800717c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007162:	4ba0      	ldr	r3, [pc, #640]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800716a:	2b08      	cmp	r3, #8
 800716c:	d112      	bne.n	8007194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800716e:	4b9d      	ldr	r3, [pc, #628]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800717a:	d10b      	bne.n	8007194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800717c:	4b99      	ldr	r3, [pc, #612]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d05b      	beq.n	8007240 <HAL_RCC_OscConfig+0x108>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d157      	bne.n	8007240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e236      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800719c:	d106      	bne.n	80071ac <HAL_RCC_OscConfig+0x74>
 800719e:	4b91      	ldr	r3, [pc, #580]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a90      	ldr	r2, [pc, #576]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e01d      	b.n	80071e8 <HAL_RCC_OscConfig+0xb0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b4:	d10c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x98>
 80071b6:	4b8b      	ldr	r3, [pc, #556]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a8a      	ldr	r2, [pc, #552]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	4b88      	ldr	r3, [pc, #544]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a87      	ldr	r2, [pc, #540]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e00b      	b.n	80071e8 <HAL_RCC_OscConfig+0xb0>
 80071d0:	4b84      	ldr	r3, [pc, #528]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a83      	ldr	r2, [pc, #524]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	4b81      	ldr	r3, [pc, #516]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a80      	ldr	r2, [pc, #512]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80071e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d013      	beq.n	8007218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f0:	f7fd fcbe 	bl	8004b70 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f8:	f7fd fcba 	bl	8004b70 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b64      	cmp	r3, #100	; 0x64
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e1fb      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800720a:	4b76      	ldr	r3, [pc, #472]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0xc0>
 8007216:	e014      	b.n	8007242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007218:	f7fd fcaa 	bl	8004b70 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007220:	f7fd fca6 	bl	8004b70 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b64      	cmp	r3, #100	; 0x64
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e1e7      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007232:	4b6c      	ldr	r3, [pc, #432]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f0      	bne.n	8007220 <HAL_RCC_OscConfig+0xe8>
 800723e:	e000      	b.n	8007242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d063      	beq.n	8007316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800724e:	4b65      	ldr	r3, [pc, #404]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 030c 	and.w	r3, r3, #12
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800725a:	4b62      	ldr	r3, [pc, #392]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007262:	2b08      	cmp	r3, #8
 8007264:	d11c      	bne.n	80072a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007266:	4b5f      	ldr	r3, [pc, #380]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d116      	bne.n	80072a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007272:	4b5c      	ldr	r3, [pc, #368]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_RCC_OscConfig+0x152>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d001      	beq.n	800728a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e1bb      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800728a:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4952      	ldr	r1, [pc, #328]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800729a:	4313      	orrs	r3, r2
 800729c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800729e:	e03a      	b.n	8007316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d020      	beq.n	80072ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a8:	4b4f      	ldr	r3, [pc, #316]	; (80073e8 <HAL_RCC_OscConfig+0x2b0>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fd fc5f 	bl	8004b70 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b6:	f7fd fc5b 	bl	8004b70 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e19c      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c8:	4b46      	ldr	r3, [pc, #280]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d4:	4b43      	ldr	r3, [pc, #268]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	4940      	ldr	r1, [pc, #256]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	600b      	str	r3, [r1, #0]
 80072e8:	e015      	b.n	8007316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ea:	4b3f      	ldr	r3, [pc, #252]	; (80073e8 <HAL_RCC_OscConfig+0x2b0>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fd fc3e 	bl	8004b70 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072f8:	f7fd fc3a 	bl	8004b70 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e17b      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800730a:	4b36      	ldr	r3, [pc, #216]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d030      	beq.n	8007384 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800732a:	4b30      	ldr	r3, [pc, #192]	; (80073ec <HAL_RCC_OscConfig+0x2b4>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fd fc1e 	bl	8004b70 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007338:	f7fd fc1a 	bl	8004b70 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e15b      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800734c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f0      	beq.n	8007338 <HAL_RCC_OscConfig+0x200>
 8007356:	e015      	b.n	8007384 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007358:	4b24      	ldr	r3, [pc, #144]	; (80073ec <HAL_RCC_OscConfig+0x2b4>)
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735e:	f7fd fc07 	bl	8004b70 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007366:	f7fd fc03 	bl	8004b70 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e144      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007378:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80a0 	beq.w	80074d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10f      	bne.n	80073c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80073ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b0:	6413      	str	r3, [r2, #64]	; 0x40
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_OscConfig+0x2b8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d121      	bne.n	8007412 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <HAL_RCC_OscConfig+0x2b8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a07      	ldr	r2, [pc, #28]	; (80073f0 <HAL_RCC_OscConfig+0x2b8>)
 80073d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073da:	f7fd fbc9 	bl	8004b70 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e0:	e011      	b.n	8007406 <HAL_RCC_OscConfig+0x2ce>
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
 80073e8:	42470000 	.word	0x42470000
 80073ec:	42470e80 	.word	0x42470e80
 80073f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073f4:	f7fd fbbc 	bl	8004b70 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e0fd      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007406:	4b81      	ldr	r3, [pc, #516]	; (800760c <HAL_RCC_OscConfig+0x4d4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d106      	bne.n	8007428 <HAL_RCC_OscConfig+0x2f0>
 800741a:	4b7d      	ldr	r3, [pc, #500]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	4a7c      	ldr	r2, [pc, #496]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6713      	str	r3, [r2, #112]	; 0x70
 8007426:	e01c      	b.n	8007462 <HAL_RCC_OscConfig+0x32a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b05      	cmp	r3, #5
 800742e:	d10c      	bne.n	800744a <HAL_RCC_OscConfig+0x312>
 8007430:	4b77      	ldr	r3, [pc, #476]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a76      	ldr	r2, [pc, #472]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007436:	f043 0304 	orr.w	r3, r3, #4
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	4b74      	ldr	r3, [pc, #464]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	4a73      	ldr	r2, [pc, #460]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	6713      	str	r3, [r2, #112]	; 0x70
 8007448:	e00b      	b.n	8007462 <HAL_RCC_OscConfig+0x32a>
 800744a:	4b71      	ldr	r3, [pc, #452]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a70      	ldr	r2, [pc, #448]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
 8007456:	4b6e      	ldr	r3, [pc, #440]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	4a6d      	ldr	r2, [pc, #436]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 800745c:	f023 0304 	bic.w	r3, r3, #4
 8007460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746a:	f7fd fb81 	bl	8004b70 <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fd fb7d 	bl	8004b70 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e0bc      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007488:	4b61      	ldr	r3, [pc, #388]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ee      	beq.n	8007472 <HAL_RCC_OscConfig+0x33a>
 8007494:	e014      	b.n	80074c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007496:	f7fd fb6b 	bl	8004b70 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fd fb67 	bl	8004b70 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0a6      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b4:	4b56      	ldr	r3, [pc, #344]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ee      	bne.n	800749e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d105      	bne.n	80074d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c6:	4b52      	ldr	r3, [pc, #328]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	4a51      	ldr	r2, [pc, #324]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 80074cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8092 	beq.w	8007600 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074dc:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d05c      	beq.n	80075a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d141      	bne.n	8007574 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f0:	4b48      	ldr	r3, [pc, #288]	; (8007614 <HAL_RCC_OscConfig+0x4dc>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f6:	f7fd fb3b 	bl	8004b70 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074fe:	f7fd fb37 	bl	8004b70 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e078      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007510:	4b3f      	ldr	r3, [pc, #252]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	019b      	lsls	r3, r3, #6
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	3b01      	subs	r3, #1
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	061b      	lsls	r3, r3, #24
 8007540:	4933      	ldr	r1, [pc, #204]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007542:	4313      	orrs	r3, r2
 8007544:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007546:	4b33      	ldr	r3, [pc, #204]	; (8007614 <HAL_RCC_OscConfig+0x4dc>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754c:	f7fd fb10 	bl	8004b70 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007554:	f7fd fb0c 	bl	8004b70 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e04d      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007566:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0f0      	beq.n	8007554 <HAL_RCC_OscConfig+0x41c>
 8007572:	e045      	b.n	8007600 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007574:	4b27      	ldr	r3, [pc, #156]	; (8007614 <HAL_RCC_OscConfig+0x4dc>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800757a:	f7fd faf9 	bl	8004b70 <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007582:	f7fd faf5 	bl	8004b70 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e036      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f0      	bne.n	8007582 <HAL_RCC_OscConfig+0x44a>
 80075a0:	e02e      	b.n	8007600 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e029      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ae:	4b18      	ldr	r3, [pc, #96]	; (8007610 <HAL_RCC_OscConfig+0x4d8>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d11c      	bne.n	80075fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d115      	bne.n	80075fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075d6:	4013      	ands	r3, r2
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10d      	bne.n	80075fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d106      	bne.n	80075fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	40007000 	.word	0x40007000
 8007610:	40023800 	.word	0x40023800
 8007614:	42470060 	.word	0x42470060

08007618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0cc      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800762c:	4b68      	ldr	r3, [pc, #416]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d90c      	bls.n	8007654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4b65      	ldr	r3, [pc, #404]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b63      	ldr	r3, [pc, #396]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0b8      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d020      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800766c:	4b59      	ldr	r3, [pc, #356]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4a58      	ldr	r2, [pc, #352]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007684:	4b53      	ldr	r3, [pc, #332]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4a52      	ldr	r2, [pc, #328]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800768a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800768e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007690:	4b50      	ldr	r3, [pc, #320]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	494d      	ldr	r1, [pc, #308]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d044      	beq.n	8007738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d107      	bne.n	80076c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	4b47      	ldr	r3, [pc, #284]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d119      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e07f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d003      	beq.n	80076d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d6:	4b3f      	ldr	r3, [pc, #252]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e06f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e6:	4b3b      	ldr	r3, [pc, #236]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e067      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076f6:	4b37      	ldr	r3, [pc, #220]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 0203 	bic.w	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	4934      	ldr	r1, [pc, #208]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007704:	4313      	orrs	r3, r2
 8007706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007708:	f7fd fa32 	bl	8004b70 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770e:	e00a      	b.n	8007726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007710:	f7fd fa2e 	bl	8004b70 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f241 3288 	movw	r2, #5000	; 0x1388
 800771e:	4293      	cmp	r3, r2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e04f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007726:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 020c 	and.w	r2, r3, #12
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	429a      	cmp	r2, r3
 8007736:	d1eb      	bne.n	8007710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007738:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d20c      	bcs.n	8007760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007746:	4b22      	ldr	r3, [pc, #136]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800774e:	4b20      	ldr	r3, [pc, #128]	; (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d001      	beq.n	8007760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e032      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4916      	ldr	r1, [pc, #88]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	490e      	ldr	r1, [pc, #56]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800779e:	f000 f889 	bl	80078b4 <HAL_RCC_GetSysClockFreq>
 80077a2:	4601      	mov	r1, r0
 80077a4:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	4a0a      	ldr	r2, [pc, #40]	; (80077d8 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	5cd3      	ldrb	r3, [r2, r3]
 80077b2:	fa21 f303 	lsr.w	r3, r1, r3
 80077b6:	4a09      	ldr	r2, [pc, #36]	; (80077dc <HAL_RCC_ClockConfig+0x1c4>)
 80077b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <HAL_RCC_ClockConfig+0x1c8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fd f992 	bl	8004ae8 <HAL_InitTick>

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40023c00 	.word	0x40023c00
 80077d4:	40023800 	.word	0x40023800
 80077d8:	0800e660 	.word	0x0800e660
 80077dc:	20000000 	.word	0x20000000
 80077e0:	20000004 	.word	0x20000004

080077e4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08c      	sub	sp, #48	; 0x30
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d129      	bne.n	800784a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	4b2b      	ldr	r3, [pc, #172]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6313      	str	r3, [r2, #48]	; 0x30
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007818:	2302      	movs	r3, #2
 800781a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800781c:	2303      	movs	r3, #3
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007820:	2300      	movs	r3, #0
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007824:	2300      	movs	r3, #0
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007828:	f107 031c 	add.w	r3, r7, #28
 800782c:	4619      	mov	r1, r3
 800782e:	481f      	ldr	r0, [pc, #124]	; (80078ac <HAL_RCC_MCOConfig+0xc8>)
 8007830:	f7fe f844 	bl	80058bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007834:	4b1c      	ldr	r3, [pc, #112]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	430b      	orrs	r3, r1
 8007842:	4919      	ldr	r1, [pc, #100]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007844:	4313      	orrs	r3, r2
 8007846:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007848:	e029      	b.n	800789e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 8007854:	f043 0304 	orr.w	r3, r3, #4
 8007858:	6313      	str	r3, [r2, #48]	; 0x30
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800786c:	2302      	movs	r3, #2
 800786e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007870:	2303      	movs	r3, #3
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007878:	2300      	movs	r3, #0
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800787c:	f107 031c 	add.w	r3, r7, #28
 8007880:	4619      	mov	r1, r3
 8007882:	480b      	ldr	r0, [pc, #44]	; (80078b0 <HAL_RCC_MCOConfig+0xcc>)
 8007884:	f7fe f81a 	bl	80058bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007888:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	00d9      	lsls	r1, r3, #3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	430b      	orrs	r3, r1
 8007898:	4903      	ldr	r1, [pc, #12]	; (80078a8 <HAL_RCC_MCOConfig+0xc4>)
 800789a:	4313      	orrs	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
}
 800789e:	bf00      	nop
 80078a0:	3730      	adds	r7, #48	; 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40020000 	.word	0x40020000
 80078b0:	40020800 	.word	0x40020800

080078b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	2300      	movs	r3, #0
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078ca:	4b63      	ldr	r3, [pc, #396]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d007      	beq.n	80078e6 <HAL_RCC_GetSysClockFreq+0x32>
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d008      	beq.n	80078ec <HAL_RCC_GetSysClockFreq+0x38>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 80b4 	bne.w	8007a48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078e0:	4b5e      	ldr	r3, [pc, #376]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078e2:	60bb      	str	r3, [r7, #8]
       break;
 80078e4:	e0b3      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078e6:	4b5e      	ldr	r3, [pc, #376]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078e8:	60bb      	str	r3, [r7, #8]
      break;
 80078ea:	e0b0      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078ec:	4b5a      	ldr	r3, [pc, #360]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078f6:	4b58      	ldr	r3, [pc, #352]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04a      	beq.n	8007998 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007902:	4b55      	ldr	r3, [pc, #340]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	f04f 0400 	mov.w	r4, #0
 800790c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	ea03 0501 	and.w	r5, r3, r1
 8007918:	ea04 0602 	and.w	r6, r4, r2
 800791c:	4629      	mov	r1, r5
 800791e:	4632      	mov	r2, r6
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0154      	lsls	r4, r2, #5
 800792a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800792e:	014b      	lsls	r3, r1, #5
 8007930:	4619      	mov	r1, r3
 8007932:	4622      	mov	r2, r4
 8007934:	1b49      	subs	r1, r1, r5
 8007936:	eb62 0206 	sbc.w	r2, r2, r6
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	f04f 0400 	mov.w	r4, #0
 8007942:	0194      	lsls	r4, r2, #6
 8007944:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007948:	018b      	lsls	r3, r1, #6
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	eb64 0402 	sbc.w	r4, r4, r2
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	00e2      	lsls	r2, r4, #3
 800795a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800795e:	00d9      	lsls	r1, r3, #3
 8007960:	460b      	mov	r3, r1
 8007962:	4614      	mov	r4, r2
 8007964:	195b      	adds	r3, r3, r5
 8007966:	eb44 0406 	adc.w	r4, r4, r6
 800796a:	f04f 0100 	mov.w	r1, #0
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	0262      	lsls	r2, r4, #9
 8007974:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007978:	0259      	lsls	r1, r3, #9
 800797a:	460b      	mov	r3, r1
 800797c:	4614      	mov	r4, r2
 800797e:	4618      	mov	r0, r3
 8007980:	4621      	mov	r1, r4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f04f 0400 	mov.w	r4, #0
 8007988:	461a      	mov	r2, r3
 800798a:	4623      	mov	r3, r4
 800798c:	f7f9 f8b0 	bl	8000af0 <__aeabi_uldivmod>
 8007990:	4603      	mov	r3, r0
 8007992:	460c      	mov	r4, r1
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e049      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007998:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	099b      	lsrs	r3, r3, #6
 800799e:	f04f 0400 	mov.w	r4, #0
 80079a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	ea03 0501 	and.w	r5, r3, r1
 80079ae:	ea04 0602 	and.w	r6, r4, r2
 80079b2:	4629      	mov	r1, r5
 80079b4:	4632      	mov	r2, r6
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	f04f 0400 	mov.w	r4, #0
 80079be:	0154      	lsls	r4, r2, #5
 80079c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079c4:	014b      	lsls	r3, r1, #5
 80079c6:	4619      	mov	r1, r3
 80079c8:	4622      	mov	r2, r4
 80079ca:	1b49      	subs	r1, r1, r5
 80079cc:	eb62 0206 	sbc.w	r2, r2, r6
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	f04f 0400 	mov.w	r4, #0
 80079d8:	0194      	lsls	r4, r2, #6
 80079da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079de:	018b      	lsls	r3, r1, #6
 80079e0:	1a5b      	subs	r3, r3, r1
 80079e2:	eb64 0402 	sbc.w	r4, r4, r2
 80079e6:	f04f 0100 	mov.w	r1, #0
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	00e2      	lsls	r2, r4, #3
 80079f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079f4:	00d9      	lsls	r1, r3, #3
 80079f6:	460b      	mov	r3, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	195b      	adds	r3, r3, r5
 80079fc:	eb44 0406 	adc.w	r4, r4, r6
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	02a2      	lsls	r2, r4, #10
 8007a0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a0e:	0299      	lsls	r1, r3, #10
 8007a10:	460b      	mov	r3, r1
 8007a12:	4614      	mov	r4, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	4621      	mov	r1, r4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f04f 0400 	mov.w	r4, #0
 8007a1e:	461a      	mov	r2, r3
 8007a20:	4623      	mov	r3, r4
 8007a22:	f7f9 f865 	bl	8000af0 <__aeabi_uldivmod>
 8007a26:	4603      	mov	r3, r0
 8007a28:	460c      	mov	r4, r1
 8007a2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	3301      	adds	r3, #1
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	60bb      	str	r3, [r7, #8]
      break;
 8007a46:	e002      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a48:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a4a:	60bb      	str	r3, [r7, #8]
      break;
 8007a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	00f42400 	.word	0x00f42400
 8007a60:	007a1200 	.word	0x007a1200

08007a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a68:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20000000 	.word	0x20000000

08007a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a80:	f7ff fff0 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8007a84:	4601      	mov	r1, r0
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	0a9b      	lsrs	r3, r3, #10
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a92:	5cd3      	ldrb	r3, [r2, r3]
 8007a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40023800 	.word	0x40023800
 8007aa0:	0800e670 	.word	0x0800e670

08007aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007aa8:	f7ff ffdc 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8007aac:	4601      	mov	r1, r0
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	0b5b      	lsrs	r3, r3, #13
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4a03      	ldr	r2, [pc, #12]	; (8007ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aba:	5cd3      	ldrb	r3, [r2, r3]
 8007abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	0800e670 	.word	0x0800e670

08007acc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e01c      	b.n	8007b18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	795b      	ldrb	r3, [r3, #5]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fc fcb2 	bl	8004458 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0204 	orr.w	r2, r2, #4
 8007b08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e05d      	b.n	8007bee <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fc fca8 	bl	800449c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	ea42 0103 	orr.w	r1, r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	f003 0104 	and.w	r1, r3, #4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc2:	d104      	bne.n	8007bce <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bcc:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_SPI_Transmit+0x22>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e140      	b.n	8007e9a <HAL_SPI_Transmit+0x2a4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c20:	f7fc ffa6 	bl	8004b70 <HAL_GetTick>
 8007c24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c26:	88fb      	ldrh	r3, [r7, #6]
 8007c28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d002      	beq.n	8007c3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
 8007c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c3a:	e125      	b.n	8007e88 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SPI_Transmit+0x52>
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c4c:	e11c      	b.n	8007e88 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2203      	movs	r2, #3
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c94:	d107      	bne.n	8007ca6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ca4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cae:	d10f      	bne.n	8007cd0 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cce:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d007      	beq.n	8007cee <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf6:	d14b      	bne.n	8007d90 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SPI_Transmit+0x110>
 8007d00:	8afb      	ldrh	r3, [r7, #22]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d13e      	bne.n	8007d84 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d2a:	e02b      	b.n	8007d84 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d112      	bne.n	8007d60 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	881a      	ldrh	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	1c9a      	adds	r2, r3, #2
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d5e:	e011      	b.n	8007d84 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d60:	f7fc ff06 	bl	8004b70 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d803      	bhi.n	8007d78 <HAL_SPI_Transmit+0x182>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d102      	bne.n	8007d7e <HAL_SPI_Transmit+0x188>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d82:	e081      	b.n	8007e88 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1ce      	bne.n	8007d2c <HAL_SPI_Transmit+0x136>
 8007d8e:	e04c      	b.n	8007e2a <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_SPI_Transmit+0x1a8>
 8007d98:	8afb      	ldrh	r3, [r7, #22]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d140      	bne.n	8007e20 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007dc4:	e02c      	b.n	8007e20 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d113      	bne.n	8007dfc <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dfa:	e011      	b.n	8007e20 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfc:	f7fc feb8 	bl	8004b70 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d803      	bhi.n	8007e14 <HAL_SPI_Transmit+0x21e>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d102      	bne.n	8007e1a <HAL_SPI_Transmit+0x224>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e1e:	e033      	b.n	8007e88 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1cd      	bne.n	8007dc6 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	d107      	bne.n	8007e44 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e42:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f895 	bl	8007f78 <SPI_EndRxTxTransaction>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e000      	b.n	8007e88 <HAL_SPI_Transmit+0x292>
  }

error:
 8007e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eb2:	e04c      	b.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d048      	beq.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ebc:	f7fc fe58 	bl	8004b70 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d902      	bls.n	8007ed2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d13d      	bne.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eea:	d111      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	d004      	beq.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efe:	d107      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f18:	d10f      	bne.n	8007f3a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e00f      	b.n	8007f6e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4013      	ands	r3, r2
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	bf0c      	ite	eq
 8007f5e:	2301      	moveq	r3, #1
 8007f60:	2300      	movne	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d1a3      	bne.n	8007eb4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <SPI_EndRxTxTransaction+0x7c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <SPI_EndRxTxTransaction+0x80>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0d5b      	lsrs	r3, r3, #21
 8007f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f94:	fb02 f303 	mul.w	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fa2:	d112      	bne.n	8007fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2200      	movs	r2, #0
 8007fac:	2180      	movs	r1, #128	; 0x80
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff ff77 	bl	8007ea2 <SPI_WaitFlagStateUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d016      	beq.n	8007fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f043 0220 	orr.w	r2, r3, #32
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e00f      	b.n	8007fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d0f2      	beq.n	8007fca <SPI_EndRxTxTransaction+0x52>
 8007fe4:	e000      	b.n	8007fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007fe6:	bf00      	nop
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000000 	.word	0x20000000
 8007ff8:	165e9f81 	.word	0x165e9f81

08007ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e01d      	b.n	800804a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fc fb80 	bl	8004728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f000 fa8e 	bl	800855c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e01d      	b.n	80080a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f815 	bl	80080a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f000 fa63 	bl	800855c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e01d      	b.n	800810a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f815 	bl	8008112 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f000 fa2e 	bl	800855c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_TIM_IC_ConfigChannel+0x1a>
 800813c:	2302      	movs	r3, #2
 800813e:	e08a      	b.n	8008256 <HAL_TIM_IC_ConfigChannel+0x130>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d11b      	bne.n	800818e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f000 fc49 	bl	80089fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 020c 	bic.w	r2, r2, #12
 8008178:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6999      	ldr	r1, [r3, #24]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	619a      	str	r2, [r3, #24]
 800818c:	e05a      	b.n	8008244 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d11c      	bne.n	80081ce <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f000 fccd 	bl	8008b42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	619a      	str	r2, [r3, #24]
 80081cc:	e03a      	b.n	8008244 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d11b      	bne.n	800820c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6819      	ldr	r1, [r3, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f000 fd1a 	bl	8008c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69da      	ldr	r2, [r3, #28]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 020c 	bic.w	r2, r2, #12
 80081f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69d9      	ldr	r1, [r3, #28]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	61da      	str	r2, [r3, #28]
 800820a:	e01b      	b.n	8008244 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f000 fd3a 	bl	8008c94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800822e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69d9      	ldr	r1, [r3, #28]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	021a      	lsls	r2, r3, #8
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008276:	2302      	movs	r3, #2
 8008278:	e0b4      	b.n	80083e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b0c      	cmp	r3, #12
 800828e:	f200 809f 	bhi.w	80083d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082cd 	.word	0x080082cd
 800829c:	080083d1 	.word	0x080083d1
 80082a0:	080083d1 	.word	0x080083d1
 80082a4:	080083d1 	.word	0x080083d1
 80082a8:	0800830d 	.word	0x0800830d
 80082ac:	080083d1 	.word	0x080083d1
 80082b0:	080083d1 	.word	0x080083d1
 80082b4:	080083d1 	.word	0x080083d1
 80082b8:	0800834f 	.word	0x0800834f
 80082bc:	080083d1 	.word	0x080083d1
 80082c0:	080083d1 	.word	0x080083d1
 80082c4:	080083d1 	.word	0x080083d1
 80082c8:	0800838f 	.word	0x0800838f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f9e2 	bl	800869c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0208 	orr.w	r2, r2, #8
 80082e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0204 	bic.w	r2, r2, #4
 80082f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6999      	ldr	r1, [r3, #24]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	619a      	str	r2, [r3, #24]
      break;
 800830a:	e062      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fa32 	bl	800877c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6999      	ldr	r1, [r3, #24]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	021a      	lsls	r2, r3, #8
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	619a      	str	r2, [r3, #24]
      break;
 800834c:	e041      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68b9      	ldr	r1, [r7, #8]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fa87 	bl	8008868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0208 	orr.w	r2, r2, #8
 8008368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0204 	bic.w	r2, r2, #4
 8008378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69d9      	ldr	r1, [r3, #28]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	61da      	str	r2, [r3, #28]
      break;
 800838c:	e021      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fadb 	bl	8008950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69d9      	ldr	r1, [r3, #28]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	021a      	lsls	r2, r3, #8
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	61da      	str	r2, [r3, #28]
      break;
 80083ce:	e000      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80083d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_TIM_ConfigClockSource+0x18>
 8008400:	2302      	movs	r3, #2
 8008402:	e0a6      	b.n	8008552 <HAL_TIM_ConfigClockSource+0x166>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800842a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d067      	beq.n	800850c <HAL_TIM_ConfigClockSource+0x120>
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d80b      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x6c>
 8008440:	2b10      	cmp	r3, #16
 8008442:	d073      	beq.n	800852c <HAL_TIM_ConfigClockSource+0x140>
 8008444:	2b10      	cmp	r3, #16
 8008446:	d802      	bhi.n	800844e <HAL_TIM_ConfigClockSource+0x62>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d06f      	beq.n	800852c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800844c:	e078      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800844e:	2b20      	cmp	r3, #32
 8008450:	d06c      	beq.n	800852c <HAL_TIM_ConfigClockSource+0x140>
 8008452:	2b30      	cmp	r3, #48	; 0x30
 8008454:	d06a      	beq.n	800852c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008456:	e073      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008458:	2b70      	cmp	r3, #112	; 0x70
 800845a:	d00d      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x8c>
 800845c:	2b70      	cmp	r3, #112	; 0x70
 800845e:	d804      	bhi.n	800846a <HAL_TIM_ConfigClockSource+0x7e>
 8008460:	2b50      	cmp	r3, #80	; 0x50
 8008462:	d033      	beq.n	80084cc <HAL_TIM_ConfigClockSource+0xe0>
 8008464:	2b60      	cmp	r3, #96	; 0x60
 8008466:	d041      	beq.n	80084ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008468:	e06a      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	d066      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x152>
 8008470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008474:	d017      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008476:	e063      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	6899      	ldr	r1, [r3, #8]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f000 fc5c 	bl	8008d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800849a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	609a      	str	r2, [r3, #8]
      break;
 80084a4:	e04c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6899      	ldr	r1, [r3, #8]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	f000 fc45 	bl	8008d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c8:	609a      	str	r2, [r3, #8]
      break;
 80084ca:	e039      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	6859      	ldr	r1, [r3, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	461a      	mov	r2, r3
 80084da:	f000 fb03 	bl	8008ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2150      	movs	r1, #80	; 0x50
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fc12 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 80084ea:	e029      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	6859      	ldr	r1, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	461a      	mov	r2, r3
 80084fa:	f000 fb5f 	bl	8008bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2160      	movs	r1, #96	; 0x60
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fc02 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800850a:	e019      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	461a      	mov	r2, r3
 800851a:	f000 fae3 	bl	8008ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2140      	movs	r1, #64	; 0x40
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fbf2 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800852a:	e009      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f000 fbe9 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800853c:	e000      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800853e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a40      	ldr	r2, [pc, #256]	; (8008670 <TIM_Base_SetConfig+0x114>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d013      	beq.n	800859c <TIM_Base_SetConfig+0x40>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857a:	d00f      	beq.n	800859c <TIM_Base_SetConfig+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3d      	ldr	r2, [pc, #244]	; (8008674 <TIM_Base_SetConfig+0x118>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00b      	beq.n	800859c <TIM_Base_SetConfig+0x40>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3c      	ldr	r2, [pc, #240]	; (8008678 <TIM_Base_SetConfig+0x11c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d007      	beq.n	800859c <TIM_Base_SetConfig+0x40>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a3b      	ldr	r2, [pc, #236]	; (800867c <TIM_Base_SetConfig+0x120>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0x40>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a3a      	ldr	r2, [pc, #232]	; (8008680 <TIM_Base_SetConfig+0x124>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <TIM_Base_SetConfig+0x114>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d02b      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085bc:	d027      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a2c      	ldr	r2, [pc, #176]	; (8008674 <TIM_Base_SetConfig+0x118>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d023      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a2b      	ldr	r2, [pc, #172]	; (8008678 <TIM_Base_SetConfig+0x11c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01f      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a2a      	ldr	r2, [pc, #168]	; (800867c <TIM_Base_SetConfig+0x120>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01b      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a29      	ldr	r2, [pc, #164]	; (8008680 <TIM_Base_SetConfig+0x124>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d017      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a28      	ldr	r2, [pc, #160]	; (8008684 <TIM_Base_SetConfig+0x128>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a27      	ldr	r2, [pc, #156]	; (8008688 <TIM_Base_SetConfig+0x12c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00f      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a26      	ldr	r2, [pc, #152]	; (800868c <TIM_Base_SetConfig+0x130>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00b      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a25      	ldr	r2, [pc, #148]	; (8008690 <TIM_Base_SetConfig+0x134>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d007      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a24      	ldr	r2, [pc, #144]	; (8008694 <TIM_Base_SetConfig+0x138>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d003      	beq.n	800860e <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a23      	ldr	r2, [pc, #140]	; (8008698 <TIM_Base_SetConfig+0x13c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d108      	bne.n	8008620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <TIM_Base_SetConfig+0x114>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_Base_SetConfig+0xf8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <TIM_Base_SetConfig+0x124>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d103      	bne.n	800865c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	615a      	str	r2, [r3, #20]
}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	40010000 	.word	0x40010000
 8008674:	40000400 	.word	0x40000400
 8008678:	40000800 	.word	0x40000800
 800867c:	40000c00 	.word	0x40000c00
 8008680:	40010400 	.word	0x40010400
 8008684:	40014000 	.word	0x40014000
 8008688:	40014400 	.word	0x40014400
 800868c:	40014800 	.word	0x40014800
 8008690:	40001800 	.word	0x40001800
 8008694:	40001c00 	.word	0x40001c00
 8008698:	40002000 	.word	0x40002000

0800869c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f023 0302 	bic.w	r3, r3, #2
 80086e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a20      	ldr	r2, [pc, #128]	; (8008774 <TIM_OC1_SetConfig+0xd8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <TIM_OC1_SetConfig+0x64>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <TIM_OC1_SetConfig+0xdc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d10c      	bne.n	800871a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f023 0308 	bic.w	r3, r3, #8
 8008706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 0304 	bic.w	r3, r3, #4
 8008718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <TIM_OC1_SetConfig+0xd8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC1_SetConfig+0x8e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a14      	ldr	r2, [pc, #80]	; (8008778 <TIM_OC1_SetConfig+0xdc>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d111      	bne.n	800874e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	621a      	str	r2, [r3, #32]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	40010000 	.word	0x40010000
 8008778:	40010400 	.word	0x40010400

0800877c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f023 0210 	bic.w	r2, r3, #16
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f023 0320 	bic.w	r3, r3, #32
 80087c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a22      	ldr	r2, [pc, #136]	; (8008860 <TIM_OC2_SetConfig+0xe4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_OC2_SetConfig+0x68>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a21      	ldr	r2, [pc, #132]	; (8008864 <TIM_OC2_SetConfig+0xe8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d10d      	bne.n	8008800 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <TIM_OC2_SetConfig+0xe4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_OC2_SetConfig+0x94>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a16      	ldr	r2, [pc, #88]	; (8008864 <TIM_OC2_SetConfig+0xe8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d113      	bne.n	8008838 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800881e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40010000 	.word	0x40010000
 8008864:	40010400 	.word	0x40010400

08008868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a21      	ldr	r2, [pc, #132]	; (8008948 <TIM_OC3_SetConfig+0xe0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d003      	beq.n	80088ce <TIM_OC3_SetConfig+0x66>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a20      	ldr	r2, [pc, #128]	; (800894c <TIM_OC3_SetConfig+0xe4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d10d      	bne.n	80088ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a16      	ldr	r2, [pc, #88]	; (8008948 <TIM_OC3_SetConfig+0xe0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d003      	beq.n	80088fa <TIM_OC3_SetConfig+0x92>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a15      	ldr	r2, [pc, #84]	; (800894c <TIM_OC3_SetConfig+0xe4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d113      	bne.n	8008922 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	621a      	str	r2, [r3, #32]
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	40010000 	.word	0x40010000
 800894c:	40010400 	.word	0x40010400

08008950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800899a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	031b      	lsls	r3, r3, #12
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a12      	ldr	r2, [pc, #72]	; (80089f4 <TIM_OC4_SetConfig+0xa4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC4_SetConfig+0x68>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a11      	ldr	r2, [pc, #68]	; (80089f8 <TIM_OC4_SetConfig+0xa8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d109      	bne.n	80089cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	019b      	lsls	r3, r3, #6
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40010400 	.word	0x40010400

080089fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4a28      	ldr	r2, [pc, #160]	; (8008ac8 <TIM_TI1_SetConfig+0xcc>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d01b      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a30:	d017      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4a25      	ldr	r2, [pc, #148]	; (8008acc <TIM_TI1_SetConfig+0xd0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d013      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4a24      	ldr	r2, [pc, #144]	; (8008ad0 <TIM_TI1_SetConfig+0xd4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00f      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a23      	ldr	r2, [pc, #140]	; (8008ad4 <TIM_TI1_SetConfig+0xd8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00b      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4a22      	ldr	r2, [pc, #136]	; (8008ad8 <TIM_TI1_SetConfig+0xdc>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d007      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a21      	ldr	r2, [pc, #132]	; (8008adc <TIM_TI1_SetConfig+0xe0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d003      	beq.n	8008a62 <TIM_TI1_SetConfig+0x66>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <TIM_TI1_SetConfig+0xe4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d101      	bne.n	8008a66 <TIM_TI1_SetConfig+0x6a>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <TIM_TI1_SetConfig+0x6c>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e003      	b.n	8008a86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f023 030a 	bic.w	r3, r3, #10
 8008aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f003 030a 	and.w	r3, r3, #10
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	621a      	str	r2, [r3, #32]
}
 8008aba:	bf00      	nop
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40010400 	.word	0x40010400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40001800 	.word	0x40001800

08008ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f023 0201 	bic.w	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f023 030a 	bic.w	r3, r3, #10
 8008b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	bf00      	nop
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b087      	sub	sp, #28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f023 0210 	bic.w	r2, r3, #16
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	031b      	lsls	r3, r3, #12
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	011b      	lsls	r3, r3, #4
 8008b9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	621a      	str	r2, [r3, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	f023 0210 	bic.w	r2, r3, #16
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	031b      	lsls	r3, r3, #12
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	621a      	str	r2, [r3, #32]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 0303 	bic.w	r3, r3, #3
 8008c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	621a      	str	r2, [r3, #32]
}
 8008c88:	bf00      	nop
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	031b      	lsls	r3, r3, #12
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	031b      	lsls	r3, r3, #12
 8008cec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f043 0307 	orr.w	r3, r3, #7
 8008d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	609a      	str	r2, [r3, #8]
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	609a      	str	r2, [r3, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e05a      	b.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d022      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de8:	d01d      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d018      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d013      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a1a      	ldr	r2, [pc, #104]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00e      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d009      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d004      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a15      	ldr	r2, [pc, #84]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d10c      	bne.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40010000 	.word	0x40010000
 8008e64:	40000400 	.word	0x40000400
 8008e68:	40000800 	.word	0x40000800
 8008e6c:	40000c00 	.word	0x40000c00
 8008e70:	40010400 	.word	0x40010400
 8008e74:	40014000 	.word	0x40014000
 8008e78:	40001800 	.word	0x40001800

08008e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e03f      	b.n	8008f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fb fcc2 	bl	800482c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2224      	movs	r2, #36	; 0x24
 8008eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f829 	bl	8008f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695a      	ldr	r2, [r3, #20]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f5a:	f023 030c 	bic.w	r3, r3, #12
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	430b      	orrs	r3, r1
 8008f66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f86:	f040 818b 	bne.w	80092a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4ac1      	ldr	r2, [pc, #772]	; (8009294 <UART_SetConfig+0x37c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d005      	beq.n	8008fa0 <UART_SetConfig+0x88>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4abf      	ldr	r2, [pc, #764]	; (8009298 <UART_SetConfig+0x380>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f040 80bd 	bne.w	800911a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fa0:	f7fe fd80 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 8008fa4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	461d      	mov	r5, r3
 8008faa:	f04f 0600 	mov.w	r6, #0
 8008fae:	46a8      	mov	r8, r5
 8008fb0:	46b1      	mov	r9, r6
 8008fb2:	eb18 0308 	adds.w	r3, r8, r8
 8008fb6:	eb49 0409 	adc.w	r4, r9, r9
 8008fba:	4698      	mov	r8, r3
 8008fbc:	46a1      	mov	r9, r4
 8008fbe:	eb18 0805 	adds.w	r8, r8, r5
 8008fc2:	eb49 0906 	adc.w	r9, r9, r6
 8008fc6:	f04f 0100 	mov.w	r1, #0
 8008fca:	f04f 0200 	mov.w	r2, #0
 8008fce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008fd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008fda:	4688      	mov	r8, r1
 8008fdc:	4691      	mov	r9, r2
 8008fde:	eb18 0005 	adds.w	r0, r8, r5
 8008fe2:	eb49 0106 	adc.w	r1, r9, r6
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	461d      	mov	r5, r3
 8008fec:	f04f 0600 	mov.w	r6, #0
 8008ff0:	196b      	adds	r3, r5, r5
 8008ff2:	eb46 0406 	adc.w	r4, r6, r6
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	f7f7 fd79 	bl	8000af0 <__aeabi_uldivmod>
 8008ffe:	4603      	mov	r3, r0
 8009000:	460c      	mov	r4, r1
 8009002:	461a      	mov	r2, r3
 8009004:	4ba5      	ldr	r3, [pc, #660]	; (800929c <UART_SetConfig+0x384>)
 8009006:	fba3 2302 	umull	r2, r3, r3, r2
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	461d      	mov	r5, r3
 8009014:	f04f 0600 	mov.w	r6, #0
 8009018:	46a9      	mov	r9, r5
 800901a:	46b2      	mov	sl, r6
 800901c:	eb19 0309 	adds.w	r3, r9, r9
 8009020:	eb4a 040a 	adc.w	r4, sl, sl
 8009024:	4699      	mov	r9, r3
 8009026:	46a2      	mov	sl, r4
 8009028:	eb19 0905 	adds.w	r9, r9, r5
 800902c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009030:	f04f 0100 	mov.w	r1, #0
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800903c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009044:	4689      	mov	r9, r1
 8009046:	4692      	mov	sl, r2
 8009048:	eb19 0005 	adds.w	r0, r9, r5
 800904c:	eb4a 0106 	adc.w	r1, sl, r6
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	461d      	mov	r5, r3
 8009056:	f04f 0600 	mov.w	r6, #0
 800905a:	196b      	adds	r3, r5, r5
 800905c:	eb46 0406 	adc.w	r4, r6, r6
 8009060:	461a      	mov	r2, r3
 8009062:	4623      	mov	r3, r4
 8009064:	f7f7 fd44 	bl	8000af0 <__aeabi_uldivmod>
 8009068:	4603      	mov	r3, r0
 800906a:	460c      	mov	r4, r1
 800906c:	461a      	mov	r2, r3
 800906e:	4b8b      	ldr	r3, [pc, #556]	; (800929c <UART_SetConfig+0x384>)
 8009070:	fba3 1302 	umull	r1, r3, r3, r2
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	2164      	movs	r1, #100	; 0x64
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	3332      	adds	r3, #50	; 0x32
 8009082:	4a86      	ldr	r2, [pc, #536]	; (800929c <UART_SetConfig+0x384>)
 8009084:	fba2 2303 	umull	r2, r3, r2, r3
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009090:	4498      	add	r8, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	461d      	mov	r5, r3
 8009096:	f04f 0600 	mov.w	r6, #0
 800909a:	46a9      	mov	r9, r5
 800909c:	46b2      	mov	sl, r6
 800909e:	eb19 0309 	adds.w	r3, r9, r9
 80090a2:	eb4a 040a 	adc.w	r4, sl, sl
 80090a6:	4699      	mov	r9, r3
 80090a8:	46a2      	mov	sl, r4
 80090aa:	eb19 0905 	adds.w	r9, r9, r5
 80090ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80090b2:	f04f 0100 	mov.w	r1, #0
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090c6:	4689      	mov	r9, r1
 80090c8:	4692      	mov	sl, r2
 80090ca:	eb19 0005 	adds.w	r0, r9, r5
 80090ce:	eb4a 0106 	adc.w	r1, sl, r6
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	461d      	mov	r5, r3
 80090d8:	f04f 0600 	mov.w	r6, #0
 80090dc:	196b      	adds	r3, r5, r5
 80090de:	eb46 0406 	adc.w	r4, r6, r6
 80090e2:	461a      	mov	r2, r3
 80090e4:	4623      	mov	r3, r4
 80090e6:	f7f7 fd03 	bl	8000af0 <__aeabi_uldivmod>
 80090ea:	4603      	mov	r3, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b6a      	ldr	r3, [pc, #424]	; (800929c <UART_SetConfig+0x384>)
 80090f2:	fba3 1302 	umull	r1, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	2164      	movs	r1, #100	; 0x64
 80090fa:	fb01 f303 	mul.w	r3, r1, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	3332      	adds	r3, #50	; 0x32
 8009104:	4a65      	ldr	r2, [pc, #404]	; (800929c <UART_SetConfig+0x384>)
 8009106:	fba2 2303 	umull	r2, r3, r2, r3
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	f003 0207 	and.w	r2, r3, #7
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4442      	add	r2, r8
 8009116:	609a      	str	r2, [r3, #8]
 8009118:	e26f      	b.n	80095fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800911a:	f7fe fcaf 	bl	8007a7c <HAL_RCC_GetPCLK1Freq>
 800911e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	461d      	mov	r5, r3
 8009124:	f04f 0600 	mov.w	r6, #0
 8009128:	46a8      	mov	r8, r5
 800912a:	46b1      	mov	r9, r6
 800912c:	eb18 0308 	adds.w	r3, r8, r8
 8009130:	eb49 0409 	adc.w	r4, r9, r9
 8009134:	4698      	mov	r8, r3
 8009136:	46a1      	mov	r9, r4
 8009138:	eb18 0805 	adds.w	r8, r8, r5
 800913c:	eb49 0906 	adc.w	r9, r9, r6
 8009140:	f04f 0100 	mov.w	r1, #0
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800914c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009150:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009154:	4688      	mov	r8, r1
 8009156:	4691      	mov	r9, r2
 8009158:	eb18 0005 	adds.w	r0, r8, r5
 800915c:	eb49 0106 	adc.w	r1, r9, r6
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	461d      	mov	r5, r3
 8009166:	f04f 0600 	mov.w	r6, #0
 800916a:	196b      	adds	r3, r5, r5
 800916c:	eb46 0406 	adc.w	r4, r6, r6
 8009170:	461a      	mov	r2, r3
 8009172:	4623      	mov	r3, r4
 8009174:	f7f7 fcbc 	bl	8000af0 <__aeabi_uldivmod>
 8009178:	4603      	mov	r3, r0
 800917a:	460c      	mov	r4, r1
 800917c:	461a      	mov	r2, r3
 800917e:	4b47      	ldr	r3, [pc, #284]	; (800929c <UART_SetConfig+0x384>)
 8009180:	fba3 2302 	umull	r2, r3, r3, r2
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	461d      	mov	r5, r3
 800918e:	f04f 0600 	mov.w	r6, #0
 8009192:	46a9      	mov	r9, r5
 8009194:	46b2      	mov	sl, r6
 8009196:	eb19 0309 	adds.w	r3, r9, r9
 800919a:	eb4a 040a 	adc.w	r4, sl, sl
 800919e:	4699      	mov	r9, r3
 80091a0:	46a2      	mov	sl, r4
 80091a2:	eb19 0905 	adds.w	r9, r9, r5
 80091a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80091aa:	f04f 0100 	mov.w	r1, #0
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091be:	4689      	mov	r9, r1
 80091c0:	4692      	mov	sl, r2
 80091c2:	eb19 0005 	adds.w	r0, r9, r5
 80091c6:	eb4a 0106 	adc.w	r1, sl, r6
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	461d      	mov	r5, r3
 80091d0:	f04f 0600 	mov.w	r6, #0
 80091d4:	196b      	adds	r3, r5, r5
 80091d6:	eb46 0406 	adc.w	r4, r6, r6
 80091da:	461a      	mov	r2, r3
 80091dc:	4623      	mov	r3, r4
 80091de:	f7f7 fc87 	bl	8000af0 <__aeabi_uldivmod>
 80091e2:	4603      	mov	r3, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b2c      	ldr	r3, [pc, #176]	; (800929c <UART_SetConfig+0x384>)
 80091ea:	fba3 1302 	umull	r1, r3, r3, r2
 80091ee:	095b      	lsrs	r3, r3, #5
 80091f0:	2164      	movs	r1, #100	; 0x64
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	3332      	adds	r3, #50	; 0x32
 80091fc:	4a27      	ldr	r2, [pc, #156]	; (800929c <UART_SetConfig+0x384>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800920a:	4498      	add	r8, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	461d      	mov	r5, r3
 8009210:	f04f 0600 	mov.w	r6, #0
 8009214:	46a9      	mov	r9, r5
 8009216:	46b2      	mov	sl, r6
 8009218:	eb19 0309 	adds.w	r3, r9, r9
 800921c:	eb4a 040a 	adc.w	r4, sl, sl
 8009220:	4699      	mov	r9, r3
 8009222:	46a2      	mov	sl, r4
 8009224:	eb19 0905 	adds.w	r9, r9, r5
 8009228:	eb4a 0a06 	adc.w	sl, sl, r6
 800922c:	f04f 0100 	mov.w	r1, #0
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009238:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800923c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009240:	4689      	mov	r9, r1
 8009242:	4692      	mov	sl, r2
 8009244:	eb19 0005 	adds.w	r0, r9, r5
 8009248:	eb4a 0106 	adc.w	r1, sl, r6
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	461d      	mov	r5, r3
 8009252:	f04f 0600 	mov.w	r6, #0
 8009256:	196b      	adds	r3, r5, r5
 8009258:	eb46 0406 	adc.w	r4, r6, r6
 800925c:	461a      	mov	r2, r3
 800925e:	4623      	mov	r3, r4
 8009260:	f7f7 fc46 	bl	8000af0 <__aeabi_uldivmod>
 8009264:	4603      	mov	r3, r0
 8009266:	460c      	mov	r4, r1
 8009268:	461a      	mov	r2, r3
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <UART_SetConfig+0x384>)
 800926c:	fba3 1302 	umull	r1, r3, r3, r2
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	2164      	movs	r1, #100	; 0x64
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	3332      	adds	r3, #50	; 0x32
 800927e:	4a07      	ldr	r2, [pc, #28]	; (800929c <UART_SetConfig+0x384>)
 8009280:	fba2 2303 	umull	r2, r3, r2, r3
 8009284:	095b      	lsrs	r3, r3, #5
 8009286:	f003 0207 	and.w	r2, r3, #7
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4442      	add	r2, r8
 8009290:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009292:	e1b2      	b.n	80095fa <UART_SetConfig+0x6e2>
 8009294:	40011000 	.word	0x40011000
 8009298:	40011400 	.word	0x40011400
 800929c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4ad7      	ldr	r2, [pc, #860]	; (8009604 <UART_SetConfig+0x6ec>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d005      	beq.n	80092b6 <UART_SetConfig+0x39e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4ad6      	ldr	r2, [pc, #856]	; (8009608 <UART_SetConfig+0x6f0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	f040 80d1 	bne.w	8009458 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80092b6:	f7fe fbf5 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 80092ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	469a      	mov	sl, r3
 80092c0:	f04f 0b00 	mov.w	fp, #0
 80092c4:	46d0      	mov	r8, sl
 80092c6:	46d9      	mov	r9, fp
 80092c8:	eb18 0308 	adds.w	r3, r8, r8
 80092cc:	eb49 0409 	adc.w	r4, r9, r9
 80092d0:	4698      	mov	r8, r3
 80092d2:	46a1      	mov	r9, r4
 80092d4:	eb18 080a 	adds.w	r8, r8, sl
 80092d8:	eb49 090b 	adc.w	r9, r9, fp
 80092dc:	f04f 0100 	mov.w	r1, #0
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092f0:	4688      	mov	r8, r1
 80092f2:	4691      	mov	r9, r2
 80092f4:	eb1a 0508 	adds.w	r5, sl, r8
 80092f8:	eb4b 0609 	adc.w	r6, fp, r9
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4619      	mov	r1, r3
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	f04f 0400 	mov.w	r4, #0
 800930e:	0094      	lsls	r4, r2, #2
 8009310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009314:	008b      	lsls	r3, r1, #2
 8009316:	461a      	mov	r2, r3
 8009318:	4623      	mov	r3, r4
 800931a:	4628      	mov	r0, r5
 800931c:	4631      	mov	r1, r6
 800931e:	f7f7 fbe7 	bl	8000af0 <__aeabi_uldivmod>
 8009322:	4603      	mov	r3, r0
 8009324:	460c      	mov	r4, r1
 8009326:	461a      	mov	r2, r3
 8009328:	4bb8      	ldr	r3, [pc, #736]	; (800960c <UART_SetConfig+0x6f4>)
 800932a:	fba3 2302 	umull	r2, r3, r3, r2
 800932e:	095b      	lsrs	r3, r3, #5
 8009330:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	469b      	mov	fp, r3
 8009338:	f04f 0c00 	mov.w	ip, #0
 800933c:	46d9      	mov	r9, fp
 800933e:	46e2      	mov	sl, ip
 8009340:	eb19 0309 	adds.w	r3, r9, r9
 8009344:	eb4a 040a 	adc.w	r4, sl, sl
 8009348:	4699      	mov	r9, r3
 800934a:	46a2      	mov	sl, r4
 800934c:	eb19 090b 	adds.w	r9, r9, fp
 8009350:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009354:	f04f 0100 	mov.w	r1, #0
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009368:	4689      	mov	r9, r1
 800936a:	4692      	mov	sl, r2
 800936c:	eb1b 0509 	adds.w	r5, fp, r9
 8009370:	eb4c 060a 	adc.w	r6, ip, sl
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4619      	mov	r1, r3
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	f04f 0400 	mov.w	r4, #0
 8009386:	0094      	lsls	r4, r2, #2
 8009388:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800938c:	008b      	lsls	r3, r1, #2
 800938e:	461a      	mov	r2, r3
 8009390:	4623      	mov	r3, r4
 8009392:	4628      	mov	r0, r5
 8009394:	4631      	mov	r1, r6
 8009396:	f7f7 fbab 	bl	8000af0 <__aeabi_uldivmod>
 800939a:	4603      	mov	r3, r0
 800939c:	460c      	mov	r4, r1
 800939e:	461a      	mov	r2, r3
 80093a0:	4b9a      	ldr	r3, [pc, #616]	; (800960c <UART_SetConfig+0x6f4>)
 80093a2:	fba3 1302 	umull	r1, r3, r3, r2
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	2164      	movs	r1, #100	; 0x64
 80093aa:	fb01 f303 	mul.w	r3, r1, r3
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	3332      	adds	r3, #50	; 0x32
 80093b4:	4a95      	ldr	r2, [pc, #596]	; (800960c <UART_SetConfig+0x6f4>)
 80093b6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c0:	4498      	add	r8, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	469b      	mov	fp, r3
 80093c6:	f04f 0c00 	mov.w	ip, #0
 80093ca:	46d9      	mov	r9, fp
 80093cc:	46e2      	mov	sl, ip
 80093ce:	eb19 0309 	adds.w	r3, r9, r9
 80093d2:	eb4a 040a 	adc.w	r4, sl, sl
 80093d6:	4699      	mov	r9, r3
 80093d8:	46a2      	mov	sl, r4
 80093da:	eb19 090b 	adds.w	r9, r9, fp
 80093de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093e2:	f04f 0100 	mov.w	r1, #0
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093f6:	4689      	mov	r9, r1
 80093f8:	4692      	mov	sl, r2
 80093fa:	eb1b 0509 	adds.w	r5, fp, r9
 80093fe:	eb4c 060a 	adc.w	r6, ip, sl
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4619      	mov	r1, r3
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	f04f 0400 	mov.w	r4, #0
 8009414:	0094      	lsls	r4, r2, #2
 8009416:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800941a:	008b      	lsls	r3, r1, #2
 800941c:	461a      	mov	r2, r3
 800941e:	4623      	mov	r3, r4
 8009420:	4628      	mov	r0, r5
 8009422:	4631      	mov	r1, r6
 8009424:	f7f7 fb64 	bl	8000af0 <__aeabi_uldivmod>
 8009428:	4603      	mov	r3, r0
 800942a:	460c      	mov	r4, r1
 800942c:	461a      	mov	r2, r3
 800942e:	4b77      	ldr	r3, [pc, #476]	; (800960c <UART_SetConfig+0x6f4>)
 8009430:	fba3 1302 	umull	r1, r3, r3, r2
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	2164      	movs	r1, #100	; 0x64
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	3332      	adds	r3, #50	; 0x32
 8009442:	4a72      	ldr	r2, [pc, #456]	; (800960c <UART_SetConfig+0x6f4>)
 8009444:	fba2 2303 	umull	r2, r3, r2, r3
 8009448:	095b      	lsrs	r3, r3, #5
 800944a:	f003 020f 	and.w	r2, r3, #15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4442      	add	r2, r8
 8009454:	609a      	str	r2, [r3, #8]
 8009456:	e0d0      	b.n	80095fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009458:	f7fe fb10 	bl	8007a7c <HAL_RCC_GetPCLK1Freq>
 800945c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	469a      	mov	sl, r3
 8009462:	f04f 0b00 	mov.w	fp, #0
 8009466:	46d0      	mov	r8, sl
 8009468:	46d9      	mov	r9, fp
 800946a:	eb18 0308 	adds.w	r3, r8, r8
 800946e:	eb49 0409 	adc.w	r4, r9, r9
 8009472:	4698      	mov	r8, r3
 8009474:	46a1      	mov	r9, r4
 8009476:	eb18 080a 	adds.w	r8, r8, sl
 800947a:	eb49 090b 	adc.w	r9, r9, fp
 800947e:	f04f 0100 	mov.w	r1, #0
 8009482:	f04f 0200 	mov.w	r2, #0
 8009486:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800948a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800948e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009492:	4688      	mov	r8, r1
 8009494:	4691      	mov	r9, r2
 8009496:	eb1a 0508 	adds.w	r5, sl, r8
 800949a:	eb4b 0609 	adc.w	r6, fp, r9
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	4619      	mov	r1, r3
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	f04f 0400 	mov.w	r4, #0
 80094b0:	0094      	lsls	r4, r2, #2
 80094b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094b6:	008b      	lsls	r3, r1, #2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	4631      	mov	r1, r6
 80094c0:	f7f7 fb16 	bl	8000af0 <__aeabi_uldivmod>
 80094c4:	4603      	mov	r3, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b50      	ldr	r3, [pc, #320]	; (800960c <UART_SetConfig+0x6f4>)
 80094cc:	fba3 2302 	umull	r2, r3, r3, r2
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	469b      	mov	fp, r3
 80094da:	f04f 0c00 	mov.w	ip, #0
 80094de:	46d9      	mov	r9, fp
 80094e0:	46e2      	mov	sl, ip
 80094e2:	eb19 0309 	adds.w	r3, r9, r9
 80094e6:	eb4a 040a 	adc.w	r4, sl, sl
 80094ea:	4699      	mov	r9, r3
 80094ec:	46a2      	mov	sl, r4
 80094ee:	eb19 090b 	adds.w	r9, r9, fp
 80094f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094f6:	f04f 0100 	mov.w	r1, #0
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009502:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009506:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800950a:	4689      	mov	r9, r1
 800950c:	4692      	mov	sl, r2
 800950e:	eb1b 0509 	adds.w	r5, fp, r9
 8009512:	eb4c 060a 	adc.w	r6, ip, sl
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4619      	mov	r1, r3
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	f04f 0300 	mov.w	r3, #0
 8009524:	f04f 0400 	mov.w	r4, #0
 8009528:	0094      	lsls	r4, r2, #2
 800952a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800952e:	008b      	lsls	r3, r1, #2
 8009530:	461a      	mov	r2, r3
 8009532:	4623      	mov	r3, r4
 8009534:	4628      	mov	r0, r5
 8009536:	4631      	mov	r1, r6
 8009538:	f7f7 fada 	bl	8000af0 <__aeabi_uldivmod>
 800953c:	4603      	mov	r3, r0
 800953e:	460c      	mov	r4, r1
 8009540:	461a      	mov	r2, r3
 8009542:	4b32      	ldr	r3, [pc, #200]	; (800960c <UART_SetConfig+0x6f4>)
 8009544:	fba3 1302 	umull	r1, r3, r3, r2
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	2164      	movs	r1, #100	; 0x64
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	3332      	adds	r3, #50	; 0x32
 8009556:	4a2d      	ldr	r2, [pc, #180]	; (800960c <UART_SetConfig+0x6f4>)
 8009558:	fba2 2303 	umull	r2, r3, r2, r3
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009562:	4498      	add	r8, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	469b      	mov	fp, r3
 8009568:	f04f 0c00 	mov.w	ip, #0
 800956c:	46d9      	mov	r9, fp
 800956e:	46e2      	mov	sl, ip
 8009570:	eb19 0309 	adds.w	r3, r9, r9
 8009574:	eb4a 040a 	adc.w	r4, sl, sl
 8009578:	4699      	mov	r9, r3
 800957a:	46a2      	mov	sl, r4
 800957c:	eb19 090b 	adds.w	r9, r9, fp
 8009580:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009584:	f04f 0100 	mov.w	r1, #0
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009590:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009594:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009598:	4689      	mov	r9, r1
 800959a:	4692      	mov	sl, r2
 800959c:	eb1b 0509 	adds.w	r5, fp, r9
 80095a0:	eb4c 060a 	adc.w	r6, ip, sl
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f04f 0200 	mov.w	r2, #0
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	f04f 0400 	mov.w	r4, #0
 80095b6:	0094      	lsls	r4, r2, #2
 80095b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095bc:	008b      	lsls	r3, r1, #2
 80095be:	461a      	mov	r2, r3
 80095c0:	4623      	mov	r3, r4
 80095c2:	4628      	mov	r0, r5
 80095c4:	4631      	mov	r1, r6
 80095c6:	f7f7 fa93 	bl	8000af0 <__aeabi_uldivmod>
 80095ca:	4603      	mov	r3, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	461a      	mov	r2, r3
 80095d0:	4b0e      	ldr	r3, [pc, #56]	; (800960c <UART_SetConfig+0x6f4>)
 80095d2:	fba3 1302 	umull	r1, r3, r3, r2
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	2164      	movs	r1, #100	; 0x64
 80095da:	fb01 f303 	mul.w	r3, r1, r3
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	3332      	adds	r3, #50	; 0x32
 80095e4:	4a09      	ldr	r2, [pc, #36]	; (800960c <UART_SetConfig+0x6f4>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	095b      	lsrs	r3, r3, #5
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4442      	add	r2, r8
 80095f6:	609a      	str	r2, [r3, #8]
}
 80095f8:	e7ff      	b.n	80095fa <UART_SetConfig+0x6e2>
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009604:	40011000 	.word	0x40011000
 8009608:	40011400 	.word	0x40011400
 800960c:	51eb851f 	.word	0x51eb851f

08009610 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009610:	b084      	sub	sp, #16
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	f107 001c 	add.w	r0, r7, #28
 800961e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	2b01      	cmp	r3, #1
 8009626:	d122      	bne.n	800966e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800963c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009652:	2b01      	cmp	r3, #1
 8009654:	d105      	bne.n	8009662 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fa26 	bl	800aab4 <USB_CoreReset>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
 800966c:	e01a      	b.n	80096a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fa1a 	bl	800aab4 <USB_CoreReset>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
 8009696:	e005      	b.n	80096a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d10b      	bne.n	80096c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f043 0206 	orr.w	r2, r3, #6
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f043 0220 	orr.w	r2, r3, #32
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096ce:	b004      	add	sp, #16
 80096d0:	4770      	bx	lr
	...

080096d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d165      	bne.n	80097b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4a41      	ldr	r2, [pc, #260]	; (80097f0 <USB_SetTurnaroundTime+0x11c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d906      	bls.n	80096fe <USB_SetTurnaroundTime+0x2a>
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4a40      	ldr	r2, [pc, #256]	; (80097f4 <USB_SetTurnaroundTime+0x120>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d802      	bhi.n	80096fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80096f8:	230f      	movs	r3, #15
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e062      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4a3c      	ldr	r2, [pc, #240]	; (80097f4 <USB_SetTurnaroundTime+0x120>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d906      	bls.n	8009714 <USB_SetTurnaroundTime+0x40>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	4a3b      	ldr	r2, [pc, #236]	; (80097f8 <USB_SetTurnaroundTime+0x124>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d802      	bhi.n	8009714 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800970e:	230e      	movs	r3, #14
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	e057      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	4a38      	ldr	r2, [pc, #224]	; (80097f8 <USB_SetTurnaroundTime+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d906      	bls.n	800972a <USB_SetTurnaroundTime+0x56>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4a37      	ldr	r2, [pc, #220]	; (80097fc <USB_SetTurnaroundTime+0x128>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d802      	bhi.n	800972a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009724:	230d      	movs	r3, #13
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e04c      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	4a33      	ldr	r2, [pc, #204]	; (80097fc <USB_SetTurnaroundTime+0x128>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d906      	bls.n	8009740 <USB_SetTurnaroundTime+0x6c>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	4a32      	ldr	r2, [pc, #200]	; (8009800 <USB_SetTurnaroundTime+0x12c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d802      	bhi.n	8009740 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800973a:	230c      	movs	r3, #12
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e041      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4a2f      	ldr	r2, [pc, #188]	; (8009800 <USB_SetTurnaroundTime+0x12c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d906      	bls.n	8009756 <USB_SetTurnaroundTime+0x82>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4a2e      	ldr	r2, [pc, #184]	; (8009804 <USB_SetTurnaroundTime+0x130>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d802      	bhi.n	8009756 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009750:	230b      	movs	r3, #11
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	e036      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4a2a      	ldr	r2, [pc, #168]	; (8009804 <USB_SetTurnaroundTime+0x130>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d906      	bls.n	800976c <USB_SetTurnaroundTime+0x98>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	4a29      	ldr	r2, [pc, #164]	; (8009808 <USB_SetTurnaroundTime+0x134>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d802      	bhi.n	800976c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009766:	230a      	movs	r3, #10
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e02b      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4a26      	ldr	r2, [pc, #152]	; (8009808 <USB_SetTurnaroundTime+0x134>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d906      	bls.n	8009782 <USB_SetTurnaroundTime+0xae>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a25      	ldr	r2, [pc, #148]	; (800980c <USB_SetTurnaroundTime+0x138>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d802      	bhi.n	8009782 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800977c:	2309      	movs	r3, #9
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e020      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4a21      	ldr	r2, [pc, #132]	; (800980c <USB_SetTurnaroundTime+0x138>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d906      	bls.n	8009798 <USB_SetTurnaroundTime+0xc4>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4a20      	ldr	r2, [pc, #128]	; (8009810 <USB_SetTurnaroundTime+0x13c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d802      	bhi.n	8009798 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009792:	2308      	movs	r3, #8
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e015      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4a1d      	ldr	r2, [pc, #116]	; (8009810 <USB_SetTurnaroundTime+0x13c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d906      	bls.n	80097ae <USB_SetTurnaroundTime+0xda>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <USB_SetTurnaroundTime+0x140>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d802      	bhi.n	80097ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097a8:	2307      	movs	r3, #7
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e00a      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097ae:	2306      	movs	r3, #6
 80097b0:	617b      	str	r3, [r7, #20]
 80097b2:	e007      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80097ba:	2309      	movs	r3, #9
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e001      	b.n	80097c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097c0:	2309      	movs	r3, #9
 80097c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	029b      	lsls	r3, r3, #10
 80097d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	00d8acbf 	.word	0x00d8acbf
 80097f4:	00e4e1bf 	.word	0x00e4e1bf
 80097f8:	00f423ff 	.word	0x00f423ff
 80097fc:	0106737f 	.word	0x0106737f
 8009800:	011a499f 	.word	0x011a499f
 8009804:	01312cff 	.word	0x01312cff
 8009808:	014ca43f 	.word	0x014ca43f
 800980c:	016e35ff 	.word	0x016e35ff
 8009810:	01a6ab1f 	.word	0x01a6ab1f
 8009814:	01e847ff 	.word	0x01e847ff

08009818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f043 0201 	orr.w	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f023 0201 	bic.w	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d106      	bne.n	8009888 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	e00b      	b.n	80098a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d106      	bne.n	800989c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60da      	str	r2, [r3, #12]
 800989a:	e001      	b.n	80098a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e003      	b.n	80098a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80098a0:	2032      	movs	r0, #50	; 0x32
 80098a2:	f7fb f971 	bl	8004b88 <HAL_Delay>

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098b0:	b084      	sub	sp, #16
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80098be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	e009      	b.n	80098e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3340      	adds	r3, #64	; 0x40
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	2200      	movs	r2, #0
 80098dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3301      	adds	r3, #1
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b0e      	cmp	r3, #14
 80098e8:	d9f2      	bls.n	80098d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11c      	bne.n	800992a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098fe:	f043 0302 	orr.w	r3, r3, #2
 8009902:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009920:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	639a      	str	r2, [r3, #56]	; 0x38
 8009928:	e00b      	b.n	8009942 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009948:	461a      	mov	r2, r3
 800994a:	2300      	movs	r3, #0
 800994c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009954:	4619      	mov	r1, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995c:	461a      	mov	r2, r3
 800995e:	680b      	ldr	r3, [r1, #0]
 8009960:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	2b01      	cmp	r3, #1
 8009966:	d10c      	bne.n	8009982 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f949 	bl	8009c08 <USB_SetDevSpeed>
 8009976:	e008      	b.n	800998a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009978:	2101      	movs	r1, #1
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f944 	bl	8009c08 <USB_SetDevSpeed>
 8009980:	e003      	b.n	800998a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009982:	2103      	movs	r1, #3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f93f 	bl	8009c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800998a:	2110      	movs	r1, #16
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8f3 	bl	8009b78 <USB_FlushTxFifo>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f911 	bl	8009bc4 <USB_FlushRxFifo>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	461a      	mov	r2, r3
 80099b4:	2300      	movs	r3, #0
 80099b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099be:	461a      	mov	r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	461a      	mov	r2, r3
 80099cc:	2300      	movs	r3, #0
 80099ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]
 80099d4:	e043      	b.n	8009a5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ec:	d118      	bne.n	8009a20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a00:	461a      	mov	r2, r3
 8009a02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	e013      	b.n	8009a32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a16:	461a      	mov	r2, r3
 8009a18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e008      	b.n	8009a32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3e:	461a      	mov	r2, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	461a      	mov	r2, r3
 8009a52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d3b7      	bcc.n	80099d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a66:	2300      	movs	r3, #0
 8009a68:	613b      	str	r3, [r7, #16]
 8009a6a:	e043      	b.n	8009af4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a82:	d118      	bne.n	8009ab6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a96:	461a      	mov	r2, r3
 8009a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	e013      	b.n	8009ac8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aac:	461a      	mov	r2, r3
 8009aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	e008      	b.n	8009ac8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	3301      	adds	r3, #1
 8009af2:	613b      	str	r3, [r7, #16]
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3b7      	bcc.n	8009a6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d105      	bne.n	8009b30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f043 0210 	orr.w	r2, r3, #16
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <USB_DevInit+0x2c4>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f043 0208 	orr.w	r2, r3, #8
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d107      	bne.n	8009b64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b5c:	f043 0304 	orr.w	r3, r3, #4
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b70:	b004      	add	sp, #16
 8009b72:	4770      	bx	lr
 8009b74:	803c3800 	.word	0x803c3800

08009b78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	019b      	lsls	r3, r3, #6
 8009b8a:	f043 0220 	orr.w	r2, r3, #32
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <USB_FlushTxFifo+0x48>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e006      	b.n	8009bb2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d0f0      	beq.n	8009b92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	00030d40 	.word	0x00030d40

08009bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <USB_FlushRxFifo+0x40>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d901      	bls.n	8009be8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e006      	b.n	8009bf6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b10      	cmp	r3, #16
 8009bf2:	d0f0      	beq.n	8009bd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	00030d40 	.word	0x00030d40

08009c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	68f9      	ldr	r1, [r7, #12]
 8009c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b087      	sub	sp, #28
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f003 0306 	and.w	r3, r3, #6
 8009c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
 8009c5e:	e00a      	b.n	8009c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d002      	beq.n	8009c6c <USB_GetDevSpeed+0x32>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b06      	cmp	r3, #6
 8009c6a:	d102      	bne.n	8009c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	75fb      	strb	r3, [r7, #23]
 8009c70:	e001      	b.n	8009c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c72:	230f      	movs	r3, #15
 8009c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	371c      	adds	r7, #28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d13a      	bne.n	8009d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	68f9      	ldr	r1, [r7, #12]
 8009cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d155      	bne.n	8009d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	059b      	lsls	r3, r3, #22
 8009cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e036      	b.n	8009d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1c:	69da      	ldr	r2, [r3, #28]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	2101      	movs	r1, #1
 8009d28:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2c:	041b      	lsls	r3, r3, #16
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d11a      	bne.n	8009d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	78db      	ldrb	r3, [r3, #3]
 8009d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f040 815c 	bne.w	800a06e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d132      	bne.n	8009e24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	69fa      	ldr	r2, [r7, #28]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	69fa      	ldr	r2, [r7, #28]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	0cdb      	lsrs	r3, r3, #19
 8009e1e:	04db      	lsls	r3, r3, #19
 8009e20:	6113      	str	r3, [r2, #16]
 8009e22:	e074      	b.n	8009f0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	0cdb      	lsrs	r3, r3, #19
 8009e40:	04db      	lsls	r3, r3, #19
 8009e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6959      	ldr	r1, [r3, #20]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	440b      	add	r3, r1
 8009e80:	1e59      	subs	r1, r3, #1
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e8a:	04d9      	lsls	r1, r3, #19
 8009e8c:	4b9d      	ldr	r3, [pc, #628]	; (800a104 <USB_EPStartXfer+0x370>)
 8009e8e:	400b      	ands	r3, r1
 8009e90:	69b9      	ldr	r1, [r7, #24]
 8009e92:	0148      	lsls	r0, r1, #5
 8009e94:	69f9      	ldr	r1, [r7, #28]
 8009e96:	4401      	add	r1, r0
 8009e98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb6:	69b9      	ldr	r1, [r7, #24]
 8009eb8:	0148      	lsls	r0, r1, #5
 8009eba:	69f9      	ldr	r1, [r7, #28]
 8009ebc:	4401      	add	r1, r0
 8009ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	78db      	ldrb	r3, [r3, #3]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d11f      	bne.n	8009f0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	0151      	lsls	r1, r2, #5
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	440a      	add	r2, r1
 8009ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009eec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d14b      	bne.n	8009fac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f28:	461a      	mov	r2, r3
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	78db      	ldrb	r3, [r3, #3]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d128      	bne.n	8009f8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d110      	bne.n	8009f6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e00f      	b.n	8009f8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	e12f      	b.n	800a20c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	78db      	ldrb	r3, [r3, #3]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d015      	beq.n	800a000 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8117 	beq.w	800a20c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	f003 030f 	and.w	r3, r3, #15
 8009fee:	2101      	movs	r1, #1
 8009ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff4:	69f9      	ldr	r1, [r7, #28]
 8009ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	634b      	str	r3, [r1, #52]	; 0x34
 8009ffe:	e105      	b.n	800a20c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d110      	bne.n	800a032 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	440a      	add	r2, r1
 800a026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	e00f      	b.n	800a052 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a04c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a050:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	68d9      	ldr	r1, [r3, #12]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	781a      	ldrb	r2, [r3, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	b298      	uxth	r0, r3
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4603      	mov	r3, r0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 fa2b 	bl	800a4c2 <USB_WritePacket>
 800a06c:	e0ce      	b.n	800a20c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	0151      	lsls	r1, r2, #5
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	440a      	add	r2, r1
 800a084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a088:	0cdb      	lsrs	r3, r3, #19
 800a08a:	04db      	lsls	r3, r3, #19
 800a08c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	0151      	lsls	r1, r2, #5
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	440a      	add	r2, r1
 800a0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d126      	bne.n	800a108 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c6:	691a      	ldr	r2, [r3, #16]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0d0:	69b9      	ldr	r1, [r7, #24]
 800a0d2:	0148      	lsls	r0, r1, #5
 800a0d4:	69f9      	ldr	r1, [r7, #28]
 800a0d6:	4401      	add	r1, r0
 800a0d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0fe:	6113      	str	r3, [r2, #16]
 800a100:	e036      	b.n	800a170 <USB_EPStartXfer+0x3dc>
 800a102:	bf00      	nop
 800a104:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	695a      	ldr	r2, [r3, #20]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	4413      	add	r3, r2
 800a112:	1e5a      	subs	r2, r3, #1
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	8afb      	ldrh	r3, [r7, #22]
 800a12e:	04d9      	lsls	r1, r3, #19
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <USB_EPStartXfer+0x484>)
 800a132:	400b      	ands	r3, r1
 800a134:	69b9      	ldr	r1, [r7, #24]
 800a136:	0148      	lsls	r0, r1, #5
 800a138:	69f9      	ldr	r1, [r7, #28]
 800a13a:	4401      	add	r1, r0
 800a13c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a140:	4313      	orrs	r3, r2
 800a142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a150:	691a      	ldr	r2, [r3, #16]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	8af9      	ldrh	r1, [r7, #22]
 800a158:	fb01 f303 	mul.w	r3, r1, r3
 800a15c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a160:	69b9      	ldr	r1, [r7, #24]
 800a162:	0148      	lsls	r0, r1, #5
 800a164:	69f9      	ldr	r1, [r7, #28]
 800a166:	4401      	add	r1, r0
 800a168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a16c:	4313      	orrs	r3, r2
 800a16e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10d      	bne.n	800a192 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d009      	beq.n	800a192 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	68d9      	ldr	r1, [r3, #12]
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	460a      	mov	r2, r1
 800a190:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	78db      	ldrb	r3, [r3, #3]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d128      	bne.n	800a1ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d110      	bne.n	800a1cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	e00f      	b.n	800a1ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	0151      	lsls	r1, r2, #5
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a20a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3720      	adds	r7, #32
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	1ff80000 	.word	0x1ff80000

0800a21c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	785b      	ldrb	r3, [r3, #1]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	f040 80cd 	bne.w	800a3d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d132      	bne.n	800a2ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	0151      	lsls	r1, r2, #5
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	440a      	add	r2, r1
 800a25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	0151      	lsls	r1, r2, #5
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	440a      	add	r2, r1
 800a2a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a4:	0cdb      	lsrs	r3, r3, #19
 800a2a6:	04db      	lsls	r3, r3, #19
 800a2a8:	6113      	str	r3, [r2, #16]
 800a2aa:	e04e      	b.n	800a34a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c6:	0cdb      	lsrs	r3, r3, #19
 800a2c8:	04db      	lsls	r3, r3, #19
 800a2ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	0151      	lsls	r1, r2, #5
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	440a      	add	r2, r1
 800a2e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	695a      	ldr	r2, [r3, #20]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d903      	bls.n	800a304 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	0151      	lsls	r1, r2, #5
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	440a      	add	r2, r1
 800a31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a31e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a330:	691a      	ldr	r2, [r3, #16]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a33a:	6939      	ldr	r1, [r7, #16]
 800a33c:	0148      	lsls	r0, r1, #5
 800a33e:	6979      	ldr	r1, [r7, #20]
 800a340:	4401      	add	r1, r0
 800a342:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a346:	4313      	orrs	r3, r2
 800a348:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d11e      	bne.n	800a38e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a364:	461a      	mov	r2, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	0151      	lsls	r1, r2, #5
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	440a      	add	r2, r1
 800a382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	e092      	b.n	800a4b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	0151      	lsls	r1, r2, #5
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d07e      	beq.n	800a4b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3cc:	6979      	ldr	r1, [r7, #20]
 800a3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	634b      	str	r3, [r1, #52]	; 0x34
 800a3d6:	e06d      	b.n	800a4b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	0151      	lsls	r1, r2, #5
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f2:	0cdb      	lsrs	r3, r3, #19
 800a3f4:	04db      	lsls	r3, r3, #19
 800a3f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	0151      	lsls	r1, r2, #5
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	440a      	add	r2, r1
 800a40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a41a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d003      	beq.n	800a42c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	0151      	lsls	r1, r2, #5
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	440a      	add	r2, r1
 800a442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a44a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a462:	6939      	ldr	r1, [r7, #16]
 800a464:	0148      	lsls	r0, r1, #5
 800a466:	6979      	ldr	r1, [r7, #20]
 800a468:	4401      	add	r1, r0
 800a46a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a46e:	4313      	orrs	r3, r2
 800a470:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d10d      	bne.n	800a494 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d009      	beq.n	800a494 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	68d9      	ldr	r1, [r3, #12]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a490:	460a      	mov	r2, r1
 800a492:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	0151      	lsls	r1, r2, #5
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b089      	sub	sp, #36	; 0x24
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	71fb      	strb	r3, [r7, #7]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a4e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d11a      	bne.n	800a51e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4e8:	88bb      	ldrh	r3, [r7, #4]
 800a4ea:	3303      	adds	r3, #3
 800a4ec:	089b      	lsrs	r3, r3, #2
 800a4ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61bb      	str	r3, [r7, #24]
 800a4f4:	e00f      	b.n	800a516 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	031a      	lsls	r2, r3, #12
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	461a      	mov	r2, r3
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	3304      	adds	r3, #4
 800a50e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	3301      	adds	r3, #1
 800a514:	61bb      	str	r3, [r7, #24]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d3eb      	bcc.n	800a4f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3724      	adds	r7, #36	; 0x24
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	; 0x24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	3303      	adds	r3, #3
 800a546:	089b      	lsrs	r3, r3, #2
 800a548:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	e00b      	b.n	800a568 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	3304      	adds	r3, #4
 800a560:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	3301      	adds	r3, #1
 800a566:	61bb      	str	r3, [r7, #24]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3ef      	bcc.n	800a550 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a570:	69fb      	ldr	r3, [r7, #28]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3724      	adds	r7, #36	; 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a57e:	b480      	push	{r7}
 800a580:	b085      	sub	sp, #20
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d12c      	bne.n	800a5f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	db12      	blt.n	800a5d2 <USB_EPSetStall+0x54>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00f      	beq.n	800a5d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	e02b      	b.n	800a64c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	db12      	blt.n	800a62c <USB_EPSetStall+0xae>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00f      	beq.n	800a62c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	440a      	add	r2, r1
 800a622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a62a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	0151      	lsls	r1, r2, #5
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	440a      	add	r2, r1
 800a642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a64a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d128      	bne.n	800a6c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a694:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	78db      	ldrb	r3, [r3, #3]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d003      	beq.n	800a6a6 <USB_EPClearStall+0x4c>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	78db      	ldrb	r3, [r3, #3]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d138      	bne.n	800a718 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	0151      	lsls	r1, r2, #5
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	e027      	b.n	800a718 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	0151      	lsls	r1, r2, #5
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	440a      	add	r2, r1
 800a6de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	78db      	ldrb	r3, [r3, #3]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d003      	beq.n	800a6f8 <USB_EPClearStall+0x9e>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	78db      	ldrb	r3, [r3, #3]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d10f      	bne.n	800a718 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a716:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b086      	sub	sp, #24
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800a732:	2300      	movs	r3, #0
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	e016      	b.n	800a766 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	461a      	mov	r2, r3
 800a746:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a74a:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	461a      	mov	r2, r3
 800a75a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a75e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	3301      	adds	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b0e      	cmp	r3, #14
 800a76a:	d9e5      	bls.n	800a738 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a772:	461a      	mov	r2, r3
 800a774:	2300      	movs	r3, #0
 800a776:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77e:	461a      	mov	r2, r3
 800a780:	2300      	movs	r3, #0
 800a782:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78a:	461a      	mov	r2, r3
 800a78c:	2300      	movs	r3, #0
 800a78e:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff fa17 	bl	8009bc4 <USB_FlushRxFifo>
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <USB_StopDevice+0x7e>
  {
    return ret;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	e00b      	b.n	800a7bc <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800a7a4:	2110      	movs	r1, #16
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff f9e6 	bl	8009b78 <USB_FlushTxFifo>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <USB_StopDevice+0x94>
  {
    return ret;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	e000      	b.n	800a7bc <USB_StopDevice+0x96>
  }

  return ret;
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a7e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a7f8:	68f9      	ldr	r1, [r7, #12]
 800a7fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7fe:	4313      	orrs	r3, r2
 800a800:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82a:	f023 0302 	bic.w	r3, r3, #2
 800a82e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a830:	2003      	movs	r0, #3
 800a832:	f7fa f9a9 	bl	8004b88 <HAL_Delay>

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a85a:	f043 0302 	orr.w	r3, r3, #2
 800a85e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a860:	2003      	movs	r0, #3
 800a862:	f7fa f991 	bl	8004b88 <HAL_Delay>

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	4013      	ands	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a888:	68fb      	ldr	r3, [r7, #12]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	0c1b      	lsrs	r3, r3, #16
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	b29b      	uxth	r3, r3
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	460b      	mov	r3, r1
 800a908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a90e:	78fb      	ldrb	r3, [r7, #3]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	4013      	ands	r3, r2
 800a92a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a92c:	68bb      	ldr	r3, [r7, #8]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b087      	sub	sp, #28
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a95e:	78fb      	ldrb	r3, [r7, #3]
 800a960:	f003 030f 	and.w	r3, r3, #15
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	fa22 f303 	lsr.w	r3, r2, r3
 800a96a:	01db      	lsls	r3, r3, #7
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	4013      	ands	r3, r2
 800a986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a988:	68bb      	ldr	r3, [r7, #8]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a9d0:	f023 0307 	bic.w	r3, r3, #7
 800a9d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	460b      	mov	r3, r1
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	333c      	adds	r3, #60	; 0x3c
 800aa0e:	3304      	adds	r3, #4
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4a26      	ldr	r2, [pc, #152]	; (800aab0 <USB_EP0_OutStart+0xb8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d90a      	bls.n	800aa32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa2c:	d101      	bne.n	800aa32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e037      	b.n	800aaa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa38:	461a      	mov	r2, r3
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa60:	f043 0318 	orr.w	r3, r3, #24
 800aa64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa7a:	7afb      	ldrb	r3, [r7, #11]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d10f      	bne.n	800aaa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aa9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	4f54300a 	.word	0x4f54300a

0800aab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3301      	adds	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a13      	ldr	r2, [pc, #76]	; (800ab18 <USB_CoreReset+0x64>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d901      	bls.n	800aad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e01b      	b.n	800ab0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	daf2      	bge.n	800aac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f043 0201 	orr.w	r2, r3, #1
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a09      	ldr	r2, [pc, #36]	; (800ab18 <USB_CoreReset+0x64>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d901      	bls.n	800aafc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e006      	b.n	800ab0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d0f0      	beq.n	800aaea <USB_CoreReset+0x36>

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	00030d40 	.word	0x00030d40

0800ab1c <__NVIC_SystemReset>:
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ab20:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ab24:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <__NVIC_SystemReset+0x20>)
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ab2c:	4903      	ldr	r1, [pc, #12]	; (800ab3c <__NVIC_SystemReset+0x20>)
 800ab2e:	4b04      	ldr	r3, [pc, #16]	; (800ab40 <__NVIC_SystemReset+0x24>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60cb      	str	r3, [r1, #12]
 800ab34:	f3bf 8f4f 	dsb	sy
    __NOP();
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <__NVIC_SystemReset+0x1c>
 800ab3c:	e000ed00 	.word	0xe000ed00
 800ab40:	05fa0004 	.word	0x05fa0004

0800ab44 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800ab50:	f240 401c 	movw	r0, #1052	; 0x41c
 800ab54:	f003 fc3c 	bl	800e3d0 <malloc>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e03f      	b.n	800abee <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2202      	movs	r2, #2
 800abcc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	e000      	b.n	800abee <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e027      	b.n	800ac60 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac16:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac50:	4618      	mov	r0, r3
 800ac52:	f003 fbc5 	bl	800e3e0 <free>
  pdev->pClassData = NULL;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac78:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03f      	beq.n	800ad16 <USBD_DFU_Setup+0xae>
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	f040 80c3 	bne.w	800ae22 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	d830      	bhi.n	800ad06 <USBD_DFU_Setup+0x9e>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <USBD_DFU_Setup+0x44>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800acfd 	.word	0x0800acfd
 800acb0:	0800acc9 	.word	0x0800acc9
 800acb4:	0800acd3 	.word	0x0800acd3
 800acb8:	0800acdd 	.word	0x0800acdd
 800acbc:	0800ace5 	.word	0x0800ace5
 800acc0:	0800aced 	.word	0x0800aced
 800acc4:	0800acf5 	.word	0x0800acf5
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa62 	bl	800b194 <DFU_Download>
      break;
 800acd0:	e020      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fac7 	bl	800b268 <DFU_Upload>
      break;
 800acda:	e01b      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fb9b 	bl	800b418 <DFU_GetStatus>
      break;
 800ace2:	e017      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fc49 	bl	800b57c <DFU_ClearStatus>
      break;
 800acea:	e013      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fc95 	bl	800b61c <DFU_GetState>
      break;
 800acf2:	e00f      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fca5 	bl	800b644 <DFU_Abort>
      break;
 800acfa:	e00b      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f9e8 	bl	800b0d4 <DFU_Detach>
      break;
 800ad04:	e006      	b.n	800ad14 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fd7f 	bl	800c80c <USBD_CtlError>
      ret = USBD_FAIL;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	77fb      	strb	r3, [r7, #31]
      break;
 800ad12:	bf00      	nop
    }
    break;
 800ad14:	e08c      	b.n	800ae30 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b0b      	cmp	r3, #11
 800ad1c:	d878      	bhi.n	800ae10 <USBD_DFU_Setup+0x1a8>
 800ad1e:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <USBD_DFU_Setup+0xbc>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad55 	.word	0x0800ad55
 800ad28:	0800ae1f 	.word	0x0800ae1f
 800ad2c:	0800ae11 	.word	0x0800ae11
 800ad30:	0800ae11 	.word	0x0800ae11
 800ad34:	0800ae11 	.word	0x0800ae11
 800ad38:	0800ae11 	.word	0x0800ae11
 800ad3c:	0800ad7d 	.word	0x0800ad7d
 800ad40:	0800ae11 	.word	0x0800ae11
 800ad44:	0800ae11 	.word	0x0800ae11
 800ad48:	0800ae11 	.word	0x0800ae11
 800ad4c:	0800ada7 	.word	0x0800ada7
 800ad50:	0800add1 	.word	0x0800add1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d107      	bne.n	800ad6e <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad5e:	f107 030e 	add.w	r3, r7, #14
 800ad62:	2202      	movs	r2, #2
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fdc1 	bl	800c8ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ad6c:	e058      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fd4b 	bl	800c80c <USBD_CtlError>
        ret = USBD_FAIL;
 800ad76:	2303      	movs	r3, #3
 800ad78:	77fb      	strb	r3, [r7, #31]
      break;
 800ad7a:	e051      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	885b      	ldrh	r3, [r3, #2]
 800ad80:	0a1b      	lsrs	r3, r3, #8
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	2b21      	cmp	r3, #33	; 0x21
 800ad86:	d107      	bne.n	800ad98 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800ad88:	4b2c      	ldr	r3, [pc, #176]	; (800ae3c <USBD_DFU_Setup+0x1d4>)
 800ad8a:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	88db      	ldrh	r3, [r3, #6]
 800ad90:	2b09      	cmp	r3, #9
 800ad92:	bf28      	it	cs
 800ad94:	2309      	movcs	r3, #9
 800ad96:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad98:	8afb      	ldrh	r3, [r7, #22]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	69b9      	ldr	r1, [r7, #24]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f001 fda5 	bl	800c8ee <USBD_CtlSendData>
      break;
 800ada4:	e03c      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adac:	2b03      	cmp	r3, #3
 800adae:	d108      	bne.n	800adc2 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800adb6:	2201      	movs	r2, #1
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f001 fd97 	bl	800c8ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800adc0:	e02e      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 fd21 	bl	800c80c <USBD_CtlError>
        ret = USBD_FAIL;
 800adca:	2303      	movs	r3, #3
 800adcc:	77fb      	strb	r3, [r7, #31]
      break;
 800adce:	e027      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	885b      	ldrh	r3, [r3, #2]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d113      	bne.n	800ae02 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d107      	bne.n	800adf4 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	885b      	ldrh	r3, [r3, #2]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	461a      	mov	r2, r3
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800adf2:	e015      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fd08 	bl	800c80c <USBD_CtlError>
          ret = USBD_FAIL;
 800adfc:	2303      	movs	r3, #3
 800adfe:	77fb      	strb	r3, [r7, #31]
      break;
 800ae00:	e00e      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 fd01 	bl	800c80c <USBD_CtlError>
        ret = USBD_FAIL;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	77fb      	strb	r3, [r7, #31]
      break;
 800ae0e:	e007      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fcfa 	bl	800c80c <USBD_CtlError>
      ret = USBD_FAIL;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	77fb      	strb	r3, [r7, #31]
      break;
 800ae1c:	e000      	b.n	800ae20 <USBD_DFU_Setup+0x1b8>
      break;
 800ae1e:	bf00      	nop
    }
    break;
 800ae20:	e006      	b.n	800ae30 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 fcf1 	bl	800c80c <USBD_CtlError>
    ret = USBD_FAIL;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	77fb      	strb	r3, [r7, #31]
    break;
 800ae2e:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae30:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2000005a 	.word	0x2000005a

0800ae40 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	221b      	movs	r2, #27
 800ae4c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800ae4e:	4b03      	ldr	r3, [pc, #12]	; (800ae5c <USBD_DFU_GetCfgDesc+0x1c>)
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	20000048 	.word	0x20000048

0800ae60 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae86:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae8e:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	f040 80bc 	bne.w	800b014 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d17a      	bne.n	800af9c <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	f000 8092 	beq.w	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	d15c      	bne.n	800af76 <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b21      	cmp	r3, #33	; 0x21
 800aec2:	d124      	bne.n	800af0e <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	461a      	mov	r2, r3
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	789b      	ldrb	r3, [r3, #2]
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	441a      	add	r2, r3
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	78db      	ldrb	r3, [r3, #3]
 800aeee:	041b      	lsls	r3, r3, #16
 800aef0:	441a      	add	r2, r3
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	791b      	ldrb	r3, [r3, #4]
 800af02:	061b      	lsls	r3, r3, #24
 800af04:	441a      	add	r2, r3
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800af0c:	e063      	b.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b41      	cmp	r3, #65	; 0x41
 800af14:	d15f      	bne.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	461a      	mov	r2, r3
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	789b      	ldrb	r3, [r3, #2]
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	441a      	add	r2, r3
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	78db      	ldrb	r3, [r3, #3]
 800af40:	041b      	lsls	r3, r3, #16
 800af42:	441a      	add	r2, r3
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	791b      	ldrb	r3, [r3, #4]
 800af54:	061b      	lsls	r3, r3, #24
 800af56:	441a      	add	r2, r3
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d031      	beq.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	e057      	b.n	800b026 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800af8a:	2301      	movs	r3, #1
 800af8c:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800af8e:	f107 030c 	add.w	r3, r7, #12
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fc39 	bl	800c80c <USBD_CtlError>
 800af9a:	e01c      	b.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d917      	bls.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800afac:	4b20      	ldr	r3, [pc, #128]	; (800b030 <USBD_DFU_EP0_TxReady+0x1b8>)
 800afae:	4413      	add	r3, r2
 800afb0:	029a      	lsls	r2, r3, #10
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800afb8:	4413      	add	r3, r2
 800afba:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	69f8      	ldr	r0, [r7, #28]
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800afca:	4798      	blx	r3
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e027      	b.n	800b026 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	2200      	movs	r2, #0
 800afda:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2203      	movs	r2, #3
 800afea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800b012:	e007      	b.n	800b024 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b01a:	2b07      	cmp	r3, #7
 800b01c:	d102      	bne.n	800b024 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb5e 	bl	800b6e0 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	003ffffe 	.word	0x003ffffe

0800b034 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
	...

0800b04c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	220a      	movs	r2, #10
 800b058:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800b05a:	4b03      	ldr	r3, [pc, #12]	; (800b068 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	20000064 	.word	0x20000064

0800b06c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	460b      	mov	r3, r1
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b080:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800b082:	7afb      	ldrb	r3, [r7, #11]
 800b084:	2b06      	cmp	r3, #6
 800b086:	d808      	bhi.n	800b09a <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	4905      	ldr	r1, [pc, #20]	; (800b0a4 <USBD_DFU_GetUsrStringDesc+0x38>)
 800b090:	4618      	mov	r0, r3
 800b092:	f001 fbcc 	bl	800c82e <USBD_GetString>
    return USBD_StrDesc;
 800b096:	4b03      	ldr	r3, [pc, #12]	; (800b0a4 <USBD_DFU_GetUsrStringDesc+0x38>)
 800b098:	e000      	b.n	800b09c <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800b09a:	2300      	movs	r3, #0
  }
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000814 	.word	0x20000814

0800b0a8 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e004      	b.n	800b0c6 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0e4:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d013      	beq.n	800b118 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d00e      	beq.n	800b118 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800b100:	2b05      	cmp	r3, #5
 800b102:	d009      	beq.n	800b118 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800b10a:	2b06      	cmp	r3, #6
 800b10c:	d004      	beq.n	800b118 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800b114:	2b09      	cmp	r3, #9
 800b116:	d125      	bne.n	800b164 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800b164:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <DFU_Detach+0xbc>)
 800b166:	7d5b      	ldrb	r3, [r3, #21]
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fb62 	bl	800b83a <USBD_Stop>
    (void)USBD_Start(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fb53 	bl	800b822 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800b17c:	e004      	b.n	800b188 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	885b      	ldrh	r3, [r3, #2]
 800b182:	4618      	mov	r0, r3
 800b184:	f7f9 fd00 	bl	8004b88 <HAL_Delay>
}
 800b188:	bf00      	nop
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20000048 	.word	0x20000048

0800b194 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1a4:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d02d      	beq.n	800b20a <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d004      	beq.n	800b1c2 <DFU_Download+0x2e>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d11e      	bne.n	800b200 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	885b      	ldrh	r3, [r3, #2]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	88db      	ldrh	r3, [r3, #6]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2203      	movs	r2, #3
 800b1de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 fba4 	bl	800c946 <USBD_CtlPrepareRx>
 800b1fe:	e02e      	b.n	800b25e <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f001 fb02 	bl	800c80c <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800b208:	e029      	b.n	800b25e <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b210:	2b05      	cmp	r3, #5
 800b212:	d004      	beq.n	800b21e <DFU_Download+0x8a>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d11a      	bne.n	800b254 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2206      	movs	r2, #6
 800b22a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800b252:	e004      	b.n	800b25e <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 fad8 	bl	800c80c <USBD_CtlError>
}
 800b25c:	e7ff      	b.n	800b25e <DFU_Download+0xca>
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b278:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b280:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	88db      	ldrh	r3, [r3, #6]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80a9 	beq.w	800b3de <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b292:	2b02      	cmp	r3, #2
 800b294:	d005      	beq.n	800b2a2 <DFU_Upload+0x3a>
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	f040 8091 	bne.w	800b3c4 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	885b      	ldrh	r3, [r3, #2]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	88db      	ldrh	r3, [r3, #6]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d12c      	bne.n	800b31e <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d901      	bls.n	800b2d2 <DFU_Upload+0x6a>
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	e000      	b.n	800b2d4 <DFU_Upload+0x6c>
 800b2d2:	2209      	movs	r2, #9
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2221      	movs	r2, #33	; 0x21
 800b308:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2241      	movs	r2, #65	; 0x41
 800b30e:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2203      	movs	r2, #3
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 fae9 	bl	800c8ee <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800b31c:	e076      	b.n	800b40c <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b324:	2b01      	cmp	r3, #1
 800b326:	d932      	bls.n	800b38e <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2209      	movs	r2, #9
 800b32c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b35a:	4b2e      	ldr	r3, [pc, #184]	; (800b414 <DFU_Upload+0x1ac>)
 800b35c:	4413      	add	r3, r2
 800b35e:	029a      	lsls	r2, r3, #10
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b366:	4413      	add	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	6979      	ldr	r1, [r7, #20]
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800b378:	4798      	blx	r3
 800b37a:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b382:	461a      	mov	r2, r3
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fab1 	bl	800c8ee <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800b38c:	e03e      	b.n	800b40c <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	220f      	movs	r2, #15
 800b392:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 fa25 	bl	800c80c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800b3c2:	e023      	b.n	800b40c <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fa18 	bl	800c80c <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800b3dc:	e016      	b.n	800b40c <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800b40a:	e7ff      	b.n	800b40c <DFU_Upload+0x1a4>
 800b40c:	bf00      	nop
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	003ffffe 	.word	0x003ffffe

0800b418 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b426:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b42e:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b436:	2b03      	cmp	r3, #3
 800b438:	d002      	beq.n	800b440 <DFU_GetStatus+0x28>
 800b43a:	2b06      	cmp	r3, #6
 800b43c:	d051      	beq.n	800b4e2 <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 800b43e:	e08e      	b.n	800b55e <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b446:	2b00      	cmp	r3, #0
 800b448:	d034      	beq.n	800b4b4 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2204      	movs	r2, #4
 800b44e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10e      	bne.n	800b49e <DFU_GetStatus+0x86>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	2b41      	cmp	r3, #65	; 0x41
 800b486:	d10a      	bne.n	800b49e <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800b498:	2100      	movs	r1, #0
 800b49a:	4798      	blx	r3
    break;
 800b49c:	e05f      	b.n	800b55e <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4798      	blx	r3
    break;
 800b4b2:	e054      	b.n	800b55e <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800b4e0:	e03d      	b.n	800b55e <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d116      	bne.n	800b51a <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2207      	movs	r2, #7
 800b4f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800b518:	e020      	b.n	800b55c <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11b      	bne.n	800b55c <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800b524:	4b14      	ldr	r3, [pc, #80]	; (800b578 <DFU_GetStatus+0x160>)
 800b526:	7d1b      	ldrb	r3, [r3, #20]
 800b528:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d015      	beq.n	800b55c <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800b55c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800b564:	2206      	movs	r2, #6
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 f9c0 	bl	800c8ee <USBD_CtlSendData>
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000048 	.word	0x20000048

0800b57c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b58a:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b592:	2b0a      	cmp	r3, #10
 800b594:	d11e      	bne.n	800b5d4 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2202      	movs	r2, #2
 800b59a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 800b5d2:	e01d      	b.n	800b610 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	220e      	movs	r2, #14
 800b5e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800b632:	2201      	movs	r2, #1
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f959 	bl	800c8ee <USBD_CtlSendData>
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b652:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d013      	beq.n	800b686 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800b664:	2b03      	cmp	r3, #3
 800b666:	d00e      	beq.n	800b686 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800b66e:	2b05      	cmp	r3, #5
 800b670:	d009      	beq.n	800b686 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800b678:	2b06      	cmp	r3, #6
 800b67a:	d004      	beq.n	800b686 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800b682:	2b09      	cmp	r3, #9
 800b684:	d125      	bne.n	800b6d2 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2202      	movs	r2, #2
 800b68a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ee:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800b6f8:	4b1d      	ldr	r3, [pc, #116]	; (800b770 <DFU_Leave+0x90>)
 800b6fa:	7d1b      	ldrb	r3, [r3, #20]
 800b6fc:	f003 0304 	and.w	r3, r3, #4
 800b700:	2b00      	cmp	r3, #0
 800b702:	d016      	beq.n	800b732 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2206      	movs	r2, #6
 800b708:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800b730:	e01a      	b.n	800b768 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2208      	movs	r2, #8
 800b736:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f86b 	bl	800b83a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800b764:	f7ff f9da 	bl	800ab1c <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20000048 	.word	0x20000048

0800b774 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b788:	2303      	movs	r3, #3
 800b78a:	e025      	b.n	800b7d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d003      	beq.n	800b79e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	79fa      	ldrb	r2, [r7, #7]
 800b7ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f001 fbdb 	bl	800cf88 <USBD_LL_Init>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e010      	b.n	800b81a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b808:	f107 020e 	add.w	r2, r7, #14
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	4602      	mov	r2, r0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fbf8 	bl	800d020 <USBD_LL_Start>
 800b830:	4603      	mov	r3, r0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d009      	beq.n	800b860 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	6852      	ldr	r2, [r2, #4]
 800b858:	b2d2      	uxtb	r2, r2
 800b85a:	4611      	mov	r1, r2
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fbef 	bl	800d056 <USBD_LL_Stop>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]

  return ret;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d009      	beq.n	800b8ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	78fa      	ldrb	r2, [r7, #3]
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	4798      	blx	r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d007      	beq.n	800b8fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	78fa      	ldrb	r2, [r7, #3]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
  }

  return USBD_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 ff3e 	bl	800c798 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b92a:	461a      	mov	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b938:	f003 031f 	and.w	r3, r3, #31
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d00e      	beq.n	800b95e <USBD_LL_SetupStage+0x5a>
 800b940:	2b01      	cmp	r3, #1
 800b942:	d302      	bcc.n	800b94a <USBD_LL_SetupStage+0x46>
 800b944:	2b02      	cmp	r3, #2
 800b946:	d014      	beq.n	800b972 <USBD_LL_SetupStage+0x6e>
 800b948:	e01d      	b.n	800b986 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa18 	bl	800bd88 <USBD_StdDevReq>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
      break;
 800b95c:	e020      	b.n	800b9a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fa7c 	bl	800be64 <USBD_StdItfReq>
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]
      break;
 800b970:	e016      	b.n	800b9a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fab8 	bl	800bef0 <USBD_StdEPReq>
 800b980:	4603      	mov	r3, r0
 800b982:	73fb      	strb	r3, [r7, #15]
      break;
 800b984:	e00c      	b.n	800b9a0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b98c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b990:	b2db      	uxtb	r3, r3
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 fb9f 	bl	800d0d8 <USBD_LL_StallEP>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73fb      	strb	r3, [r7, #15]
      break;
 800b99e:	bf00      	nop
  }

  return ret;
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b086      	sub	sp, #24
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9b8:	7afb      	ldrb	r3, [r7, #11]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d137      	bne.n	800ba2e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d14a      	bne.n	800ba66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d913      	bls.n	800ba04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	689a      	ldr	r2, [r3, #8]
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	68da      	ldr	r2, [r3, #12]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	bf28      	it	cs
 800b9f6:	4613      	movcs	r3, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 ffbf 	bl	800c980 <USBD_CtlContinueRx>
 800ba02:	e030      	b.n	800ba66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00a      	beq.n	800ba26 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d105      	bne.n	800ba26 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 ffbb 	bl	800c9a2 <USBD_CtlSendStatus>
 800ba2c:	e01b      	b.n	800ba66 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d013      	beq.n	800ba62 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d10e      	bne.n	800ba62 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	7afa      	ldrb	r2, [r7, #11]
 800ba4e:	4611      	mov	r1, r2
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	4798      	blx	r3
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	e002      	b.n	800ba68 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e000      	b.n	800ba68 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d16a      	bne.n	800bb5a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3314      	adds	r3, #20
 800ba88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d155      	bne.n	800bb40 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d914      	bls.n	800baca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	1ad2      	subs	r2, r2, r3
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 ff34 	bl	800c924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800babc:	2300      	movs	r3, #0
 800babe:	2200      	movs	r2, #0
 800bac0:	2100      	movs	r1, #0
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f001 fbb2 	bl	800d22c <USBD_LL_PrepareReceive>
 800bac8:	e03a      	b.n	800bb40 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d11c      	bne.n	800bb10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bade:	429a      	cmp	r2, r3
 800bae0:	d316      	bcc.n	800bb10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800baec:	429a      	cmp	r2, r3
 800baee:	d20f      	bcs.n	800bb10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 ff15 	bl	800c924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb02:	2300      	movs	r3, #0
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f001 fb8f 	bl	800d22c <USBD_LL_PrepareReceive>
 800bb0e:	e017      	b.n	800bb40 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00a      	beq.n	800bb32 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d105      	bne.n	800bb32 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb32:	2180      	movs	r1, #128	; 0x80
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f001 facf 	bl	800d0d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f000 ff44 	bl	800c9c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d123      	bne.n	800bb92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff fe9b 	bl	800b886 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb58:	e01b      	b.n	800bb92 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d10e      	bne.n	800bb8e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	7afa      	ldrb	r2, [r7, #11]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	4798      	blx	r3
 800bb80:	4603      	mov	r3, r0
 800bb82:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	e002      	b.n	800bb94 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e000      	b.n	800bb94 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	6852      	ldr	r2, [r2, #4]
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	4611      	mov	r1, r2
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe0:	2340      	movs	r3, #64	; 0x40
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fa50 	bl	800d08c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2240      	movs	r2, #64	; 0x40
 800bbf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbfc:	2340      	movs	r3, #64	; 0x40
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2180      	movs	r1, #128	; 0x80
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 fa42 	bl	800d08c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2240      	movs	r2, #64	; 0x40
 800bc12:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2204      	movs	r2, #4
 800bc56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d105      	bne.n	800bc86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d10b      	bne.n	800bcbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d009      	beq.n	800bd40 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	6852      	ldr	r2, [r2, #4]
 800bd38:	b2d2      	uxtb	r2, r2
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
  }

  return USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b087      	sub	sp, #28
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd68:	8a3b      	ldrh	r3, [r7, #16]
 800bd6a:	021b      	lsls	r3, r3, #8
 800bd6c:	b21a      	sxth	r2, r3
 800bd6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	b21b      	sxth	r3, r3
 800bd76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd78:	89fb      	ldrh	r3, [r7, #14]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
	...

0800bd88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd9e:	2b20      	cmp	r3, #32
 800bda0:	d004      	beq.n	800bdac <USBD_StdDevReq+0x24>
 800bda2:	2b40      	cmp	r3, #64	; 0x40
 800bda4:	d002      	beq.n	800bdac <USBD_StdDevReq+0x24>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <USBD_StdDevReq+0x38>
 800bdaa:	e050      	b.n	800be4e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bdbe:	e04b      	b.n	800be58 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	2b09      	cmp	r3, #9
 800bdc6:	d83c      	bhi.n	800be42 <USBD_StdDevReq+0xba>
 800bdc8:	a201      	add	r2, pc, #4	; (adr r2, 800bdd0 <USBD_StdDevReq+0x48>)
 800bdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdce:	bf00      	nop
 800bdd0:	0800be25 	.word	0x0800be25
 800bdd4:	0800be39 	.word	0x0800be39
 800bdd8:	0800be43 	.word	0x0800be43
 800bddc:	0800be2f 	.word	0x0800be2f
 800bde0:	0800be43 	.word	0x0800be43
 800bde4:	0800be03 	.word	0x0800be03
 800bde8:	0800bdf9 	.word	0x0800bdf9
 800bdec:	0800be43 	.word	0x0800be43
 800bdf0:	0800be1b 	.word	0x0800be1b
 800bdf4:	0800be0d 	.word	0x0800be0d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f9ce 	bl	800c19c <USBD_GetDescriptor>
      break;
 800be00:	e024      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fb45 	bl	800c494 <USBD_SetAddress>
      break;
 800be0a:	e01f      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fb82 	bl	800c518 <USBD_SetConfig>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]
      break;
 800be18:	e018      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fc1f 	bl	800c660 <USBD_GetConfig>
      break;
 800be22:	e013      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fc4e 	bl	800c6c8 <USBD_GetStatus>
      break;
 800be2c:	e00e      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fc7c 	bl	800c72e <USBD_SetFeature>
      break;
 800be36:	e009      	b.n	800be4c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fc8b 	bl	800c756 <USBD_ClrFeature>
      break;
 800be40:	e004      	b.n	800be4c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fce1 	bl	800c80c <USBD_CtlError>
      break;
 800be4a:	bf00      	nop
    }
    break;
 800be4c:	e004      	b.n	800be58 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fcdb 	bl	800c80c <USBD_CtlError>
    break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop

0800be64 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	d003      	beq.n	800be86 <USBD_StdItfReq+0x22>
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	d001      	beq.n	800be86 <USBD_StdItfReq+0x22>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d12a      	bne.n	800bedc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8c:	3b01      	subs	r3, #1
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d81d      	bhi.n	800bece <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	889b      	ldrh	r3, [r3, #4]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d813      	bhi.n	800bec4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	88db      	ldrh	r3, [r3, #6]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d110      	bne.n	800bed8 <USBD_StdItfReq+0x74>
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10d      	bne.n	800bed8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fd70 	bl	800c9a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bec2:	e009      	b.n	800bed8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fca0 	bl	800c80c <USBD_CtlError>
      break;
 800becc:	e004      	b.n	800bed8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fc9b 	bl	800c80c <USBD_CtlError>
      break;
 800bed6:	e000      	b.n	800beda <USBD_StdItfReq+0x76>
      break;
 800bed8:	bf00      	nop
    }
    break;
 800beda:	e004      	b.n	800bee6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fc94 	bl	800c80c <USBD_CtlError>
    break;
 800bee4:	bf00      	nop
  }

  return ret;
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf0c:	2b20      	cmp	r3, #32
 800bf0e:	d004      	beq.n	800bf1a <USBD_StdEPReq+0x2a>
 800bf10:	2b40      	cmp	r3, #64	; 0x40
 800bf12:	d002      	beq.n	800bf1a <USBD_StdEPReq+0x2a>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00a      	beq.n	800bf2e <USBD_StdEPReq+0x3e>
 800bf18:	e135      	b.n	800c186 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4798      	blx	r3
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2c:	e130      	b.n	800c190 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	785b      	ldrb	r3, [r3, #1]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d03e      	beq.n	800bfb4 <USBD_StdEPReq+0xc4>
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d002      	beq.n	800bf40 <USBD_StdEPReq+0x50>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d077      	beq.n	800c02e <USBD_StdEPReq+0x13e>
 800bf3e:	e11c      	b.n	800c17a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d002      	beq.n	800bf50 <USBD_StdEPReq+0x60>
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d015      	beq.n	800bf7a <USBD_StdEPReq+0x8a>
 800bf4e:	e02b      	b.n	800bfa8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <USBD_StdEPReq+0x80>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b80      	cmp	r3, #128	; 0x80
 800bf5a:	d009      	beq.n	800bf70 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f8b9 	bl	800d0d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf66:	2180      	movs	r1, #128	; 0x80
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 f8b5 	bl	800d0d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bf6e:	e020      	b.n	800bfb2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fc4a 	bl	800c80c <USBD_CtlError>
        break;
 800bf78:	e01b      	b.n	800bfb2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	885b      	ldrh	r3, [r3, #2]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10e      	bne.n	800bfa0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_StdEPReq+0xb0>
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b80      	cmp	r3, #128	; 0x80
 800bf8c:	d008      	beq.n	800bfa0 <USBD_StdEPReq+0xb0>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d104      	bne.n	800bfa0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 f89c 	bl	800d0d8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fcfe 	bl	800c9a2 <USBD_CtlSendStatus>

        break;
 800bfa6:	e004      	b.n	800bfb2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fc2e 	bl	800c80c <USBD_CtlError>
        break;
 800bfb0:	bf00      	nop
      }
      break;
 800bfb2:	e0e7      	b.n	800c184 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d002      	beq.n	800bfc4 <USBD_StdEPReq+0xd4>
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d015      	beq.n	800bfee <USBD_StdEPReq+0xfe>
 800bfc2:	e02d      	b.n	800c020 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00c      	beq.n	800bfe4 <USBD_StdEPReq+0xf4>
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	2b80      	cmp	r3, #128	; 0x80
 800bfce:	d009      	beq.n	800bfe4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 f87f 	bl	800d0d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfda:	2180      	movs	r1, #128	; 0x80
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 f87b 	bl	800d0d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bfe2:	e023      	b.n	800c02c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fc10 	bl	800c80c <USBD_CtlError>
        break;
 800bfec:	e01e      	b.n	800c02c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	885b      	ldrh	r3, [r3, #2]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d119      	bne.n	800c02a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 f886 	bl	800d116 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fcc9 	bl	800c9a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
        }
        break;
 800c01e:	e004      	b.n	800c02a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fbf2 	bl	800c80c <USBD_CtlError>
        break;
 800c028:	e000      	b.n	800c02c <USBD_StdEPReq+0x13c>
        break;
 800c02a:	bf00      	nop
      }
      break;
 800c02c:	e0aa      	b.n	800c184 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c034:	2b02      	cmp	r3, #2
 800c036:	d002      	beq.n	800c03e <USBD_StdEPReq+0x14e>
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d032      	beq.n	800c0a2 <USBD_StdEPReq+0x1b2>
 800c03c:	e097      	b.n	800c16e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <USBD_StdEPReq+0x164>
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b80      	cmp	r3, #128	; 0x80
 800c048:	d004      	beq.n	800c054 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fbdd 	bl	800c80c <USBD_CtlError>
          break;
 800c052:	e091      	b.n	800c178 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	da0b      	bge.n	800c074 <USBD_StdEPReq+0x184>
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	3310      	adds	r3, #16
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	4413      	add	r3, r2
 800c070:	3304      	adds	r3, #4
 800c072:	e00b      	b.n	800c08c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4413      	add	r3, r2
 800c08a:	3304      	adds	r3, #4
 800c08c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2202      	movs	r2, #2
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc27 	bl	800c8ee <USBD_CtlSendData>
        break;
 800c0a0:	e06a      	b.n	800c178 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da11      	bge.n	800c0ce <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3324      	adds	r3, #36	; 0x24
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d117      	bne.n	800c0f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fba0 	bl	800c80c <USBD_CtlError>
            break;
 800c0cc:	e054      	b.n	800c178 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d104      	bne.n	800c0f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fb8d 	bl	800c80c <USBD_CtlError>
            break;
 800c0f2:	e041      	b.n	800c178 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da0b      	bge.n	800c114 <USBD_StdEPReq+0x224>
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	3310      	adds	r3, #16
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	4413      	add	r3, r2
 800c110:	3304      	adds	r3, #4
 800c112:	e00b      	b.n	800c12c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	3304      	adds	r3, #4
 800c12c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <USBD_StdEPReq+0x24a>
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b80      	cmp	r3, #128	; 0x80
 800c138:	d103      	bne.n	800c142 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e00e      	b.n	800c160 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f804 	bl	800d154 <USBD_LL_IsStallEP>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e002      	b.n	800c160 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2202      	movs	r2, #2
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fbc1 	bl	800c8ee <USBD_CtlSendData>
          break;
 800c16c:	e004      	b.n	800c178 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fb4b 	bl	800c80c <USBD_CtlError>
        break;
 800c176:	bf00      	nop
      }
      break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb45 	bl	800c80c <USBD_CtlError>
      break;
 800c182:	bf00      	nop
    }
    break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb3f 	bl	800c80c <USBD_CtlError>
    break;
 800c18e:	bf00      	nop
  }

  return ret;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b06      	cmp	r3, #6
 800c1be:	f200 813b 	bhi.w	800c438 <USBD_GetDescriptor+0x29c>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <USBD_GetDescriptor+0x2c>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1fd 	.word	0x0800c1fd
 800c1d0:	0800c23d 	.word	0x0800c23d
 800c1d4:	0800c439 	.word	0x0800c439
 800c1d8:	0800c439 	.word	0x0800c439
 800c1dc:	0800c3d9 	.word	0x0800c3d9
 800c1e0:	0800c405 	.word	0x0800c405
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7c12      	ldrb	r2, [r2, #16]
 800c1f0:	f107 0108 	add.w	r1, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
    break;
 800c1fa:	e125      	b.n	800c448 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7c1b      	ldrb	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10d      	bne.n	800c220 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	f107 0208 	add.w	r2, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c21e:	e113      	b.n	800c448 <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f107 0208 	add.w	r2, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	2202      	movs	r2, #2
 800c238:	701a      	strb	r2, [r3, #0]
    break;
 800c23a:	e105      	b.n	800c448 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	885b      	ldrh	r3, [r3, #2]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b05      	cmp	r3, #5
 800c244:	f200 80ac 	bhi.w	800c3a0 <USBD_GetDescriptor+0x204>
 800c248:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_GetDescriptor+0xb4>)
 800c24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24e:	bf00      	nop
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c29d 	.word	0x0800c29d
 800c258:	0800c2d1 	.word	0x0800c2d1
 800c25c:	0800c305 	.word	0x0800c305
 800c260:	0800c339 	.word	0x0800c339
 800c264:	0800c36d 	.word	0x0800c36d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	7c12      	ldrb	r2, [r2, #16]
 800c280:	f107 0108 	add.w	r1, r7, #8
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
 800c288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c28a:	e0a4      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fabc 	bl	800c80c <USBD_CtlError>
        err++;
 800c294:	7afb      	ldrb	r3, [r7, #11]
 800c296:	3301      	adds	r3, #1
 800c298:	72fb      	strb	r3, [r7, #11]
      break;
 800c29a:	e09c      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00b      	beq.n	800c2c0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	7c12      	ldrb	r2, [r2, #16]
 800c2b4:	f107 0108 	add.w	r1, r7, #8
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2be:	e08a      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 faa2 	bl	800c80c <USBD_CtlError>
        err++;
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	72fb      	strb	r3, [r7, #11]
      break;
 800c2ce:	e082      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	f107 0108 	add.w	r1, r7, #8
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2f2:	e070      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa88 	bl	800c80c <USBD_CtlError>
        err++;
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	3301      	adds	r3, #1
 800c300:	72fb      	strb	r3, [r7, #11]
      break;
 800c302:	e068      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 0108 	add.w	r1, r7, #8
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c326:	e056      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa6e 	bl	800c80c <USBD_CtlError>
        err++;
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	3301      	adds	r3, #1
 800c334:	72fb      	strb	r3, [r7, #11]
      break;
 800c336:	e04e      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 0108 	add.w	r1, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35a:	e03c      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa54 	bl	800c80c <USBD_CtlError>
        err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
      break;
 800c36a:	e034      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7c12      	ldrb	r2, [r2, #16]
 800c384:	f107 0108 	add.w	r1, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c38e:	e022      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa3a 	bl	800c80c <USBD_CtlError>
        err++;
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	3301      	adds	r3, #1
 800c39c:	72fb      	strb	r3, [r7, #11]
      break;
 800c39e:	e01a      	b.n	800c3d6 <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00c      	beq.n	800c3c6 <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	683a      	ldr	r2, [r7, #0]
 800c3b6:	8852      	ldrh	r2, [r2, #2]
 800c3b8:	b2d1      	uxtb	r1, r2
 800c3ba:	f107 0208 	add.w	r2, r7, #8
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	4798      	blx	r3
 800c3c2:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 800c3c4:	e006      	b.n	800c3d4 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fa1f 	bl	800c80c <USBD_CtlError>
        err++;
 800c3ce:	7afb      	ldrb	r3, [r7, #11]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3d4:	bf00      	nop
    }
    break;
 800c3d6:	e037      	b.n	800c448 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	7c1b      	ldrb	r3, [r3, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d109      	bne.n	800c3f4 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e8:	f107 0208 	add.w	r2, r7, #8
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	4798      	blx	r3
 800c3f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c3f2:	e029      	b.n	800c448 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fa08 	bl	800c80c <USBD_CtlError>
      err++;
 800c3fc:	7afb      	ldrb	r3, [r7, #11]
 800c3fe:	3301      	adds	r3, #1
 800c400:	72fb      	strb	r3, [r7, #11]
    break;
 800c402:	e021      	b.n	800c448 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7c1b      	ldrb	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10d      	bne.n	800c428 <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c414:	f107 0208 	add.w	r2, r7, #8
 800c418:	4610      	mov	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3301      	adds	r3, #1
 800c422:	2207      	movs	r2, #7
 800c424:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c426:	e00f      	b.n	800c448 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f9ee 	bl	800c80c <USBD_CtlError>
      err++;
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	3301      	adds	r3, #1
 800c434:	72fb      	strb	r3, [r7, #11]
    break;
 800c436:	e007      	b.n	800c448 <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f9e6 	bl	800c80c <USBD_CtlError>
    err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
    break;
 800c446:	bf00      	nop
  }

  if (err != 0U)
 800c448:	7afb      	ldrb	r3, [r7, #11]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d11e      	bne.n	800c48c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	88db      	ldrh	r3, [r3, #6]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d016      	beq.n	800c484 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 800c456:	893b      	ldrh	r3, [r7, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00e      	beq.n	800c47a <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	88da      	ldrh	r2, [r3, #6]
 800c460:	893b      	ldrh	r3, [r7, #8]
 800c462:	4293      	cmp	r3, r2
 800c464:	bf28      	it	cs
 800c466:	4613      	movcs	r3, r2
 800c468:	b29b      	uxth	r3, r3
 800c46a:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c46c:	893b      	ldrh	r3, [r7, #8]
 800c46e:	461a      	mov	r2, r3
 800c470:	68f9      	ldr	r1, [r7, #12]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa3b 	bl	800c8ee <USBD_CtlSendData>
 800c478:	e009      	b.n	800c48e <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f9c5 	bl	800c80c <USBD_CtlError>
 800c482:	e004      	b.n	800c48e <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fa8c 	bl	800c9a2 <USBD_CtlSendStatus>
 800c48a:	e000      	b.n	800c48e <USBD_GetDescriptor+0x2f2>
    return;
 800c48c:	bf00      	nop
    }
  }
}
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	889b      	ldrh	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d130      	bne.n	800c508 <USBD_SetAddress+0x74>
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	88db      	ldrh	r3, [r3, #6]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d12c      	bne.n	800c508 <USBD_SetAddress+0x74>
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	885b      	ldrh	r3, [r3, #2]
 800c4b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c4b4:	d828      	bhi.n	800c508 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	885b      	ldrh	r3, [r3, #2]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d104      	bne.n	800c4d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f99c 	bl	800c80c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d4:	e01c      	b.n	800c510 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7bfa      	ldrb	r2, [r7, #15]
 800c4da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fe62 	bl	800d1ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fa5a 	bl	800c9a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fc:	e008      	b.n	800c510 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c506:	e003      	b.n	800c510 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f97e 	bl	800c80c <USBD_CtlError>
  }
}
 800c510:	bf00      	nop
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	885b      	ldrh	r3, [r3, #2]
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	4b4b      	ldr	r3, [pc, #300]	; (800c65c <USBD_SetConfig+0x144>)
 800c52e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c530:	4b4a      	ldr	r3, [pc, #296]	; (800c65c <USBD_SetConfig+0x144>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d905      	bls.n	800c544 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f966 	bl	800c80c <USBD_CtlError>
    return USBD_FAIL;
 800c540:	2303      	movs	r3, #3
 800c542:	e087      	b.n	800c654 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d002      	beq.n	800c554 <USBD_SetConfig+0x3c>
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d025      	beq.n	800c59e <USBD_SetConfig+0x86>
 800c552:	e071      	b.n	800c638 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c554:	4b41      	ldr	r3, [pc, #260]	; (800c65c <USBD_SetConfig+0x144>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01c      	beq.n	800c596 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c55c:	4b3f      	ldr	r3, [pc, #252]	; (800c65c <USBD_SetConfig+0x144>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c566:	4b3d      	ldr	r3, [pc, #244]	; (800c65c <USBD_SetConfig+0x144>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff f995 	bl	800b89c <USBD_SetClassConfig>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f944 	bl	800c80c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c584:	e065      	b.n	800c652 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fa0b 	bl	800c9a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2203      	movs	r2, #3
 800c590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c594:	e05d      	b.n	800c652 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa03 	bl	800c9a2 <USBD_CtlSendStatus>
    break;
 800c59c:	e059      	b.n	800c652 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <USBD_SetConfig+0x144>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d112      	bne.n	800c5cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c5ae:	4b2b      	ldr	r3, [pc, #172]	; (800c65c <USBD_SetConfig+0x144>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5b8:	4b28      	ldr	r3, [pc, #160]	; (800c65c <USBD_SetConfig+0x144>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff f988 	bl	800b8d4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f9ec 	bl	800c9a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c5ca:	e042      	b.n	800c652 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c5cc:	4b23      	ldr	r3, [pc, #140]	; (800c65c <USBD_SetConfig+0x144>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d02a      	beq.n	800c630 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff f976 	bl	800b8d4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c5e8:	4b1c      	ldr	r3, [pc, #112]	; (800c65c <USBD_SetConfig+0x144>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5f2:	4b1a      	ldr	r3, [pc, #104]	; (800c65c <USBD_SetConfig+0x144>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff f94f 	bl	800b89c <USBD_SetClassConfig>
 800c5fe:	4603      	mov	r3, r0
 800c600:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00f      	beq.n	800c628 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f8fe 	bl	800c80c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff f95b 	bl	800b8d4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2202      	movs	r2, #2
 800c622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c626:	e014      	b.n	800c652 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f9ba 	bl	800c9a2 <USBD_CtlSendStatus>
    break;
 800c62e:	e010      	b.n	800c652 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f9b6 	bl	800c9a2 <USBD_CtlSendStatus>
    break;
 800c636:	e00c      	b.n	800c652 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f8e6 	bl	800c80c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c640:	4b06      	ldr	r3, [pc, #24]	; (800c65c <USBD_SetConfig+0x144>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff f944 	bl	800b8d4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c64c:	2303      	movs	r3, #3
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	bf00      	nop
  }

  return ret;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20000913 	.word	0x20000913

0800c660 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	88db      	ldrh	r3, [r3, #6]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d004      	beq.n	800c67c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f8c9 	bl	800c80c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c67a:	e021      	b.n	800c6c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c682:	2b01      	cmp	r3, #1
 800c684:	db17      	blt.n	800c6b6 <USBD_GetConfig+0x56>
 800c686:	2b02      	cmp	r3, #2
 800c688:	dd02      	ble.n	800c690 <USBD_GetConfig+0x30>
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d00b      	beq.n	800c6a6 <USBD_GetConfig+0x46>
 800c68e:	e012      	b.n	800c6b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3308      	adds	r3, #8
 800c69a:	2201      	movs	r2, #1
 800c69c:	4619      	mov	r1, r3
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f925 	bl	800c8ee <USBD_CtlSendData>
      break;
 800c6a4:	e00c      	b.n	800c6c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f91d 	bl	800c8ee <USBD_CtlSendData>
      break;
 800c6b4:	e004      	b.n	800c6c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f8a7 	bl	800c80c <USBD_CtlError>
      break;
 800c6be:	bf00      	nop
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d81e      	bhi.n	800c71c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	88db      	ldrh	r3, [r3, #6]
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d004      	beq.n	800c6f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f88f 	bl	800c80c <USBD_CtlError>
      break;
 800c6ee:	e01a      	b.n	800c726 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	f043 0202 	orr.w	r2, r3, #2
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	330c      	adds	r3, #12
 800c710:	2202      	movs	r2, #2
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f8ea 	bl	800c8ee <USBD_CtlSendData>
    break;
 800c71a:	e004      	b.n	800c726 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f874 	bl	800c80c <USBD_CtlError>
    break;
 800c724:	bf00      	nop
  }
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	885b      	ldrh	r3, [r3, #2]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d106      	bne.n	800c74e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f92a 	bl	800c9a2 <USBD_CtlSendStatus>
  }
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b082      	sub	sp, #8
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c766:	3b01      	subs	r3, #1
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d80b      	bhi.n	800c784 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	885b      	ldrh	r3, [r3, #2]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d10c      	bne.n	800c78e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f910 	bl	800c9a2 <USBD_CtlSendStatus>
      }
      break;
 800c782:	e004      	b.n	800c78e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f840 	bl	800c80c <USBD_CtlError>
      break;
 800c78c:	e000      	b.n	800c790 <USBD_ClrFeature+0x3a>
      break;
 800c78e:	bf00      	nop
  }
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	781a      	ldrb	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff fac1 	bl	800bd4a <SWAPBYTE>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7ff fab4 	bl	800bd4a <SWAPBYTE>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff faa7 	bl	800bd4a <SWAPBYTE>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461a      	mov	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	80da      	strh	r2, [r3, #6]
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c816:	2180      	movs	r1, #128	; 0x80
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fc5d 	bl	800d0d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c81e:	2100      	movs	r1, #0
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fc59 	bl	800d0d8 <USBD_LL_StallEP>
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b086      	sub	sp, #24
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d036      	beq.n	800c8b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c848:	6938      	ldr	r0, [r7, #16]
 800c84a:	f000 f836 	bl	800c8ba <USBD_GetLen>
 800c84e:	4603      	mov	r3, r0
 800c850:	3301      	adds	r3, #1
 800c852:	b29b      	uxth	r3, r3
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	7812      	ldrb	r2, [r2, #0]
 800c866:	701a      	strb	r2, [r3, #0]
  idx++;
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	3301      	adds	r3, #1
 800c86c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	4413      	add	r3, r2
 800c874:	2203      	movs	r2, #3
 800c876:	701a      	strb	r2, [r3, #0]
  idx++;
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	3301      	adds	r3, #1
 800c87c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c87e:	e013      	b.n	800c8a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	4413      	add	r3, r2
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	7812      	ldrb	r2, [r2, #0]
 800c88a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	3301      	adds	r3, #1
 800c890:	613b      	str	r3, [r7, #16]
    idx++;
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	3301      	adds	r3, #1
 800c896:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e7      	bne.n	800c880 <USBD_GetString+0x52>
 800c8b0:	e000      	b.n	800c8b4 <USBD_GetString+0x86>
    return;
 800c8b2:	bf00      	nop
  }
}
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8ba:	b480      	push	{r7}
 800c8bc:	b085      	sub	sp, #20
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c8ca:	e005      	b.n	800c8d8 <USBD_GetLen+0x1e>
  {
    len++;
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1f5      	bne.n	800c8cc <USBD_GetLen+0x12>
  }

  return len;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	60b9      	str	r1, [r7, #8]
 800c8f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	2100      	movs	r1, #0
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 fc68 	bl	800d1ea <USBD_LL_Transmit>

  return USBD_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	2100      	movs	r1, #0
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f000 fc57 	bl	800d1ea <USBD_LL_Transmit>

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2203      	movs	r2, #3
 800c956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2100      	movs	r1, #0
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fc5b 	bl	800d22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	2100      	movs	r1, #0
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f000 fc4a 	bl	800d22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2204      	movs	r2, #4
 800c9ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fc16 	bl	800d1ea <USBD_LL_Transmit>

  return USBD_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2205      	movs	r2, #5
 800c9d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2100      	movs	r1, #0
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fc24 	bl	800d22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4912      	ldr	r1, [pc, #72]	; (800ca40 <MX_USB_DEVICE_Init+0x50>)
 800c9f8:	4812      	ldr	r0, [pc, #72]	; (800ca44 <MX_USB_DEVICE_Init+0x54>)
 800c9fa:	f7fe febb 	bl	800b774 <USBD_Init>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca04:	f7f7 fb9e 	bl	8004144 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800ca08:	490f      	ldr	r1, [pc, #60]	; (800ca48 <MX_USB_DEVICE_Init+0x58>)
 800ca0a:	480e      	ldr	r0, [pc, #56]	; (800ca44 <MX_USB_DEVICE_Init+0x54>)
 800ca0c:	f7fe fee8 	bl	800b7e0 <USBD_RegisterClass>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca16:	f7f7 fb95 	bl	8004144 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800ca1a:	490c      	ldr	r1, [pc, #48]	; (800ca4c <MX_USB_DEVICE_Init+0x5c>)
 800ca1c:	4809      	ldr	r0, [pc, #36]	; (800ca44 <MX_USB_DEVICE_Init+0x54>)
 800ca1e:	f7fe fb43 	bl	800b0a8 <USBD_DFU_RegisterMedia>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca28:	f7f7 fb8c 	bl	8004144 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca2c:	4805      	ldr	r0, [pc, #20]	; (800ca44 <MX_USB_DEVICE_Init+0x54>)
 800ca2e:	f7fe fef8 	bl	800b822 <USBD_Start>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca38:	f7f7 fb84 	bl	8004144 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca3c:	bf00      	nop
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20000070 	.word	0x20000070
 800ca44:	20000920 	.word	0x20000920
 800ca48:	2000000c 	.word	0x2000000c
 800ca4c:	200000c0 	.word	0x200000c0

0800ca50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	6039      	str	r1, [r7, #0]
 800ca5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2212      	movs	r2, #18
 800ca60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca62:	4b03      	ldr	r3, [pc, #12]	; (800ca70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	2000008c 	.word	0x2000008c

0800ca74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	6039      	str	r1, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2204      	movs	r2, #4
 800ca84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca86:	4b03      	ldr	r3, [pc, #12]	; (800ca94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	200000a0 	.word	0x200000a0

0800ca98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	4907      	ldr	r1, [pc, #28]	; (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
 800caae:	4808      	ldr	r0, [pc, #32]	; (800cad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cab0:	f7ff febd 	bl	800c82e <USBD_GetString>
 800cab4:	e004      	b.n	800cac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	4904      	ldr	r1, [pc, #16]	; (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
 800caba:	4805      	ldr	r0, [pc, #20]	; (800cad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cabc:	f7ff feb7 	bl	800c82e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac0:	4b02      	ldr	r3, [pc, #8]	; (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000bf0 	.word	0x20000bf0
 800cad0:	0800e590 	.word	0x0800e590

0800cad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	4904      	ldr	r1, [pc, #16]	; (800caf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cae4:	4804      	ldr	r0, [pc, #16]	; (800caf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cae6:	f7ff fea2 	bl	800c82e <USBD_GetString>
  return USBD_StrDesc;
 800caea:	4b02      	ldr	r3, [pc, #8]	; (800caf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	20000bf0 	.word	0x20000bf0
 800caf8:	0800e5b0 	.word	0x0800e5b0

0800cafc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	221a      	movs	r2, #26
 800cb0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb0e:	f000 f843 	bl	800cb98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb12:	4b02      	ldr	r3, [pc, #8]	; (800cb1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200000a4 	.word	0x200000a4

0800cb20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d105      	bne.n	800cb3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4907      	ldr	r1, [pc, #28]	; (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb36:	4808      	ldr	r0, [pc, #32]	; (800cb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb38:	f7ff fe79 	bl	800c82e <USBD_GetString>
 800cb3c:	e004      	b.n	800cb48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	4904      	ldr	r1, [pc, #16]	; (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb42:	4805      	ldr	r0, [pc, #20]	; (800cb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb44:	f7ff fe73 	bl	800c82e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb48:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20000bf0 	.word	0x20000bf0
 800cb58:	0800e5c4 	.word	0x0800e5c4

0800cb5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	6039      	str	r1, [r7, #0]
 800cb66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d105      	bne.n	800cb7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	4907      	ldr	r1, [pc, #28]	; (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb72:	4808      	ldr	r0, [pc, #32]	; (800cb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb74:	f7ff fe5b 	bl	800c82e <USBD_GetString>
 800cb78:	e004      	b.n	800cb84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	4904      	ldr	r1, [pc, #16]	; (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb7e:	4805      	ldr	r0, [pc, #20]	; (800cb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb80:	f7ff fe55 	bl	800c82e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb84:	4b02      	ldr	r3, [pc, #8]	; (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20000bf0 	.word	0x20000bf0
 800cb94:	0800e5d0 	.word	0x0800e5d0

0800cb98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <Get_SerialNum+0x44>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <Get_SerialNum+0x48>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <Get_SerialNum+0x4c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbbe:	2208      	movs	r2, #8
 800cbc0:	4909      	ldr	r1, [pc, #36]	; (800cbe8 <Get_SerialNum+0x50>)
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f814 	bl	800cbf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbc8:	2204      	movs	r2, #4
 800cbca:	4908      	ldr	r1, [pc, #32]	; (800cbec <Get_SerialNum+0x54>)
 800cbcc:	68b8      	ldr	r0, [r7, #8]
 800cbce:	f000 f80f 	bl	800cbf0 <IntToUnicode>
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	1fff7a10 	.word	0x1fff7a10
 800cbe0:	1fff7a14 	.word	0x1fff7a14
 800cbe4:	1fff7a18 	.word	0x1fff7a18
 800cbe8:	200000a6 	.word	0x200000a6
 800cbec:	200000b6 	.word	0x200000b6

0800cbf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]
 800cc06:	e027      	b.n	800cc58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	0f1b      	lsrs	r3, r3, #28
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d80b      	bhi.n	800cc28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	0f1b      	lsrs	r3, r3, #28
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	440b      	add	r3, r1
 800cc20:	3230      	adds	r2, #48	; 0x30
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	e00a      	b.n	800cc3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	0f1b      	lsrs	r3, r3, #28
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	4619      	mov	r1, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	440b      	add	r3, r1
 800cc38:	3237      	adds	r2, #55	; 0x37
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	3301      	adds	r3, #1
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	3301      	adds	r3, #1
 800cc56:	75fb      	strb	r3, [r7, #23]
 800cc58:	7dfa      	ldrb	r2, [r7, #23]
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d3d3      	bcc.n	800cc08 <IntToUnicode+0x18>
  }
}
 800cc60:	bf00      	nop
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800cc70:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800cc80:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800cc94:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b085      	sub	sp, #20
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800ccae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800ccc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	460b      	mov	r3, r1
 800cce0:	607a      	str	r2, [r7, #4]
 800cce2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800cce4:	7afb      	ldrb	r3, [r7, #11]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d000      	beq.n	800ccec <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800ccea:	e000      	b.n	800ccee <MEM_If_GetStatus_FS+0x18>
    break;
 800ccec:	bf00      	nop
  }
  return (USBD_OK);
 800ccee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08a      	sub	sp, #40	; 0x28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd04:	f107 0314 	add.w	r3, r7, #20
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	605a      	str	r2, [r3, #4]
 800cd0e:	609a      	str	r2, [r3, #8]
 800cd10:	60da      	str	r2, [r3, #12]
 800cd12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd1c:	d13a      	bne.n	800cd94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	4b1e      	ldr	r3, [pc, #120]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd26:	4a1d      	ldr	r2, [pc, #116]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd28:	f043 0301 	orr.w	r3, r3, #1
 800cd2c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd2e:	4b1b      	ldr	r3, [pc, #108]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd40:	2302      	movs	r3, #2
 800cd42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd44:	2300      	movs	r3, #0
 800cd46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd4c:	230a      	movs	r3, #10
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd50:	f107 0314 	add.w	r3, r7, #20
 800cd54:	4619      	mov	r1, r3
 800cd56:	4812      	ldr	r0, [pc, #72]	; (800cda0 <HAL_PCD_MspInit+0xa4>)
 800cd58:	f7f8 fdb0 	bl	80058bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd60:	4a0e      	ldr	r2, [pc, #56]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd66:	6353      	str	r3, [r2, #52]	; 0x34
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd70:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd76:	6453      	str	r3, [r2, #68]	; 0x44
 800cd78:	4b08      	ldr	r3, [pc, #32]	; (800cd9c <HAL_PCD_MspInit+0xa0>)
 800cd7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd84:	2200      	movs	r2, #0
 800cd86:	2100      	movs	r1, #0
 800cd88:	2043      	movs	r0, #67	; 0x43
 800cd8a:	f7f8 fa5c 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd8e:	2043      	movs	r0, #67	; 0x43
 800cd90:	f7f8 fa75 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd94:	bf00      	nop
 800cd96:	3728      	adds	r7, #40	; 0x28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	40023800 	.word	0x40023800
 800cda0:	40020000 	.word	0x40020000

0800cda4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f7fe fda2 	bl	800b904 <USBD_LL_SetupStage>
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cdda:	78fa      	ldrb	r2, [r7, #3]
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	4613      	mov	r3, r2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	1a9b      	subs	r3, r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	440b      	add	r3, r1
 800cde8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	78fb      	ldrb	r3, [r7, #3]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	f7fe fdda 	bl	800b9aa <USBD_LL_DataOutStage>
}
 800cdf6:	bf00      	nop
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	460b      	mov	r3, r1
 800ce08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	4613      	mov	r3, r2
 800ce16:	00db      	lsls	r3, r3, #3
 800ce18:	1a9b      	subs	r3, r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	440b      	add	r3, r1
 800ce1e:	3348      	adds	r3, #72	; 0x48
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	78fb      	ldrb	r3, [r7, #3]
 800ce24:	4619      	mov	r1, r3
 800ce26:	f7fe fe23 	bl	800ba70 <USBD_LL_DataInStage>
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe ff27 	bl	800bc94 <USBD_LL_SOF>
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce56:	2301      	movs	r3, #1
 800ce58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d102      	bne.n	800ce68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ce62:	2300      	movs	r3, #0
 800ce64:	73fb      	strb	r3, [r7, #15]
 800ce66:	e008      	b.n	800ce7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d102      	bne.n	800ce76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ce70:	2301      	movs	r3, #1
 800ce72:	73fb      	strb	r3, [r7, #15]
 800ce74:	e001      	b.n	800ce7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ce76:	f7f7 f965 	bl	8004144 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce80:	7bfa      	ldrb	r2, [r7, #15]
 800ce82:	4611      	mov	r1, r2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe feca 	bl	800bc1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe fe83 	bl	800bb9c <USBD_LL_Reset>
}
 800ce96:	bf00      	nop
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
	...

0800cea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fec5 	bl	800bc3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	6812      	ldr	r2, [r2, #0]
 800cec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a1b      	ldr	r3, [r3, #32]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d005      	beq.n	800cee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ced4:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <HAL_PCD_SuspendCallback+0x48>)
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	4a03      	ldr	r2, [pc, #12]	; (800cee8 <HAL_PCD_SuspendCallback+0x48>)
 800ceda:	f043 0306 	orr.w	r3, r3, #6
 800cede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	e000ed00 	.word	0xe000ed00

0800ceec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe feb4 	bl	800bc68 <USBD_LL_Resume>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf1a:	78fa      	ldrb	r2, [r7, #3]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fedf 	bl	800bce2 <USBD_LL_IsoOUTIncomplete>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf3e:	78fa      	ldrb	r2, [r7, #3]
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fec0 	bl	800bcc8 <USBD_LL_IsoINIncomplete>
}
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fecc 	bl	800bcfc <USBD_LL_DevConnected>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe fec9 	bl	800bd12 <USBD_LL_DevDisconnected>
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d13c      	bne.n	800d012 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf98:	4a20      	ldr	r2, [pc, #128]	; (800d01c <USBD_LL_Init+0x94>)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a1e      	ldr	r2, [pc, #120]	; (800d01c <USBD_LL_Init+0x94>)
 800cfa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cfa8:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <USBD_LL_Init+0x94>)
 800cfaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cfae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <USBD_LL_Init+0x94>)
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cfb6:	4b19      	ldr	r3, [pc, #100]	; (800d01c <USBD_LL_Init+0x94>)
 800cfb8:	2202      	movs	r2, #2
 800cfba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cfbc:	4b17      	ldr	r3, [pc, #92]	; (800d01c <USBD_LL_Init+0x94>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfc2:	4b16      	ldr	r3, [pc, #88]	; (800d01c <USBD_LL_Init+0x94>)
 800cfc4:	2202      	movs	r2, #2
 800cfc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfc8:	4b14      	ldr	r3, [pc, #80]	; (800d01c <USBD_LL_Init+0x94>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <USBD_LL_Init+0x94>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfd4:	4b11      	ldr	r3, [pc, #68]	; (800d01c <USBD_LL_Init+0x94>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cfda:	4b10      	ldr	r3, [pc, #64]	; (800d01c <USBD_LL_Init+0x94>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfe0:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <USBD_LL_Init+0x94>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfe6:	480d      	ldr	r0, [pc, #52]	; (800d01c <USBD_LL_Init+0x94>)
 800cfe8:	f7f8 ff54 	bl	8005e94 <HAL_PCD_Init>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cff2:	f7f7 f8a7 	bl	8004144 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cff6:	2180      	movs	r1, #128	; 0x80
 800cff8:	4808      	ldr	r0, [pc, #32]	; (800d01c <USBD_LL_Init+0x94>)
 800cffa:	f7fa f880 	bl	80070fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cffe:	2240      	movs	r2, #64	; 0x40
 800d000:	2100      	movs	r1, #0
 800d002:	4806      	ldr	r0, [pc, #24]	; (800d01c <USBD_LL_Init+0x94>)
 800d004:	f7fa f834 	bl	8007070 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d008:	2280      	movs	r2, #128	; 0x80
 800d00a:	2101      	movs	r1, #1
 800d00c:	4803      	ldr	r0, [pc, #12]	; (800d01c <USBD_LL_Init+0x94>)
 800d00e:	f7fa f82f 	bl	8007070 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20000df0 	.word	0x20000df0

0800d020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d036:	4618      	mov	r0, r3
 800d038:	f7f9 f849 	bl	80060ce <HAL_PCD_Start>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	4618      	mov	r0, r3
 800d044:	f000 f914 	bl	800d270 <USBD_Get_USB_Status>
 800d048:	4603      	mov	r3, r0
 800d04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b084      	sub	sp, #16
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f9 f861 	bl	8006134 <HAL_PCD_Stop>
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 f8f9 	bl	800d270 <USBD_Get_USB_Status>
 800d07e:	4603      	mov	r3, r0
 800d080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d082:	7bbb      	ldrb	r3, [r7, #14]
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4603      	mov	r3, r0
 800d09c:	70fb      	strb	r3, [r7, #3]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	70bb      	strb	r3, [r7, #2]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0b4:	78bb      	ldrb	r3, [r7, #2]
 800d0b6:	883a      	ldrh	r2, [r7, #0]
 800d0b8:	78f9      	ldrb	r1, [r7, #3]
 800d0ba:	f7f9 fc42 	bl	8006942 <HAL_PCD_EP_Open>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f8d3 	bl	800d270 <USBD_Get_USB_Status>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0f2:	78fa      	ldrb	r2, [r7, #3]
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f9 fd20 	bl	8006b3c <HAL_PCD_EP_SetStall>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 f8b4 	bl	800d270 <USBD_Get_USB_Status>
 800d108:	4603      	mov	r3, r0
 800d10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7f9 fd65 	bl	8006c04 <HAL_PCD_EP_ClrStall>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	4618      	mov	r0, r3
 800d142:	f000 f895 	bl	800d270 <USBD_Get_USB_Status>
 800d146:	4603      	mov	r3, r0
 800d148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d166:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da0b      	bge.n	800d188 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d176:	68f9      	ldr	r1, [r7, #12]
 800d178:	4613      	mov	r3, r2
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	1a9b      	subs	r3, r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	440b      	add	r3, r1
 800d182:	333e      	adds	r3, #62	; 0x3e
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	e00b      	b.n	800d1a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d188:	78fb      	ldrb	r3, [r7, #3]
 800d18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d18e:	68f9      	ldr	r1, [r7, #12]
 800d190:	4613      	mov	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	440b      	add	r3, r1
 800d19a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d19e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f9 fb94 	bl	80068f8 <HAL_PCD_SetAddress>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f84a 	bl	800d270 <USBD_Get_USB_Status>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b086      	sub	sp, #24
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	603b      	str	r3, [r7, #0]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d208:	7af9      	ldrb	r1, [r7, #11]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	f7f9 fc4b 	bl	8006aa8 <HAL_PCD_EP_Transmit>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 f829 	bl	800d270 <USBD_Get_USB_Status>
 800d21e:	4603      	mov	r3, r0
 800d220:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d222:	7dbb      	ldrb	r3, [r7, #22]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	607a      	str	r2, [r7, #4]
 800d236:	603b      	str	r3, [r7, #0]
 800d238:	460b      	mov	r3, r1
 800d23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d24a:	7af9      	ldrb	r1, [r7, #11]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	f7f9 fbdf 	bl	8006a12 <HAL_PCD_EP_Receive>
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f808 	bl	800d270 <USBD_Get_USB_Status>
 800d260:	4603      	mov	r3, r0
 800d262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d264:	7dbb      	ldrb	r3, [r7, #22]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	2b03      	cmp	r3, #3
 800d282:	d817      	bhi.n	800d2b4 <USBD_Get_USB_Status+0x44>
 800d284:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <USBD_Get_USB_Status+0x1c>)
 800d286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28a:	bf00      	nop
 800d28c:	0800d29d 	.word	0x0800d29d
 800d290:	0800d2a3 	.word	0x0800d2a3
 800d294:	0800d2a9 	.word	0x0800d2a9
 800d298:	0800d2af 	.word	0x0800d2af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a0:	e00b      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a6:	e008      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ac:	e005      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b2:	e002      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b8:	bf00      	nop
  }
  return usb_status;
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <_ZdlPvj>:
 800d2c8:	f000 b800 	b.w	800d2cc <_ZdlPv>

0800d2cc <_ZdlPv>:
 800d2cc:	f001 b888 	b.w	800e3e0 <free>

0800d2d0 <pow>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	ed2d 8b04 	vpush	{d8-d9}
 800d2d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d5ac <pow+0x2dc>
 800d2dc:	b08d      	sub	sp, #52	; 0x34
 800d2de:	ec57 6b10 	vmov	r6, r7, d0
 800d2e2:	ec55 4b11 	vmov	r4, r5, d1
 800d2e6:	f000 f963 	bl	800d5b0 <__ieee754_pow>
 800d2ea:	f999 3000 	ldrsb.w	r3, [r9]
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d2f6:	eef0 8a60 	vmov.f32	s17, s1
 800d2fa:	46c8      	mov	r8, r9
 800d2fc:	d05f      	beq.n	800d3be <pow+0xee>
 800d2fe:	4622      	mov	r2, r4
 800d300:	462b      	mov	r3, r5
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f3 fbb5 	bl	8000a74 <__aeabi_dcmpun>
 800d30a:	4683      	mov	fp, r0
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d156      	bne.n	800d3be <pow+0xee>
 800d310:	4632      	mov	r2, r6
 800d312:	463b      	mov	r3, r7
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f3 fbac 	bl	8000a74 <__aeabi_dcmpun>
 800d31c:	9001      	str	r0, [sp, #4]
 800d31e:	b1e8      	cbz	r0, 800d35c <pow+0x8c>
 800d320:	2200      	movs	r2, #0
 800d322:	2300      	movs	r3, #0
 800d324:	4620      	mov	r0, r4
 800d326:	4629      	mov	r1, r5
 800d328:	f7f3 fb72 	bl	8000a10 <__aeabi_dcmpeq>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d046      	beq.n	800d3be <pow+0xee>
 800d330:	2301      	movs	r3, #1
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	4b96      	ldr	r3, [pc, #600]	; (800d590 <pow+0x2c0>)
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	4b96      	ldr	r3, [pc, #600]	; (800d594 <pow+0x2c4>)
 800d33a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d33e:	2200      	movs	r2, #0
 800d340:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	2b02      	cmp	r3, #2
 800d348:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d34c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d350:	d033      	beq.n	800d3ba <pow+0xea>
 800d352:	a802      	add	r0, sp, #8
 800d354:	f000 fefb 	bl	800e14e <matherr>
 800d358:	bb48      	cbnz	r0, 800d3ae <pow+0xde>
 800d35a:	e05d      	b.n	800d418 <pow+0x148>
 800d35c:	f04f 0a00 	mov.w	sl, #0
 800d360:	f04f 0b00 	mov.w	fp, #0
 800d364:	4652      	mov	r2, sl
 800d366:	465b      	mov	r3, fp
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f3 fb50 	bl	8000a10 <__aeabi_dcmpeq>
 800d370:	ec4b ab19 	vmov	d9, sl, fp
 800d374:	2800      	cmp	r0, #0
 800d376:	d054      	beq.n	800d422 <pow+0x152>
 800d378:	4652      	mov	r2, sl
 800d37a:	465b      	mov	r3, fp
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f3 fb46 	bl	8000a10 <__aeabi_dcmpeq>
 800d384:	4680      	mov	r8, r0
 800d386:	b318      	cbz	r0, 800d3d0 <pow+0x100>
 800d388:	2301      	movs	r3, #1
 800d38a:	9302      	str	r3, [sp, #8]
 800d38c:	4b80      	ldr	r3, [pc, #512]	; (800d590 <pow+0x2c0>)
 800d38e:	9303      	str	r3, [sp, #12]
 800d390:	9b01      	ldr	r3, [sp, #4]
 800d392:	930a      	str	r3, [sp, #40]	; 0x28
 800d394:	9b00      	ldr	r3, [sp, #0]
 800d396:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d39a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d39e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d0d5      	beq.n	800d352 <pow+0x82>
 800d3a6:	4b7b      	ldr	r3, [pc, #492]	; (800d594 <pow+0x2c4>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b0:	b11b      	cbz	r3, 800d3ba <pow+0xea>
 800d3b2:	f000 ffe3 	bl	800e37c <__errno>
 800d3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b8:	6003      	str	r3, [r0, #0]
 800d3ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d3be:	eeb0 0a48 	vmov.f32	s0, s16
 800d3c2:	eef0 0a68 	vmov.f32	s1, s17
 800d3c6:	b00d      	add	sp, #52	; 0x34
 800d3c8:	ecbd 8b04 	vpop	{d8-d9}
 800d3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d0:	ec45 4b10 	vmov	d0, r4, r5
 800d3d4:	f000 feb3 	bl	800e13e <finite>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0f0      	beq.n	800d3be <pow+0xee>
 800d3dc:	4652      	mov	r2, sl
 800d3de:	465b      	mov	r3, fp
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f3 fb1e 	bl	8000a24 <__aeabi_dcmplt>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d0e8      	beq.n	800d3be <pow+0xee>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	9302      	str	r3, [sp, #8]
 800d3f0:	4b67      	ldr	r3, [pc, #412]	; (800d590 <pow+0x2c0>)
 800d3f2:	9303      	str	r3, [sp, #12]
 800d3f4:	f999 3000 	ldrsb.w	r3, [r9]
 800d3f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d3fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d400:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d404:	b913      	cbnz	r3, 800d40c <pow+0x13c>
 800d406:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d40a:	e7a2      	b.n	800d352 <pow+0x82>
 800d40c:	4962      	ldr	r1, [pc, #392]	; (800d598 <pow+0x2c8>)
 800d40e:	2000      	movs	r0, #0
 800d410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d414:	2b02      	cmp	r3, #2
 800d416:	d19c      	bne.n	800d352 <pow+0x82>
 800d418:	f000 ffb0 	bl	800e37c <__errno>
 800d41c:	2321      	movs	r3, #33	; 0x21
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	e7c5      	b.n	800d3ae <pow+0xde>
 800d422:	eeb0 0a48 	vmov.f32	s0, s16
 800d426:	eef0 0a68 	vmov.f32	s1, s17
 800d42a:	f000 fe88 	bl	800e13e <finite>
 800d42e:	9000      	str	r0, [sp, #0]
 800d430:	2800      	cmp	r0, #0
 800d432:	f040 8081 	bne.w	800d538 <pow+0x268>
 800d436:	ec47 6b10 	vmov	d0, r6, r7
 800d43a:	f000 fe80 	bl	800e13e <finite>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d07a      	beq.n	800d538 <pow+0x268>
 800d442:	ec45 4b10 	vmov	d0, r4, r5
 800d446:	f000 fe7a 	bl	800e13e <finite>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d074      	beq.n	800d538 <pow+0x268>
 800d44e:	ec53 2b18 	vmov	r2, r3, d8
 800d452:	ee18 0a10 	vmov	r0, s16
 800d456:	4619      	mov	r1, r3
 800d458:	f7f3 fb0c 	bl	8000a74 <__aeabi_dcmpun>
 800d45c:	f999 9000 	ldrsb.w	r9, [r9]
 800d460:	4b4b      	ldr	r3, [pc, #300]	; (800d590 <pow+0x2c0>)
 800d462:	b1b0      	cbz	r0, 800d492 <pow+0x1c2>
 800d464:	2201      	movs	r2, #1
 800d466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d46a:	9b00      	ldr	r3, [sp, #0]
 800d46c:	930a      	str	r3, [sp, #40]	; 0x28
 800d46e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d472:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d476:	f1b9 0f00 	cmp.w	r9, #0
 800d47a:	d0c4      	beq.n	800d406 <pow+0x136>
 800d47c:	4652      	mov	r2, sl
 800d47e:	465b      	mov	r3, fp
 800d480:	4650      	mov	r0, sl
 800d482:	4659      	mov	r1, fp
 800d484:	f7f3 f986 	bl	8000794 <__aeabi_ddiv>
 800d488:	f1b9 0f02 	cmp.w	r9, #2
 800d48c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d490:	e7c1      	b.n	800d416 <pow+0x146>
 800d492:	2203      	movs	r2, #3
 800d494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d498:	900a      	str	r0, [sp, #40]	; 0x28
 800d49a:	4629      	mov	r1, r5
 800d49c:	4620      	mov	r0, r4
 800d49e:	2200      	movs	r2, #0
 800d4a0:	4b3e      	ldr	r3, [pc, #248]	; (800d59c <pow+0x2cc>)
 800d4a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d4a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d4aa:	f7f3 f849 	bl	8000540 <__aeabi_dmul>
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	460d      	mov	r5, r1
 800d4b2:	f1b9 0f00 	cmp.w	r9, #0
 800d4b6:	d124      	bne.n	800d502 <pow+0x232>
 800d4b8:	4b39      	ldr	r3, [pc, #228]	; (800d5a0 <pow+0x2d0>)
 800d4ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d4be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	4652      	mov	r2, sl
 800d4c6:	465b      	mov	r3, fp
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	f7f3 faab 	bl	8000a24 <__aeabi_dcmplt>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d056      	beq.n	800d580 <pow+0x2b0>
 800d4d2:	ec45 4b10 	vmov	d0, r4, r5
 800d4d6:	f000 fe47 	bl	800e168 <rint>
 800d4da:	4622      	mov	r2, r4
 800d4dc:	462b      	mov	r3, r5
 800d4de:	ec51 0b10 	vmov	r0, r1, d0
 800d4e2:	f7f3 fa95 	bl	8000a10 <__aeabi_dcmpeq>
 800d4e6:	b920      	cbnz	r0, 800d4f2 <pow+0x222>
 800d4e8:	4b2e      	ldr	r3, [pc, #184]	; (800d5a4 <pow+0x2d4>)
 800d4ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d4ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d4f2:	f998 3000 	ldrsb.w	r3, [r8]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d142      	bne.n	800d580 <pow+0x2b0>
 800d4fa:	f000 ff3f 	bl	800e37c <__errno>
 800d4fe:	2322      	movs	r3, #34	; 0x22
 800d500:	e78d      	b.n	800d41e <pow+0x14e>
 800d502:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <pow+0x2d8>)
 800d504:	2200      	movs	r2, #0
 800d506:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d50a:	4630      	mov	r0, r6
 800d50c:	4652      	mov	r2, sl
 800d50e:	465b      	mov	r3, fp
 800d510:	4639      	mov	r1, r7
 800d512:	f7f3 fa87 	bl	8000a24 <__aeabi_dcmplt>
 800d516:	2800      	cmp	r0, #0
 800d518:	d0eb      	beq.n	800d4f2 <pow+0x222>
 800d51a:	ec45 4b10 	vmov	d0, r4, r5
 800d51e:	f000 fe23 	bl	800e168 <rint>
 800d522:	4622      	mov	r2, r4
 800d524:	462b      	mov	r3, r5
 800d526:	ec51 0b10 	vmov	r0, r1, d0
 800d52a:	f7f3 fa71 	bl	8000a10 <__aeabi_dcmpeq>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d1df      	bne.n	800d4f2 <pow+0x222>
 800d532:	2200      	movs	r2, #0
 800d534:	4b18      	ldr	r3, [pc, #96]	; (800d598 <pow+0x2c8>)
 800d536:	e7da      	b.n	800d4ee <pow+0x21e>
 800d538:	2200      	movs	r2, #0
 800d53a:	2300      	movs	r3, #0
 800d53c:	ec51 0b18 	vmov	r0, r1, d8
 800d540:	f7f3 fa66 	bl	8000a10 <__aeabi_dcmpeq>
 800d544:	2800      	cmp	r0, #0
 800d546:	f43f af3a 	beq.w	800d3be <pow+0xee>
 800d54a:	ec47 6b10 	vmov	d0, r6, r7
 800d54e:	f000 fdf6 	bl	800e13e <finite>
 800d552:	2800      	cmp	r0, #0
 800d554:	f43f af33 	beq.w	800d3be <pow+0xee>
 800d558:	ec45 4b10 	vmov	d0, r4, r5
 800d55c:	f000 fdef 	bl	800e13e <finite>
 800d560:	2800      	cmp	r0, #0
 800d562:	f43f af2c 	beq.w	800d3be <pow+0xee>
 800d566:	2304      	movs	r3, #4
 800d568:	9302      	str	r3, [sp, #8]
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <pow+0x2c0>)
 800d56c:	9303      	str	r3, [sp, #12]
 800d56e:	2300      	movs	r3, #0
 800d570:	930a      	str	r3, [sp, #40]	; 0x28
 800d572:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d576:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d57a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800d57e:	e7b8      	b.n	800d4f2 <pow+0x222>
 800d580:	a802      	add	r0, sp, #8
 800d582:	f000 fde4 	bl	800e14e <matherr>
 800d586:	2800      	cmp	r0, #0
 800d588:	f47f af11 	bne.w	800d3ae <pow+0xde>
 800d58c:	e7b5      	b.n	800d4fa <pow+0x22a>
 800d58e:	bf00      	nop
 800d590:	0800e680 	.word	0x0800e680
 800d594:	3ff00000 	.word	0x3ff00000
 800d598:	fff00000 	.word	0xfff00000
 800d59c:	3fe00000 	.word	0x3fe00000
 800d5a0:	47efffff 	.word	0x47efffff
 800d5a4:	c7efffff 	.word	0xc7efffff
 800d5a8:	7ff00000 	.word	0x7ff00000
 800d5ac:	200000dc 	.word	0x200000dc

0800d5b0 <__ieee754_pow>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	b091      	sub	sp, #68	; 0x44
 800d5b6:	ed8d 1b00 	vstr	d1, [sp]
 800d5ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d5be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d5c2:	ea58 0302 	orrs.w	r3, r8, r2
 800d5c6:	ec57 6b10 	vmov	r6, r7, d0
 800d5ca:	f000 84be 	beq.w	800df4a <__ieee754_pow+0x99a>
 800d5ce:	4b7a      	ldr	r3, [pc, #488]	; (800d7b8 <__ieee754_pow+0x208>)
 800d5d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	463d      	mov	r5, r7
 800d5d8:	ee10 aa10 	vmov	sl, s0
 800d5dc:	dc09      	bgt.n	800d5f2 <__ieee754_pow+0x42>
 800d5de:	d103      	bne.n	800d5e8 <__ieee754_pow+0x38>
 800d5e0:	b93e      	cbnz	r6, 800d5f2 <__ieee754_pow+0x42>
 800d5e2:	45a0      	cmp	r8, r4
 800d5e4:	dc0d      	bgt.n	800d602 <__ieee754_pow+0x52>
 800d5e6:	e001      	b.n	800d5ec <__ieee754_pow+0x3c>
 800d5e8:	4598      	cmp	r8, r3
 800d5ea:	dc02      	bgt.n	800d5f2 <__ieee754_pow+0x42>
 800d5ec:	4598      	cmp	r8, r3
 800d5ee:	d10e      	bne.n	800d60e <__ieee754_pow+0x5e>
 800d5f0:	b16a      	cbz	r2, 800d60e <__ieee754_pow+0x5e>
 800d5f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d5f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d5fa:	ea54 030a 	orrs.w	r3, r4, sl
 800d5fe:	f000 84a4 	beq.w	800df4a <__ieee754_pow+0x99a>
 800d602:	486e      	ldr	r0, [pc, #440]	; (800d7bc <__ieee754_pow+0x20c>)
 800d604:	b011      	add	sp, #68	; 0x44
 800d606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60a:	f000 bda5 	b.w	800e158 <nan>
 800d60e:	2d00      	cmp	r5, #0
 800d610:	da53      	bge.n	800d6ba <__ieee754_pow+0x10a>
 800d612:	4b6b      	ldr	r3, [pc, #428]	; (800d7c0 <__ieee754_pow+0x210>)
 800d614:	4598      	cmp	r8, r3
 800d616:	dc4d      	bgt.n	800d6b4 <__ieee754_pow+0x104>
 800d618:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d61c:	4598      	cmp	r8, r3
 800d61e:	dd4c      	ble.n	800d6ba <__ieee754_pow+0x10a>
 800d620:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d624:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d628:	2b14      	cmp	r3, #20
 800d62a:	dd26      	ble.n	800d67a <__ieee754_pow+0xca>
 800d62c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d630:	fa22 f103 	lsr.w	r1, r2, r3
 800d634:	fa01 f303 	lsl.w	r3, r1, r3
 800d638:	4293      	cmp	r3, r2
 800d63a:	d13e      	bne.n	800d6ba <__ieee754_pow+0x10a>
 800d63c:	f001 0101 	and.w	r1, r1, #1
 800d640:	f1c1 0b02 	rsb	fp, r1, #2
 800d644:	2a00      	cmp	r2, #0
 800d646:	d15b      	bne.n	800d700 <__ieee754_pow+0x150>
 800d648:	4b5b      	ldr	r3, [pc, #364]	; (800d7b8 <__ieee754_pow+0x208>)
 800d64a:	4598      	cmp	r8, r3
 800d64c:	d124      	bne.n	800d698 <__ieee754_pow+0xe8>
 800d64e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d652:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d656:	ea53 030a 	orrs.w	r3, r3, sl
 800d65a:	f000 8476 	beq.w	800df4a <__ieee754_pow+0x99a>
 800d65e:	4b59      	ldr	r3, [pc, #356]	; (800d7c4 <__ieee754_pow+0x214>)
 800d660:	429c      	cmp	r4, r3
 800d662:	dd2d      	ble.n	800d6c0 <__ieee754_pow+0x110>
 800d664:	f1b9 0f00 	cmp.w	r9, #0
 800d668:	f280 8473 	bge.w	800df52 <__ieee754_pow+0x9a2>
 800d66c:	2000      	movs	r0, #0
 800d66e:	2100      	movs	r1, #0
 800d670:	ec41 0b10 	vmov	d0, r0, r1
 800d674:	b011      	add	sp, #68	; 0x44
 800d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67a:	2a00      	cmp	r2, #0
 800d67c:	d13e      	bne.n	800d6fc <__ieee754_pow+0x14c>
 800d67e:	f1c3 0314 	rsb	r3, r3, #20
 800d682:	fa48 f103 	asr.w	r1, r8, r3
 800d686:	fa01 f303 	lsl.w	r3, r1, r3
 800d68a:	4543      	cmp	r3, r8
 800d68c:	f040 8469 	bne.w	800df62 <__ieee754_pow+0x9b2>
 800d690:	f001 0101 	and.w	r1, r1, #1
 800d694:	f1c1 0b02 	rsb	fp, r1, #2
 800d698:	4b4b      	ldr	r3, [pc, #300]	; (800d7c8 <__ieee754_pow+0x218>)
 800d69a:	4598      	cmp	r8, r3
 800d69c:	d118      	bne.n	800d6d0 <__ieee754_pow+0x120>
 800d69e:	f1b9 0f00 	cmp.w	r9, #0
 800d6a2:	f280 845a 	bge.w	800df5a <__ieee754_pow+0x9aa>
 800d6a6:	4948      	ldr	r1, [pc, #288]	; (800d7c8 <__ieee754_pow+0x218>)
 800d6a8:	4632      	mov	r2, r6
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	f7f3 f871 	bl	8000794 <__aeabi_ddiv>
 800d6b2:	e7dd      	b.n	800d670 <__ieee754_pow+0xc0>
 800d6b4:	f04f 0b02 	mov.w	fp, #2
 800d6b8:	e7c4      	b.n	800d644 <__ieee754_pow+0x94>
 800d6ba:	f04f 0b00 	mov.w	fp, #0
 800d6be:	e7c1      	b.n	800d644 <__ieee754_pow+0x94>
 800d6c0:	f1b9 0f00 	cmp.w	r9, #0
 800d6c4:	dad2      	bge.n	800d66c <__ieee754_pow+0xbc>
 800d6c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d6ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6ce:	e7cf      	b.n	800d670 <__ieee754_pow+0xc0>
 800d6d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d6d4:	d106      	bne.n	800d6e4 <__ieee754_pow+0x134>
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463b      	mov	r3, r7
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f7f2 ff2f 	bl	8000540 <__aeabi_dmul>
 800d6e2:	e7c5      	b.n	800d670 <__ieee754_pow+0xc0>
 800d6e4:	4b39      	ldr	r3, [pc, #228]	; (800d7cc <__ieee754_pow+0x21c>)
 800d6e6:	4599      	cmp	r9, r3
 800d6e8:	d10a      	bne.n	800d700 <__ieee754_pow+0x150>
 800d6ea:	2d00      	cmp	r5, #0
 800d6ec:	db08      	blt.n	800d700 <__ieee754_pow+0x150>
 800d6ee:	ec47 6b10 	vmov	d0, r6, r7
 800d6f2:	b011      	add	sp, #68	; 0x44
 800d6f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f8:	f000 bc68 	b.w	800dfcc <__ieee754_sqrt>
 800d6fc:	f04f 0b00 	mov.w	fp, #0
 800d700:	ec47 6b10 	vmov	d0, r6, r7
 800d704:	f000 fd12 	bl	800e12c <fabs>
 800d708:	ec51 0b10 	vmov	r0, r1, d0
 800d70c:	f1ba 0f00 	cmp.w	sl, #0
 800d710:	d127      	bne.n	800d762 <__ieee754_pow+0x1b2>
 800d712:	b124      	cbz	r4, 800d71e <__ieee754_pow+0x16e>
 800d714:	4b2c      	ldr	r3, [pc, #176]	; (800d7c8 <__ieee754_pow+0x218>)
 800d716:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d121      	bne.n	800d762 <__ieee754_pow+0x1b2>
 800d71e:	f1b9 0f00 	cmp.w	r9, #0
 800d722:	da05      	bge.n	800d730 <__ieee754_pow+0x180>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	2000      	movs	r0, #0
 800d72a:	4927      	ldr	r1, [pc, #156]	; (800d7c8 <__ieee754_pow+0x218>)
 800d72c:	f7f3 f832 	bl	8000794 <__aeabi_ddiv>
 800d730:	2d00      	cmp	r5, #0
 800d732:	da9d      	bge.n	800d670 <__ieee754_pow+0xc0>
 800d734:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d738:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d73c:	ea54 030b 	orrs.w	r3, r4, fp
 800d740:	d108      	bne.n	800d754 <__ieee754_pow+0x1a4>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4610      	mov	r0, r2
 800d748:	4619      	mov	r1, r3
 800d74a:	f7f2 fd41 	bl	80001d0 <__aeabi_dsub>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	e7ac      	b.n	800d6ae <__ieee754_pow+0xfe>
 800d754:	f1bb 0f01 	cmp.w	fp, #1
 800d758:	d18a      	bne.n	800d670 <__ieee754_pow+0xc0>
 800d75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d75e:	4619      	mov	r1, r3
 800d760:	e786      	b.n	800d670 <__ieee754_pow+0xc0>
 800d762:	0fed      	lsrs	r5, r5, #31
 800d764:	1e6b      	subs	r3, r5, #1
 800d766:	930d      	str	r3, [sp, #52]	; 0x34
 800d768:	ea5b 0303 	orrs.w	r3, fp, r3
 800d76c:	d102      	bne.n	800d774 <__ieee754_pow+0x1c4>
 800d76e:	4632      	mov	r2, r6
 800d770:	463b      	mov	r3, r7
 800d772:	e7e8      	b.n	800d746 <__ieee754_pow+0x196>
 800d774:	4b16      	ldr	r3, [pc, #88]	; (800d7d0 <__ieee754_pow+0x220>)
 800d776:	4598      	cmp	r8, r3
 800d778:	f340 80fe 	ble.w	800d978 <__ieee754_pow+0x3c8>
 800d77c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d780:	4598      	cmp	r8, r3
 800d782:	dd0a      	ble.n	800d79a <__ieee754_pow+0x1ea>
 800d784:	4b0f      	ldr	r3, [pc, #60]	; (800d7c4 <__ieee754_pow+0x214>)
 800d786:	429c      	cmp	r4, r3
 800d788:	dc0d      	bgt.n	800d7a6 <__ieee754_pow+0x1f6>
 800d78a:	f1b9 0f00 	cmp.w	r9, #0
 800d78e:	f6bf af6d 	bge.w	800d66c <__ieee754_pow+0xbc>
 800d792:	a307      	add	r3, pc, #28	; (adr r3, 800d7b0 <__ieee754_pow+0x200>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	e79f      	b.n	800d6da <__ieee754_pow+0x12a>
 800d79a:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <__ieee754_pow+0x224>)
 800d79c:	429c      	cmp	r4, r3
 800d79e:	ddf4      	ble.n	800d78a <__ieee754_pow+0x1da>
 800d7a0:	4b09      	ldr	r3, [pc, #36]	; (800d7c8 <__ieee754_pow+0x218>)
 800d7a2:	429c      	cmp	r4, r3
 800d7a4:	dd18      	ble.n	800d7d8 <__ieee754_pow+0x228>
 800d7a6:	f1b9 0f00 	cmp.w	r9, #0
 800d7aa:	dcf2      	bgt.n	800d792 <__ieee754_pow+0x1e2>
 800d7ac:	e75e      	b.n	800d66c <__ieee754_pow+0xbc>
 800d7ae:	bf00      	nop
 800d7b0:	8800759c 	.word	0x8800759c
 800d7b4:	7e37e43c 	.word	0x7e37e43c
 800d7b8:	7ff00000 	.word	0x7ff00000
 800d7bc:	0800e683 	.word	0x0800e683
 800d7c0:	433fffff 	.word	0x433fffff
 800d7c4:	3fefffff 	.word	0x3fefffff
 800d7c8:	3ff00000 	.word	0x3ff00000
 800d7cc:	3fe00000 	.word	0x3fe00000
 800d7d0:	41e00000 	.word	0x41e00000
 800d7d4:	3feffffe 	.word	0x3feffffe
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4b63      	ldr	r3, [pc, #396]	; (800d968 <__ieee754_pow+0x3b8>)
 800d7dc:	f7f2 fcf8 	bl	80001d0 <__aeabi_dsub>
 800d7e0:	a355      	add	r3, pc, #340	; (adr r3, 800d938 <__ieee754_pow+0x388>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	460d      	mov	r5, r1
 800d7ea:	f7f2 fea9 	bl	8000540 <__aeabi_dmul>
 800d7ee:	a354      	add	r3, pc, #336	; (adr r3, 800d940 <__ieee754_pow+0x390>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	460f      	mov	r7, r1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	f7f2 fea0 	bl	8000540 <__aeabi_dmul>
 800d800:	2200      	movs	r2, #0
 800d802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d806:	4b59      	ldr	r3, [pc, #356]	; (800d96c <__ieee754_pow+0x3bc>)
 800d808:	4620      	mov	r0, r4
 800d80a:	4629      	mov	r1, r5
 800d80c:	f7f2 fe98 	bl	8000540 <__aeabi_dmul>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	a14c      	add	r1, pc, #304	; (adr r1, 800d948 <__ieee754_pow+0x398>)
 800d816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d81a:	f7f2 fcd9 	bl	80001d0 <__aeabi_dsub>
 800d81e:	4622      	mov	r2, r4
 800d820:	462b      	mov	r3, r5
 800d822:	f7f2 fe8d 	bl	8000540 <__aeabi_dmul>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	2000      	movs	r0, #0
 800d82c:	4950      	ldr	r1, [pc, #320]	; (800d970 <__ieee754_pow+0x3c0>)
 800d82e:	f7f2 fccf 	bl	80001d0 <__aeabi_dsub>
 800d832:	4622      	mov	r2, r4
 800d834:	462b      	mov	r3, r5
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	4620      	mov	r0, r4
 800d83c:	4629      	mov	r1, r5
 800d83e:	f7f2 fe7f 	bl	8000540 <__aeabi_dmul>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7f2 fe79 	bl	8000540 <__aeabi_dmul>
 800d84e:	a340      	add	r3, pc, #256	; (adr r3, 800d950 <__ieee754_pow+0x3a0>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fe74 	bl	8000540 <__aeabi_dmul>
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d860:	f7f2 fcb6 	bl	80001d0 <__aeabi_dsub>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	4630      	mov	r0, r6
 800d86e:	4639      	mov	r1, r7
 800d870:	f7f2 fcb0 	bl	80001d4 <__adddf3>
 800d874:	2000      	movs	r0, #0
 800d876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d87a:	4632      	mov	r2, r6
 800d87c:	463b      	mov	r3, r7
 800d87e:	f7f2 fca7 	bl	80001d0 <__aeabi_dsub>
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	4620      	mov	r0, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	f7f2 fca1 	bl	80001d0 <__aeabi_dsub>
 800d88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d890:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d894:	4313      	orrs	r3, r2
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	f040 81eb 	bne.w	800dc74 <__ieee754_pow+0x6c4>
 800d89e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d958 <__ieee754_pow+0x3a8>
 800d8a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8b4:	f7f2 fc8c 	bl	80001d0 <__aeabi_dsub>
 800d8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8bc:	f7f2 fe40 	bl	8000540 <__aeabi_dmul>
 800d8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	4689      	mov	r9, r1
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f2 fe38 	bl	8000540 <__aeabi_dmul>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4640      	mov	r0, r8
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	f7f2 fc7c 	bl	80001d4 <__adddf3>
 800d8dc:	4622      	mov	r2, r4
 800d8de:	462b      	mov	r3, r5
 800d8e0:	4680      	mov	r8, r0
 800d8e2:	4689      	mov	r9, r1
 800d8e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8e8:	f7f2 fe2a 	bl	8000540 <__aeabi_dmul>
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	e9cd 4500 	strd	r4, r5, [sp]
 800d8fc:	f7f2 fc6a 	bl	80001d4 <__adddf3>
 800d900:	4b1c      	ldr	r3, [pc, #112]	; (800d974 <__ieee754_pow+0x3c4>)
 800d902:	4299      	cmp	r1, r3
 800d904:	4606      	mov	r6, r0
 800d906:	460f      	mov	r7, r1
 800d908:	468b      	mov	fp, r1
 800d90a:	f340 82f7 	ble.w	800defc <__ieee754_pow+0x94c>
 800d90e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d916:	4303      	orrs	r3, r0
 800d918:	f000 81ea 	beq.w	800dcf0 <__ieee754_pow+0x740>
 800d91c:	a310      	add	r3, pc, #64	; (adr r3, 800d960 <__ieee754_pow+0x3b0>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d926:	f7f2 fe0b 	bl	8000540 <__aeabi_dmul>
 800d92a:	a30d      	add	r3, pc, #52	; (adr r3, 800d960 <__ieee754_pow+0x3b0>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	e6d5      	b.n	800d6de <__ieee754_pow+0x12e>
 800d932:	bf00      	nop
 800d934:	f3af 8000 	nop.w
 800d938:	60000000 	.word	0x60000000
 800d93c:	3ff71547 	.word	0x3ff71547
 800d940:	f85ddf44 	.word	0xf85ddf44
 800d944:	3e54ae0b 	.word	0x3e54ae0b
 800d948:	55555555 	.word	0x55555555
 800d94c:	3fd55555 	.word	0x3fd55555
 800d950:	652b82fe 	.word	0x652b82fe
 800d954:	3ff71547 	.word	0x3ff71547
 800d958:	00000000 	.word	0x00000000
 800d95c:	bff00000 	.word	0xbff00000
 800d960:	8800759c 	.word	0x8800759c
 800d964:	7e37e43c 	.word	0x7e37e43c
 800d968:	3ff00000 	.word	0x3ff00000
 800d96c:	3fd00000 	.word	0x3fd00000
 800d970:	3fe00000 	.word	0x3fe00000
 800d974:	408fffff 	.word	0x408fffff
 800d978:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d97c:	f04f 0200 	mov.w	r2, #0
 800d980:	da05      	bge.n	800d98e <__ieee754_pow+0x3de>
 800d982:	4bd3      	ldr	r3, [pc, #844]	; (800dcd0 <__ieee754_pow+0x720>)
 800d984:	f7f2 fddc 	bl	8000540 <__aeabi_dmul>
 800d988:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d98c:	460c      	mov	r4, r1
 800d98e:	1523      	asrs	r3, r4, #20
 800d990:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d994:	4413      	add	r3, r2
 800d996:	9309      	str	r3, [sp, #36]	; 0x24
 800d998:	4bce      	ldr	r3, [pc, #824]	; (800dcd4 <__ieee754_pow+0x724>)
 800d99a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d99e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d9a2:	429c      	cmp	r4, r3
 800d9a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d9a8:	dd08      	ble.n	800d9bc <__ieee754_pow+0x40c>
 800d9aa:	4bcb      	ldr	r3, [pc, #812]	; (800dcd8 <__ieee754_pow+0x728>)
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	f340 815e 	ble.w	800dc6e <__ieee754_pow+0x6be>
 800d9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d9bc:	f04f 0a00 	mov.w	sl, #0
 800d9c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800d9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9c8:	4bc4      	ldr	r3, [pc, #784]	; (800dcdc <__ieee754_pow+0x72c>)
 800d9ca:	4413      	add	r3, r2
 800d9cc:	ed93 7b00 	vldr	d7, [r3]
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	ec53 2b17 	vmov	r2, r3, d7
 800d9d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d9de:	f7f2 fbf7 	bl	80001d0 <__aeabi_dsub>
 800d9e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460f      	mov	r7, r1
 800d9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9ee:	f7f2 fbf1 	bl	80001d4 <__adddf3>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	49b9      	ldr	r1, [pc, #740]	; (800dce0 <__ieee754_pow+0x730>)
 800d9fa:	f7f2 fecb 	bl	8000794 <__aeabi_ddiv>
 800d9fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4630      	mov	r0, r6
 800da08:	4639      	mov	r1, r7
 800da0a:	f7f2 fd99 	bl	8000540 <__aeabi_dmul>
 800da0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800da16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800da1a:	2300      	movs	r3, #0
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da22:	106d      	asrs	r5, r5, #1
 800da24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800da28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800da2c:	2200      	movs	r2, #0
 800da2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800da32:	4640      	mov	r0, r8
 800da34:	4649      	mov	r1, r9
 800da36:	4614      	mov	r4, r2
 800da38:	461d      	mov	r5, r3
 800da3a:	f7f2 fd81 	bl	8000540 <__aeabi_dmul>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4630      	mov	r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	f7f2 fbc3 	bl	80001d0 <__aeabi_dsub>
 800da4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da4e:	4606      	mov	r6, r0
 800da50:	460f      	mov	r7, r1
 800da52:	4620      	mov	r0, r4
 800da54:	4629      	mov	r1, r5
 800da56:	f7f2 fbbb 	bl	80001d0 <__aeabi_dsub>
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da62:	f7f2 fbb5 	bl	80001d0 <__aeabi_dsub>
 800da66:	4642      	mov	r2, r8
 800da68:	464b      	mov	r3, r9
 800da6a:	f7f2 fd69 	bl	8000540 <__aeabi_dmul>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	f7f2 fbab 	bl	80001d0 <__aeabi_dsub>
 800da7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800da7e:	f7f2 fd5f 	bl	8000540 <__aeabi_dmul>
 800da82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da8a:	4610      	mov	r0, r2
 800da8c:	4619      	mov	r1, r3
 800da8e:	f7f2 fd57 	bl	8000540 <__aeabi_dmul>
 800da92:	a37b      	add	r3, pc, #492	; (adr r3, 800dc80 <__ieee754_pow+0x6d0>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	f7f2 fd50 	bl	8000540 <__aeabi_dmul>
 800daa0:	a379      	add	r3, pc, #484	; (adr r3, 800dc88 <__ieee754_pow+0x6d8>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fb95 	bl	80001d4 <__adddf3>
 800daaa:	4622      	mov	r2, r4
 800daac:	462b      	mov	r3, r5
 800daae:	f7f2 fd47 	bl	8000540 <__aeabi_dmul>
 800dab2:	a377      	add	r3, pc, #476	; (adr r3, 800dc90 <__ieee754_pow+0x6e0>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fb8c 	bl	80001d4 <__adddf3>
 800dabc:	4622      	mov	r2, r4
 800dabe:	462b      	mov	r3, r5
 800dac0:	f7f2 fd3e 	bl	8000540 <__aeabi_dmul>
 800dac4:	a374      	add	r3, pc, #464	; (adr r3, 800dc98 <__ieee754_pow+0x6e8>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	f7f2 fb83 	bl	80001d4 <__adddf3>
 800dace:	4622      	mov	r2, r4
 800dad0:	462b      	mov	r3, r5
 800dad2:	f7f2 fd35 	bl	8000540 <__aeabi_dmul>
 800dad6:	a372      	add	r3, pc, #456	; (adr r3, 800dca0 <__ieee754_pow+0x6f0>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f7f2 fb7a 	bl	80001d4 <__adddf3>
 800dae0:	4622      	mov	r2, r4
 800dae2:	462b      	mov	r3, r5
 800dae4:	f7f2 fd2c 	bl	8000540 <__aeabi_dmul>
 800dae8:	a36f      	add	r3, pc, #444	; (adr r3, 800dca8 <__ieee754_pow+0x6f8>)
 800daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daee:	f7f2 fb71 	bl	80001d4 <__adddf3>
 800daf2:	4622      	mov	r2, r4
 800daf4:	4606      	mov	r6, r0
 800daf6:	460f      	mov	r7, r1
 800daf8:	462b      	mov	r3, r5
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7f2 fd1f 	bl	8000540 <__aeabi_dmul>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4630      	mov	r0, r6
 800db08:	4639      	mov	r1, r7
 800db0a:	f7f2 fd19 	bl	8000540 <__aeabi_dmul>
 800db0e:	4642      	mov	r2, r8
 800db10:	4604      	mov	r4, r0
 800db12:	460d      	mov	r5, r1
 800db14:	464b      	mov	r3, r9
 800db16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db1a:	f7f2 fb5b 	bl	80001d4 <__adddf3>
 800db1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db22:	f7f2 fd0d 	bl	8000540 <__aeabi_dmul>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	f7f2 fb53 	bl	80001d4 <__adddf3>
 800db2e:	4642      	mov	r2, r8
 800db30:	4606      	mov	r6, r0
 800db32:	460f      	mov	r7, r1
 800db34:	464b      	mov	r3, r9
 800db36:	4640      	mov	r0, r8
 800db38:	4649      	mov	r1, r9
 800db3a:	f7f2 fd01 	bl	8000540 <__aeabi_dmul>
 800db3e:	2200      	movs	r2, #0
 800db40:	4b68      	ldr	r3, [pc, #416]	; (800dce4 <__ieee754_pow+0x734>)
 800db42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db46:	f7f2 fb45 	bl	80001d4 <__adddf3>
 800db4a:	4632      	mov	r2, r6
 800db4c:	463b      	mov	r3, r7
 800db4e:	f7f2 fb41 	bl	80001d4 <__adddf3>
 800db52:	9802      	ldr	r0, [sp, #8]
 800db54:	460d      	mov	r5, r1
 800db56:	4604      	mov	r4, r0
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4640      	mov	r0, r8
 800db5e:	4649      	mov	r1, r9
 800db60:	f7f2 fcee 	bl	8000540 <__aeabi_dmul>
 800db64:	2200      	movs	r2, #0
 800db66:	4680      	mov	r8, r0
 800db68:	4689      	mov	r9, r1
 800db6a:	4b5e      	ldr	r3, [pc, #376]	; (800dce4 <__ieee754_pow+0x734>)
 800db6c:	4620      	mov	r0, r4
 800db6e:	4629      	mov	r1, r5
 800db70:	f7f2 fb2e 	bl	80001d0 <__aeabi_dsub>
 800db74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db78:	f7f2 fb2a 	bl	80001d0 <__aeabi_dsub>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4630      	mov	r0, r6
 800db82:	4639      	mov	r1, r7
 800db84:	f7f2 fb24 	bl	80001d0 <__aeabi_dsub>
 800db88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db8c:	f7f2 fcd8 	bl	8000540 <__aeabi_dmul>
 800db90:	4622      	mov	r2, r4
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	462b      	mov	r3, r5
 800db98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db9c:	f7f2 fcd0 	bl	8000540 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4630      	mov	r0, r6
 800dba6:	4639      	mov	r1, r7
 800dba8:	f7f2 fb14 	bl	80001d4 <__adddf3>
 800dbac:	4606      	mov	r6, r0
 800dbae:	460f      	mov	r7, r1
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	f7f2 fb0c 	bl	80001d4 <__adddf3>
 800dbbc:	9802      	ldr	r0, [sp, #8]
 800dbbe:	a33c      	add	r3, pc, #240	; (adr r3, 800dcb0 <__ieee754_pow+0x700>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	f7f2 fcba 	bl	8000540 <__aeabi_dmul>
 800dbcc:	4642      	mov	r2, r8
 800dbce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbd2:	464b      	mov	r3, r9
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7f2 fafa 	bl	80001d0 <__aeabi_dsub>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f2 faf4 	bl	80001d0 <__aeabi_dsub>
 800dbe8:	a333      	add	r3, pc, #204	; (adr r3, 800dcb8 <__ieee754_pow+0x708>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fca7 	bl	8000540 <__aeabi_dmul>
 800dbf2:	a333      	add	r3, pc, #204	; (adr r3, 800dcc0 <__ieee754_pow+0x710>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	460f      	mov	r7, r1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fc9e 	bl	8000540 <__aeabi_dmul>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f7f2 fae2 	bl	80001d4 <__adddf3>
 800dc10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc12:	4b35      	ldr	r3, [pc, #212]	; (800dce8 <__ieee754_pow+0x738>)
 800dc14:	4413      	add	r3, r2
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7f2 fadb 	bl	80001d4 <__adddf3>
 800dc1e:	4604      	mov	r4, r0
 800dc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc22:	460d      	mov	r5, r1
 800dc24:	f7f2 fc22 	bl	800046c <__aeabi_i2d>
 800dc28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc2a:	4b30      	ldr	r3, [pc, #192]	; (800dcec <__ieee754_pow+0x73c>)
 800dc2c:	4413      	add	r3, r2
 800dc2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	4622      	mov	r2, r4
 800dc38:	462b      	mov	r3, r5
 800dc3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc3e:	f7f2 fac9 	bl	80001d4 <__adddf3>
 800dc42:	4642      	mov	r2, r8
 800dc44:	464b      	mov	r3, r9
 800dc46:	f7f2 fac5 	bl	80001d4 <__adddf3>
 800dc4a:	4632      	mov	r2, r6
 800dc4c:	463b      	mov	r3, r7
 800dc4e:	f7f2 fac1 	bl	80001d4 <__adddf3>
 800dc52:	9802      	ldr	r0, [sp, #8]
 800dc54:	4632      	mov	r2, r6
 800dc56:	463b      	mov	r3, r7
 800dc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc5c:	f7f2 fab8 	bl	80001d0 <__aeabi_dsub>
 800dc60:	4642      	mov	r2, r8
 800dc62:	464b      	mov	r3, r9
 800dc64:	f7f2 fab4 	bl	80001d0 <__aeabi_dsub>
 800dc68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc6c:	e607      	b.n	800d87e <__ieee754_pow+0x2ce>
 800dc6e:	f04f 0a01 	mov.w	sl, #1
 800dc72:	e6a5      	b.n	800d9c0 <__ieee754_pow+0x410>
 800dc74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dcc8 <__ieee754_pow+0x718>
 800dc78:	e613      	b.n	800d8a2 <__ieee754_pow+0x2f2>
 800dc7a:	bf00      	nop
 800dc7c:	f3af 8000 	nop.w
 800dc80:	4a454eef 	.word	0x4a454eef
 800dc84:	3fca7e28 	.word	0x3fca7e28
 800dc88:	93c9db65 	.word	0x93c9db65
 800dc8c:	3fcd864a 	.word	0x3fcd864a
 800dc90:	a91d4101 	.word	0xa91d4101
 800dc94:	3fd17460 	.word	0x3fd17460
 800dc98:	518f264d 	.word	0x518f264d
 800dc9c:	3fd55555 	.word	0x3fd55555
 800dca0:	db6fabff 	.word	0xdb6fabff
 800dca4:	3fdb6db6 	.word	0x3fdb6db6
 800dca8:	33333303 	.word	0x33333303
 800dcac:	3fe33333 	.word	0x3fe33333
 800dcb0:	e0000000 	.word	0xe0000000
 800dcb4:	3feec709 	.word	0x3feec709
 800dcb8:	dc3a03fd 	.word	0xdc3a03fd
 800dcbc:	3feec709 	.word	0x3feec709
 800dcc0:	145b01f5 	.word	0x145b01f5
 800dcc4:	be3e2fe0 	.word	0xbe3e2fe0
 800dcc8:	00000000 	.word	0x00000000
 800dccc:	3ff00000 	.word	0x3ff00000
 800dcd0:	43400000 	.word	0x43400000
 800dcd4:	0003988e 	.word	0x0003988e
 800dcd8:	000bb679 	.word	0x000bb679
 800dcdc:	0800e688 	.word	0x0800e688
 800dce0:	3ff00000 	.word	0x3ff00000
 800dce4:	40080000 	.word	0x40080000
 800dce8:	0800e6a8 	.word	0x0800e6a8
 800dcec:	0800e698 	.word	0x0800e698
 800dcf0:	a3b4      	add	r3, pc, #720	; (adr r3, 800dfc4 <__ieee754_pow+0xa14>)
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	f7f2 fa6b 	bl	80001d4 <__adddf3>
 800dcfe:	4622      	mov	r2, r4
 800dd00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd04:	462b      	mov	r3, r5
 800dd06:	4630      	mov	r0, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	f7f2 fa61 	bl	80001d0 <__aeabi_dsub>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd16:	f7f2 fea3 	bl	8000a60 <__aeabi_dcmpgt>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	f47f adfe 	bne.w	800d91c <__ieee754_pow+0x36c>
 800dd20:	4aa3      	ldr	r2, [pc, #652]	; (800dfb0 <__ieee754_pow+0xa00>)
 800dd22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd26:	4293      	cmp	r3, r2
 800dd28:	f340 810a 	ble.w	800df40 <__ieee754_pow+0x990>
 800dd2c:	151b      	asrs	r3, r3, #20
 800dd2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dd32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dd36:	fa4a f303 	asr.w	r3, sl, r3
 800dd3a:	445b      	add	r3, fp
 800dd3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dd40:	4e9c      	ldr	r6, [pc, #624]	; (800dfb4 <__ieee754_pow+0xa04>)
 800dd42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dd46:	4116      	asrs	r6, r2
 800dd48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	ea23 0106 	bic.w	r1, r3, r6
 800dd52:	f1c2 0214 	rsb	r2, r2, #20
 800dd56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dd5a:	fa4a fa02 	asr.w	sl, sl, r2
 800dd5e:	f1bb 0f00 	cmp.w	fp, #0
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4620      	mov	r0, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	bfb8      	it	lt
 800dd6c:	f1ca 0a00 	rsblt	sl, sl, #0
 800dd70:	f7f2 fa2e 	bl	80001d0 <__aeabi_dsub>
 800dd74:	e9cd 0100 	strd	r0, r1, [sp]
 800dd78:	4642      	mov	r2, r8
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd80:	f7f2 fa28 	bl	80001d4 <__adddf3>
 800dd84:	2000      	movs	r0, #0
 800dd86:	a378      	add	r3, pc, #480	; (adr r3, 800df68 <__ieee754_pow+0x9b8>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	f7f2 fbd6 	bl	8000540 <__aeabi_dmul>
 800dd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 fa16 	bl	80001d0 <__aeabi_dsub>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4640      	mov	r0, r8
 800ddaa:	4649      	mov	r1, r9
 800ddac:	f7f2 fa10 	bl	80001d0 <__aeabi_dsub>
 800ddb0:	a36f      	add	r3, pc, #444	; (adr r3, 800df70 <__ieee754_pow+0x9c0>)
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f7f2 fbc3 	bl	8000540 <__aeabi_dmul>
 800ddba:	a36f      	add	r3, pc, #444	; (adr r3, 800df78 <__ieee754_pow+0x9c8>)
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	4680      	mov	r8, r0
 800ddc2:	4689      	mov	r9, r1
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	f7f2 fbba 	bl	8000540 <__aeabi_dmul>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	460b      	mov	r3, r1
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 f9fe 	bl	80001d4 <__adddf3>
 800ddd8:	4604      	mov	r4, r0
 800ddda:	460d      	mov	r5, r1
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4630      	mov	r0, r6
 800dde2:	4639      	mov	r1, r7
 800dde4:	f7f2 f9f6 	bl	80001d4 <__adddf3>
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	4680      	mov	r8, r0
 800ddee:	4689      	mov	r9, r1
 800ddf0:	f7f2 f9ee 	bl	80001d0 <__aeabi_dsub>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	f7f2 f9e8 	bl	80001d0 <__aeabi_dsub>
 800de00:	4642      	mov	r2, r8
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	464b      	mov	r3, r9
 800de08:	4640      	mov	r0, r8
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fb98 	bl	8000540 <__aeabi_dmul>
 800de10:	a35b      	add	r3, pc, #364	; (adr r3, 800df80 <__ieee754_pow+0x9d0>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	4604      	mov	r4, r0
 800de18:	460d      	mov	r5, r1
 800de1a:	f7f2 fb91 	bl	8000540 <__aeabi_dmul>
 800de1e:	a35a      	add	r3, pc, #360	; (adr r3, 800df88 <__ieee754_pow+0x9d8>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	f7f2 f9d4 	bl	80001d0 <__aeabi_dsub>
 800de28:	4622      	mov	r2, r4
 800de2a:	462b      	mov	r3, r5
 800de2c:	f7f2 fb88 	bl	8000540 <__aeabi_dmul>
 800de30:	a357      	add	r3, pc, #348	; (adr r3, 800df90 <__ieee754_pow+0x9e0>)
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	f7f2 f9cd 	bl	80001d4 <__adddf3>
 800de3a:	4622      	mov	r2, r4
 800de3c:	462b      	mov	r3, r5
 800de3e:	f7f2 fb7f 	bl	8000540 <__aeabi_dmul>
 800de42:	a355      	add	r3, pc, #340	; (adr r3, 800df98 <__ieee754_pow+0x9e8>)
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	f7f2 f9c2 	bl	80001d0 <__aeabi_dsub>
 800de4c:	4622      	mov	r2, r4
 800de4e:	462b      	mov	r3, r5
 800de50:	f7f2 fb76 	bl	8000540 <__aeabi_dmul>
 800de54:	a352      	add	r3, pc, #328	; (adr r3, 800dfa0 <__ieee754_pow+0x9f0>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	f7f2 f9bb 	bl	80001d4 <__adddf3>
 800de5e:	4622      	mov	r2, r4
 800de60:	462b      	mov	r3, r5
 800de62:	f7f2 fb6d 	bl	8000540 <__aeabi_dmul>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4640      	mov	r0, r8
 800de6c:	4649      	mov	r1, r9
 800de6e:	f7f2 f9af 	bl	80001d0 <__aeabi_dsub>
 800de72:	4604      	mov	r4, r0
 800de74:	460d      	mov	r5, r1
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fb5f 	bl	8000540 <__aeabi_dmul>
 800de82:	2200      	movs	r2, #0
 800de84:	e9cd 0100 	strd	r0, r1, [sp]
 800de88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 f99e 	bl	80001d0 <__aeabi_dsub>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de9c:	f7f2 fc7a 	bl	8000794 <__aeabi_ddiv>
 800dea0:	4632      	mov	r2, r6
 800dea2:	4604      	mov	r4, r0
 800dea4:	460d      	mov	r5, r1
 800dea6:	463b      	mov	r3, r7
 800dea8:	4640      	mov	r0, r8
 800deaa:	4649      	mov	r1, r9
 800deac:	f7f2 fb48 	bl	8000540 <__aeabi_dmul>
 800deb0:	4632      	mov	r2, r6
 800deb2:	463b      	mov	r3, r7
 800deb4:	f7f2 f98e 	bl	80001d4 <__adddf3>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 f986 	bl	80001d0 <__aeabi_dsub>
 800dec4:	4642      	mov	r2, r8
 800dec6:	464b      	mov	r3, r9
 800dec8:	f7f2 f982 	bl	80001d0 <__aeabi_dsub>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	2000      	movs	r0, #0
 800ded2:	4939      	ldr	r1, [pc, #228]	; (800dfb8 <__ieee754_pow+0xa08>)
 800ded4:	f7f2 f97c 	bl	80001d0 <__aeabi_dsub>
 800ded8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800dedc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	da2f      	bge.n	800df46 <__ieee754_pow+0x996>
 800dee6:	4650      	mov	r0, sl
 800dee8:	ec43 2b10 	vmov	d0, r2, r3
 800deec:	f000 f9c0 	bl	800e270 <scalbn>
 800def0:	ec51 0b10 	vmov	r0, r1, d0
 800def4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800def8:	f7ff bbf1 	b.w	800d6de <__ieee754_pow+0x12e>
 800defc:	4b2f      	ldr	r3, [pc, #188]	; (800dfbc <__ieee754_pow+0xa0c>)
 800defe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df02:	429e      	cmp	r6, r3
 800df04:	f77f af0c 	ble.w	800dd20 <__ieee754_pow+0x770>
 800df08:	4b2d      	ldr	r3, [pc, #180]	; (800dfc0 <__ieee754_pow+0xa10>)
 800df0a:	440b      	add	r3, r1
 800df0c:	4303      	orrs	r3, r0
 800df0e:	d00b      	beq.n	800df28 <__ieee754_pow+0x978>
 800df10:	a325      	add	r3, pc, #148	; (adr r3, 800dfa8 <__ieee754_pow+0x9f8>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df1a:	f7f2 fb11 	bl	8000540 <__aeabi_dmul>
 800df1e:	a322      	add	r3, pc, #136	; (adr r3, 800dfa8 <__ieee754_pow+0x9f8>)
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	f7ff bbdb 	b.w	800d6de <__ieee754_pow+0x12e>
 800df28:	4622      	mov	r2, r4
 800df2a:	462b      	mov	r3, r5
 800df2c:	f7f2 f950 	bl	80001d0 <__aeabi_dsub>
 800df30:	4642      	mov	r2, r8
 800df32:	464b      	mov	r3, r9
 800df34:	f7f2 fd8a 	bl	8000a4c <__aeabi_dcmpge>
 800df38:	2800      	cmp	r0, #0
 800df3a:	f43f aef1 	beq.w	800dd20 <__ieee754_pow+0x770>
 800df3e:	e7e7      	b.n	800df10 <__ieee754_pow+0x960>
 800df40:	f04f 0a00 	mov.w	sl, #0
 800df44:	e718      	b.n	800dd78 <__ieee754_pow+0x7c8>
 800df46:	4621      	mov	r1, r4
 800df48:	e7d4      	b.n	800def4 <__ieee754_pow+0x944>
 800df4a:	2000      	movs	r0, #0
 800df4c:	491a      	ldr	r1, [pc, #104]	; (800dfb8 <__ieee754_pow+0xa08>)
 800df4e:	f7ff bb8f 	b.w	800d670 <__ieee754_pow+0xc0>
 800df52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df56:	f7ff bb8b 	b.w	800d670 <__ieee754_pow+0xc0>
 800df5a:	4630      	mov	r0, r6
 800df5c:	4639      	mov	r1, r7
 800df5e:	f7ff bb87 	b.w	800d670 <__ieee754_pow+0xc0>
 800df62:	4693      	mov	fp, r2
 800df64:	f7ff bb98 	b.w	800d698 <__ieee754_pow+0xe8>
 800df68:	00000000 	.word	0x00000000
 800df6c:	3fe62e43 	.word	0x3fe62e43
 800df70:	fefa39ef 	.word	0xfefa39ef
 800df74:	3fe62e42 	.word	0x3fe62e42
 800df78:	0ca86c39 	.word	0x0ca86c39
 800df7c:	be205c61 	.word	0xbe205c61
 800df80:	72bea4d0 	.word	0x72bea4d0
 800df84:	3e663769 	.word	0x3e663769
 800df88:	c5d26bf1 	.word	0xc5d26bf1
 800df8c:	3ebbbd41 	.word	0x3ebbbd41
 800df90:	af25de2c 	.word	0xaf25de2c
 800df94:	3f11566a 	.word	0x3f11566a
 800df98:	16bebd93 	.word	0x16bebd93
 800df9c:	3f66c16c 	.word	0x3f66c16c
 800dfa0:	5555553e 	.word	0x5555553e
 800dfa4:	3fc55555 	.word	0x3fc55555
 800dfa8:	c2f8f359 	.word	0xc2f8f359
 800dfac:	01a56e1f 	.word	0x01a56e1f
 800dfb0:	3fe00000 	.word	0x3fe00000
 800dfb4:	000fffff 	.word	0x000fffff
 800dfb8:	3ff00000 	.word	0x3ff00000
 800dfbc:	4090cbff 	.word	0x4090cbff
 800dfc0:	3f6f3400 	.word	0x3f6f3400
 800dfc4:	652b82fe 	.word	0x652b82fe
 800dfc8:	3c971547 	.word	0x3c971547

0800dfcc <__ieee754_sqrt>:
 800dfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd0:	4955      	ldr	r1, [pc, #340]	; (800e128 <__ieee754_sqrt+0x15c>)
 800dfd2:	ec55 4b10 	vmov	r4, r5, d0
 800dfd6:	43a9      	bics	r1, r5
 800dfd8:	462b      	mov	r3, r5
 800dfda:	462a      	mov	r2, r5
 800dfdc:	d112      	bne.n	800e004 <__ieee754_sqrt+0x38>
 800dfde:	ee10 2a10 	vmov	r2, s0
 800dfe2:	ee10 0a10 	vmov	r0, s0
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 faaa 	bl	8000540 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4620      	mov	r0, r4
 800dff2:	4629      	mov	r1, r5
 800dff4:	f7f2 f8ee 	bl	80001d4 <__adddf3>
 800dff8:	4604      	mov	r4, r0
 800dffa:	460d      	mov	r5, r1
 800dffc:	ec45 4b10 	vmov	d0, r4, r5
 800e000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e004:	2d00      	cmp	r5, #0
 800e006:	ee10 0a10 	vmov	r0, s0
 800e00a:	4621      	mov	r1, r4
 800e00c:	dc0f      	bgt.n	800e02e <__ieee754_sqrt+0x62>
 800e00e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e012:	4330      	orrs	r0, r6
 800e014:	d0f2      	beq.n	800dffc <__ieee754_sqrt+0x30>
 800e016:	b155      	cbz	r5, 800e02e <__ieee754_sqrt+0x62>
 800e018:	ee10 2a10 	vmov	r2, s0
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 f8d6 	bl	80001d0 <__aeabi_dsub>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	f7f2 fbb4 	bl	8000794 <__aeabi_ddiv>
 800e02c:	e7e4      	b.n	800dff8 <__ieee754_sqrt+0x2c>
 800e02e:	151b      	asrs	r3, r3, #20
 800e030:	d073      	beq.n	800e11a <__ieee754_sqrt+0x14e>
 800e032:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e036:	07dd      	lsls	r5, r3, #31
 800e038:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e03c:	bf48      	it	mi
 800e03e:	0fc8      	lsrmi	r0, r1, #31
 800e040:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e044:	bf44      	itt	mi
 800e046:	0049      	lslmi	r1, r1, #1
 800e048:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e04c:	2500      	movs	r5, #0
 800e04e:	1058      	asrs	r0, r3, #1
 800e050:	0fcb      	lsrs	r3, r1, #31
 800e052:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e056:	0049      	lsls	r1, r1, #1
 800e058:	2316      	movs	r3, #22
 800e05a:	462c      	mov	r4, r5
 800e05c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e060:	19a7      	adds	r7, r4, r6
 800e062:	4297      	cmp	r7, r2
 800e064:	bfde      	ittt	le
 800e066:	19bc      	addle	r4, r7, r6
 800e068:	1bd2      	suble	r2, r2, r7
 800e06a:	19ad      	addle	r5, r5, r6
 800e06c:	0fcf      	lsrs	r7, r1, #31
 800e06e:	3b01      	subs	r3, #1
 800e070:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e074:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e078:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e07c:	d1f0      	bne.n	800e060 <__ieee754_sqrt+0x94>
 800e07e:	f04f 0c20 	mov.w	ip, #32
 800e082:	469e      	mov	lr, r3
 800e084:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e088:	42a2      	cmp	r2, r4
 800e08a:	eb06 070e 	add.w	r7, r6, lr
 800e08e:	dc02      	bgt.n	800e096 <__ieee754_sqrt+0xca>
 800e090:	d112      	bne.n	800e0b8 <__ieee754_sqrt+0xec>
 800e092:	428f      	cmp	r7, r1
 800e094:	d810      	bhi.n	800e0b8 <__ieee754_sqrt+0xec>
 800e096:	2f00      	cmp	r7, #0
 800e098:	eb07 0e06 	add.w	lr, r7, r6
 800e09c:	da42      	bge.n	800e124 <__ieee754_sqrt+0x158>
 800e09e:	f1be 0f00 	cmp.w	lr, #0
 800e0a2:	db3f      	blt.n	800e124 <__ieee754_sqrt+0x158>
 800e0a4:	f104 0801 	add.w	r8, r4, #1
 800e0a8:	1b12      	subs	r2, r2, r4
 800e0aa:	428f      	cmp	r7, r1
 800e0ac:	bf88      	it	hi
 800e0ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e0b2:	1bc9      	subs	r1, r1, r7
 800e0b4:	4433      	add	r3, r6
 800e0b6:	4644      	mov	r4, r8
 800e0b8:	0052      	lsls	r2, r2, #1
 800e0ba:	f1bc 0c01 	subs.w	ip, ip, #1
 800e0be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e0c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e0c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0ca:	d1dd      	bne.n	800e088 <__ieee754_sqrt+0xbc>
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	d006      	beq.n	800e0de <__ieee754_sqrt+0x112>
 800e0d0:	1c5c      	adds	r4, r3, #1
 800e0d2:	bf13      	iteet	ne
 800e0d4:	3301      	addne	r3, #1
 800e0d6:	3501      	addeq	r5, #1
 800e0d8:	4663      	moveq	r3, ip
 800e0da:	f023 0301 	bicne.w	r3, r3, #1
 800e0de:	106a      	asrs	r2, r5, #1
 800e0e0:	085b      	lsrs	r3, r3, #1
 800e0e2:	07e9      	lsls	r1, r5, #31
 800e0e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e0e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e0ec:	bf48      	it	mi
 800e0ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e0f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e0f6:	461c      	mov	r4, r3
 800e0f8:	e780      	b.n	800dffc <__ieee754_sqrt+0x30>
 800e0fa:	0aca      	lsrs	r2, r1, #11
 800e0fc:	3815      	subs	r0, #21
 800e0fe:	0549      	lsls	r1, r1, #21
 800e100:	2a00      	cmp	r2, #0
 800e102:	d0fa      	beq.n	800e0fa <__ieee754_sqrt+0x12e>
 800e104:	02d6      	lsls	r6, r2, #11
 800e106:	d50a      	bpl.n	800e11e <__ieee754_sqrt+0x152>
 800e108:	f1c3 0420 	rsb	r4, r3, #32
 800e10c:	fa21 f404 	lsr.w	r4, r1, r4
 800e110:	1e5d      	subs	r5, r3, #1
 800e112:	4099      	lsls	r1, r3
 800e114:	4322      	orrs	r2, r4
 800e116:	1b43      	subs	r3, r0, r5
 800e118:	e78b      	b.n	800e032 <__ieee754_sqrt+0x66>
 800e11a:	4618      	mov	r0, r3
 800e11c:	e7f0      	b.n	800e100 <__ieee754_sqrt+0x134>
 800e11e:	0052      	lsls	r2, r2, #1
 800e120:	3301      	adds	r3, #1
 800e122:	e7ef      	b.n	800e104 <__ieee754_sqrt+0x138>
 800e124:	46a0      	mov	r8, r4
 800e126:	e7bf      	b.n	800e0a8 <__ieee754_sqrt+0xdc>
 800e128:	7ff00000 	.word	0x7ff00000

0800e12c <fabs>:
 800e12c:	ec51 0b10 	vmov	r0, r1, d0
 800e130:	ee10 2a10 	vmov	r2, s0
 800e134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e138:	ec43 2b10 	vmov	d0, r2, r3
 800e13c:	4770      	bx	lr

0800e13e <finite>:
 800e13e:	ee10 3a90 	vmov	r3, s1
 800e142:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e146:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e14a:	0fc0      	lsrs	r0, r0, #31
 800e14c:	4770      	bx	lr

0800e14e <matherr>:
 800e14e:	2000      	movs	r0, #0
 800e150:	4770      	bx	lr
 800e152:	0000      	movs	r0, r0
 800e154:	0000      	movs	r0, r0
	...

0800e158 <nan>:
 800e158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e160 <nan+0x8>
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	00000000 	.word	0x00000000
 800e164:	7ff80000 	.word	0x7ff80000

0800e168 <rint>:
 800e168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e16a:	ec51 0b10 	vmov	r0, r1, d0
 800e16e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e172:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e176:	2e13      	cmp	r6, #19
 800e178:	460b      	mov	r3, r1
 800e17a:	ee10 4a10 	vmov	r4, s0
 800e17e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e182:	dc56      	bgt.n	800e232 <rint+0xca>
 800e184:	2e00      	cmp	r6, #0
 800e186:	da2b      	bge.n	800e1e0 <rint+0x78>
 800e188:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e18c:	4302      	orrs	r2, r0
 800e18e:	d023      	beq.n	800e1d8 <rint+0x70>
 800e190:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e194:	4302      	orrs	r2, r0
 800e196:	4254      	negs	r4, r2
 800e198:	4314      	orrs	r4, r2
 800e19a:	0c4b      	lsrs	r3, r1, #17
 800e19c:	0b24      	lsrs	r4, r4, #12
 800e19e:	045b      	lsls	r3, r3, #17
 800e1a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e1a4:	ea44 0103 	orr.w	r1, r4, r3
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	492f      	ldr	r1, [pc, #188]	; (800e268 <rint+0x100>)
 800e1ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e1b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	f7f2 f80b 	bl	80001d4 <__adddf3>
 800e1be:	e9cd 0100 	strd	r0, r1, [sp]
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1ca:	f7f2 f801 	bl	80001d0 <__aeabi_dsub>
 800e1ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	ec41 0b10 	vmov	d0, r0, r1
 800e1dc:	b003      	add	sp, #12
 800e1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1e0:	4a22      	ldr	r2, [pc, #136]	; (800e26c <rint+0x104>)
 800e1e2:	4132      	asrs	r2, r6
 800e1e4:	ea01 0702 	and.w	r7, r1, r2
 800e1e8:	4307      	orrs	r7, r0
 800e1ea:	d0f5      	beq.n	800e1d8 <rint+0x70>
 800e1ec:	0852      	lsrs	r2, r2, #1
 800e1ee:	4011      	ands	r1, r2
 800e1f0:	430c      	orrs	r4, r1
 800e1f2:	d00b      	beq.n	800e20c <rint+0xa4>
 800e1f4:	ea23 0202 	bic.w	r2, r3, r2
 800e1f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e1fc:	2e13      	cmp	r6, #19
 800e1fe:	fa43 f306 	asr.w	r3, r3, r6
 800e202:	bf0c      	ite	eq
 800e204:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e208:	2400      	movne	r4, #0
 800e20a:	4313      	orrs	r3, r2
 800e20c:	4916      	ldr	r1, [pc, #88]	; (800e268 <rint+0x100>)
 800e20e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e212:	4622      	mov	r2, r4
 800e214:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e218:	4620      	mov	r0, r4
 800e21a:	4629      	mov	r1, r5
 800e21c:	f7f1 ffda 	bl	80001d4 <__adddf3>
 800e220:	e9cd 0100 	strd	r0, r1, [sp]
 800e224:	4622      	mov	r2, r4
 800e226:	462b      	mov	r3, r5
 800e228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e22c:	f7f1 ffd0 	bl	80001d0 <__aeabi_dsub>
 800e230:	e7d2      	b.n	800e1d8 <rint+0x70>
 800e232:	2e33      	cmp	r6, #51	; 0x33
 800e234:	dd07      	ble.n	800e246 <rint+0xde>
 800e236:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e23a:	d1cd      	bne.n	800e1d8 <rint+0x70>
 800e23c:	ee10 2a10 	vmov	r2, s0
 800e240:	f7f1 ffc8 	bl	80001d4 <__adddf3>
 800e244:	e7c8      	b.n	800e1d8 <rint+0x70>
 800e246:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e24a:	f04f 32ff 	mov.w	r2, #4294967295
 800e24e:	40f2      	lsrs	r2, r6
 800e250:	4210      	tst	r0, r2
 800e252:	d0c1      	beq.n	800e1d8 <rint+0x70>
 800e254:	0852      	lsrs	r2, r2, #1
 800e256:	4210      	tst	r0, r2
 800e258:	bf1f      	itttt	ne
 800e25a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e25e:	ea20 0202 	bicne.w	r2, r0, r2
 800e262:	4134      	asrne	r4, r6
 800e264:	4314      	orrne	r4, r2
 800e266:	e7d1      	b.n	800e20c <rint+0xa4>
 800e268:	0800e6b8 	.word	0x0800e6b8
 800e26c:	000fffff 	.word	0x000fffff

0800e270 <scalbn>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	ec55 4b10 	vmov	r4, r5, d0
 800e276:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e27a:	4606      	mov	r6, r0
 800e27c:	462b      	mov	r3, r5
 800e27e:	b9aa      	cbnz	r2, 800e2ac <scalbn+0x3c>
 800e280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e284:	4323      	orrs	r3, r4
 800e286:	d03b      	beq.n	800e300 <scalbn+0x90>
 800e288:	4b31      	ldr	r3, [pc, #196]	; (800e350 <scalbn+0xe0>)
 800e28a:	4629      	mov	r1, r5
 800e28c:	2200      	movs	r2, #0
 800e28e:	ee10 0a10 	vmov	r0, s0
 800e292:	f7f2 f955 	bl	8000540 <__aeabi_dmul>
 800e296:	4b2f      	ldr	r3, [pc, #188]	; (800e354 <scalbn+0xe4>)
 800e298:	429e      	cmp	r6, r3
 800e29a:	4604      	mov	r4, r0
 800e29c:	460d      	mov	r5, r1
 800e29e:	da12      	bge.n	800e2c6 <scalbn+0x56>
 800e2a0:	a327      	add	r3, pc, #156	; (adr r3, 800e340 <scalbn+0xd0>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f2 f94b 	bl	8000540 <__aeabi_dmul>
 800e2aa:	e009      	b.n	800e2c0 <scalbn+0x50>
 800e2ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e2b0:	428a      	cmp	r2, r1
 800e2b2:	d10c      	bne.n	800e2ce <scalbn+0x5e>
 800e2b4:	ee10 2a10 	vmov	r2, s0
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	f7f1 ff8a 	bl	80001d4 <__adddf3>
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	e01c      	b.n	800e300 <scalbn+0x90>
 800e2c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	3a36      	subs	r2, #54	; 0x36
 800e2ce:	4432      	add	r2, r6
 800e2d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e2d4:	428a      	cmp	r2, r1
 800e2d6:	dd0b      	ble.n	800e2f0 <scalbn+0x80>
 800e2d8:	ec45 4b11 	vmov	d1, r4, r5
 800e2dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e348 <scalbn+0xd8>
 800e2e0:	f000 f83c 	bl	800e35c <copysign>
 800e2e4:	a318      	add	r3, pc, #96	; (adr r3, 800e348 <scalbn+0xd8>)
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	ec51 0b10 	vmov	r0, r1, d0
 800e2ee:	e7da      	b.n	800e2a6 <scalbn+0x36>
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	dd08      	ble.n	800e306 <scalbn+0x96>
 800e2f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e300:	ec45 4b10 	vmov	d0, r4, r5
 800e304:	bd70      	pop	{r4, r5, r6, pc}
 800e306:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e30a:	da0d      	bge.n	800e328 <scalbn+0xb8>
 800e30c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e310:	429e      	cmp	r6, r3
 800e312:	ec45 4b11 	vmov	d1, r4, r5
 800e316:	dce1      	bgt.n	800e2dc <scalbn+0x6c>
 800e318:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e340 <scalbn+0xd0>
 800e31c:	f000 f81e 	bl	800e35c <copysign>
 800e320:	a307      	add	r3, pc, #28	; (adr r3, 800e340 <scalbn+0xd0>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	e7e0      	b.n	800e2ea <scalbn+0x7a>
 800e328:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e32c:	3236      	adds	r2, #54	; 0x36
 800e32e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e332:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e336:	4620      	mov	r0, r4
 800e338:	4629      	mov	r1, r5
 800e33a:	2200      	movs	r2, #0
 800e33c:	4b06      	ldr	r3, [pc, #24]	; (800e358 <scalbn+0xe8>)
 800e33e:	e7b2      	b.n	800e2a6 <scalbn+0x36>
 800e340:	c2f8f359 	.word	0xc2f8f359
 800e344:	01a56e1f 	.word	0x01a56e1f
 800e348:	8800759c 	.word	0x8800759c
 800e34c:	7e37e43c 	.word	0x7e37e43c
 800e350:	43500000 	.word	0x43500000
 800e354:	ffff3cb0 	.word	0xffff3cb0
 800e358:	3c900000 	.word	0x3c900000

0800e35c <copysign>:
 800e35c:	ec51 0b10 	vmov	r0, r1, d0
 800e360:	ee11 0a90 	vmov	r0, s3
 800e364:	ee10 2a10 	vmov	r2, s0
 800e368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e36c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e370:	ea41 0300 	orr.w	r3, r1, r0
 800e374:	ec43 2b10 	vmov	d0, r2, r3
 800e378:	4770      	bx	lr
	...

0800e37c <__errno>:
 800e37c:	4b01      	ldr	r3, [pc, #4]	; (800e384 <__errno+0x8>)
 800e37e:	6818      	ldr	r0, [r3, #0]
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	200000e0 	.word	0x200000e0

0800e388 <__libc_init_array>:
 800e388:	b570      	push	{r4, r5, r6, lr}
 800e38a:	4e0d      	ldr	r6, [pc, #52]	; (800e3c0 <__libc_init_array+0x38>)
 800e38c:	4c0d      	ldr	r4, [pc, #52]	; (800e3c4 <__libc_init_array+0x3c>)
 800e38e:	1ba4      	subs	r4, r4, r6
 800e390:	10a4      	asrs	r4, r4, #2
 800e392:	2500      	movs	r5, #0
 800e394:	42a5      	cmp	r5, r4
 800e396:	d109      	bne.n	800e3ac <__libc_init_array+0x24>
 800e398:	4e0b      	ldr	r6, [pc, #44]	; (800e3c8 <__libc_init_array+0x40>)
 800e39a:	4c0c      	ldr	r4, [pc, #48]	; (800e3cc <__libc_init_array+0x44>)
 800e39c:	f000 f8ea 	bl	800e574 <_init>
 800e3a0:	1ba4      	subs	r4, r4, r6
 800e3a2:	10a4      	asrs	r4, r4, #2
 800e3a4:	2500      	movs	r5, #0
 800e3a6:	42a5      	cmp	r5, r4
 800e3a8:	d105      	bne.n	800e3b6 <__libc_init_array+0x2e>
 800e3aa:	bd70      	pop	{r4, r5, r6, pc}
 800e3ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3b0:	4798      	blx	r3
 800e3b2:	3501      	adds	r5, #1
 800e3b4:	e7ee      	b.n	800e394 <__libc_init_array+0xc>
 800e3b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3ba:	4798      	blx	r3
 800e3bc:	3501      	adds	r5, #1
 800e3be:	e7f2      	b.n	800e3a6 <__libc_init_array+0x1e>
 800e3c0:	0800e6d0 	.word	0x0800e6d0
 800e3c4:	0800e6d0 	.word	0x0800e6d0
 800e3c8:	0800e6d0 	.word	0x0800e6d0
 800e3cc:	0800e6d8 	.word	0x0800e6d8

0800e3d0 <malloc>:
 800e3d0:	4b02      	ldr	r3, [pc, #8]	; (800e3dc <malloc+0xc>)
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	6818      	ldr	r0, [r3, #0]
 800e3d6:	f000 b861 	b.w	800e49c <_malloc_r>
 800e3da:	bf00      	nop
 800e3dc:	200000e0 	.word	0x200000e0

0800e3e0 <free>:
 800e3e0:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <free+0xc>)
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	f000 b80b 	b.w	800e400 <_free_r>
 800e3ea:	bf00      	nop
 800e3ec:	200000e0 	.word	0x200000e0

0800e3f0 <memset>:
 800e3f0:	4402      	add	r2, r0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d100      	bne.n	800e3fa <memset+0xa>
 800e3f8:	4770      	bx	lr
 800e3fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fe:	e7f9      	b.n	800e3f4 <memset+0x4>

0800e400 <_free_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4605      	mov	r5, r0
 800e404:	2900      	cmp	r1, #0
 800e406:	d045      	beq.n	800e494 <_free_r+0x94>
 800e408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e40c:	1f0c      	subs	r4, r1, #4
 800e40e:	2b00      	cmp	r3, #0
 800e410:	bfb8      	it	lt
 800e412:	18e4      	addlt	r4, r4, r3
 800e414:	f000 f8ac 	bl	800e570 <__malloc_lock>
 800e418:	4a1f      	ldr	r2, [pc, #124]	; (800e498 <_free_r+0x98>)
 800e41a:	6813      	ldr	r3, [r2, #0]
 800e41c:	4610      	mov	r0, r2
 800e41e:	b933      	cbnz	r3, 800e42e <_free_r+0x2e>
 800e420:	6063      	str	r3, [r4, #4]
 800e422:	6014      	str	r4, [r2, #0]
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e42a:	f000 b8a2 	b.w	800e572 <__malloc_unlock>
 800e42e:	42a3      	cmp	r3, r4
 800e430:	d90c      	bls.n	800e44c <_free_r+0x4c>
 800e432:	6821      	ldr	r1, [r4, #0]
 800e434:	1862      	adds	r2, r4, r1
 800e436:	4293      	cmp	r3, r2
 800e438:	bf04      	itt	eq
 800e43a:	681a      	ldreq	r2, [r3, #0]
 800e43c:	685b      	ldreq	r3, [r3, #4]
 800e43e:	6063      	str	r3, [r4, #4]
 800e440:	bf04      	itt	eq
 800e442:	1852      	addeq	r2, r2, r1
 800e444:	6022      	streq	r2, [r4, #0]
 800e446:	6004      	str	r4, [r0, #0]
 800e448:	e7ec      	b.n	800e424 <_free_r+0x24>
 800e44a:	4613      	mov	r3, r2
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	b10a      	cbz	r2, 800e454 <_free_r+0x54>
 800e450:	42a2      	cmp	r2, r4
 800e452:	d9fa      	bls.n	800e44a <_free_r+0x4a>
 800e454:	6819      	ldr	r1, [r3, #0]
 800e456:	1858      	adds	r0, r3, r1
 800e458:	42a0      	cmp	r0, r4
 800e45a:	d10b      	bne.n	800e474 <_free_r+0x74>
 800e45c:	6820      	ldr	r0, [r4, #0]
 800e45e:	4401      	add	r1, r0
 800e460:	1858      	adds	r0, r3, r1
 800e462:	4282      	cmp	r2, r0
 800e464:	6019      	str	r1, [r3, #0]
 800e466:	d1dd      	bne.n	800e424 <_free_r+0x24>
 800e468:	6810      	ldr	r0, [r2, #0]
 800e46a:	6852      	ldr	r2, [r2, #4]
 800e46c:	605a      	str	r2, [r3, #4]
 800e46e:	4401      	add	r1, r0
 800e470:	6019      	str	r1, [r3, #0]
 800e472:	e7d7      	b.n	800e424 <_free_r+0x24>
 800e474:	d902      	bls.n	800e47c <_free_r+0x7c>
 800e476:	230c      	movs	r3, #12
 800e478:	602b      	str	r3, [r5, #0]
 800e47a:	e7d3      	b.n	800e424 <_free_r+0x24>
 800e47c:	6820      	ldr	r0, [r4, #0]
 800e47e:	1821      	adds	r1, r4, r0
 800e480:	428a      	cmp	r2, r1
 800e482:	bf04      	itt	eq
 800e484:	6811      	ldreq	r1, [r2, #0]
 800e486:	6852      	ldreq	r2, [r2, #4]
 800e488:	6062      	str	r2, [r4, #4]
 800e48a:	bf04      	itt	eq
 800e48c:	1809      	addeq	r1, r1, r0
 800e48e:	6021      	streq	r1, [r4, #0]
 800e490:	605c      	str	r4, [r3, #4]
 800e492:	e7c7      	b.n	800e424 <_free_r+0x24>
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	bf00      	nop
 800e498:	20000914 	.word	0x20000914

0800e49c <_malloc_r>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	1ccd      	adds	r5, r1, #3
 800e4a0:	f025 0503 	bic.w	r5, r5, #3
 800e4a4:	3508      	adds	r5, #8
 800e4a6:	2d0c      	cmp	r5, #12
 800e4a8:	bf38      	it	cc
 800e4aa:	250c      	movcc	r5, #12
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	db01      	blt.n	800e4b6 <_malloc_r+0x1a>
 800e4b2:	42a9      	cmp	r1, r5
 800e4b4:	d903      	bls.n	800e4be <_malloc_r+0x22>
 800e4b6:	230c      	movs	r3, #12
 800e4b8:	6033      	str	r3, [r6, #0]
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	f000 f857 	bl	800e570 <__malloc_lock>
 800e4c2:	4a21      	ldr	r2, [pc, #132]	; (800e548 <_malloc_r+0xac>)
 800e4c4:	6814      	ldr	r4, [r2, #0]
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	b991      	cbnz	r1, 800e4f0 <_malloc_r+0x54>
 800e4ca:	4c20      	ldr	r4, [pc, #128]	; (800e54c <_malloc_r+0xb0>)
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	b91b      	cbnz	r3, 800e4d8 <_malloc_r+0x3c>
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f000 f83d 	bl	800e550 <_sbrk_r>
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4630      	mov	r0, r6
 800e4dc:	f000 f838 	bl	800e550 <_sbrk_r>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d124      	bne.n	800e52e <_malloc_r+0x92>
 800e4e4:	230c      	movs	r3, #12
 800e4e6:	6033      	str	r3, [r6, #0]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f000 f842 	bl	800e572 <__malloc_unlock>
 800e4ee:	e7e4      	b.n	800e4ba <_malloc_r+0x1e>
 800e4f0:	680b      	ldr	r3, [r1, #0]
 800e4f2:	1b5b      	subs	r3, r3, r5
 800e4f4:	d418      	bmi.n	800e528 <_malloc_r+0x8c>
 800e4f6:	2b0b      	cmp	r3, #11
 800e4f8:	d90f      	bls.n	800e51a <_malloc_r+0x7e>
 800e4fa:	600b      	str	r3, [r1, #0]
 800e4fc:	50cd      	str	r5, [r1, r3]
 800e4fe:	18cc      	adds	r4, r1, r3
 800e500:	4630      	mov	r0, r6
 800e502:	f000 f836 	bl	800e572 <__malloc_unlock>
 800e506:	f104 000b 	add.w	r0, r4, #11
 800e50a:	1d23      	adds	r3, r4, #4
 800e50c:	f020 0007 	bic.w	r0, r0, #7
 800e510:	1ac3      	subs	r3, r0, r3
 800e512:	d0d3      	beq.n	800e4bc <_malloc_r+0x20>
 800e514:	425a      	negs	r2, r3
 800e516:	50e2      	str	r2, [r4, r3]
 800e518:	e7d0      	b.n	800e4bc <_malloc_r+0x20>
 800e51a:	428c      	cmp	r4, r1
 800e51c:	684b      	ldr	r3, [r1, #4]
 800e51e:	bf16      	itet	ne
 800e520:	6063      	strne	r3, [r4, #4]
 800e522:	6013      	streq	r3, [r2, #0]
 800e524:	460c      	movne	r4, r1
 800e526:	e7eb      	b.n	800e500 <_malloc_r+0x64>
 800e528:	460c      	mov	r4, r1
 800e52a:	6849      	ldr	r1, [r1, #4]
 800e52c:	e7cc      	b.n	800e4c8 <_malloc_r+0x2c>
 800e52e:	1cc4      	adds	r4, r0, #3
 800e530:	f024 0403 	bic.w	r4, r4, #3
 800e534:	42a0      	cmp	r0, r4
 800e536:	d005      	beq.n	800e544 <_malloc_r+0xa8>
 800e538:	1a21      	subs	r1, r4, r0
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 f808 	bl	800e550 <_sbrk_r>
 800e540:	3001      	adds	r0, #1
 800e542:	d0cf      	beq.n	800e4e4 <_malloc_r+0x48>
 800e544:	6025      	str	r5, [r4, #0]
 800e546:	e7db      	b.n	800e500 <_malloc_r+0x64>
 800e548:	20000914 	.word	0x20000914
 800e54c:	20000918 	.word	0x20000918

0800e550 <_sbrk_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4c06      	ldr	r4, [pc, #24]	; (800e56c <_sbrk_r+0x1c>)
 800e554:	2300      	movs	r3, #0
 800e556:	4605      	mov	r5, r0
 800e558:	4608      	mov	r0, r1
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	f7f6 fa2c 	bl	80049b8 <_sbrk>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d102      	bne.n	800e56a <_sbrk_r+0x1a>
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	b103      	cbz	r3, 800e56a <_sbrk_r+0x1a>
 800e568:	602b      	str	r3, [r5, #0]
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	200011f8 	.word	0x200011f8

0800e570 <__malloc_lock>:
 800e570:	4770      	bx	lr

0800e572 <__malloc_unlock>:
 800e572:	4770      	bx	lr

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
